/*! For license information please see postit.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.PostItModeler=t():e.PostItModeler=t()}(self,(function(){return(()=>{var e={803:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>ph});var i=n(717),r=n.n(i),o=function(e,t){return function(e){var t=e.exports=function(e,n){if(n||(n=16),void 0===e&&(e=128),e<=0)return"0";for(var i=Math.log(Math.pow(2,e))/Math.log(n),r=2;i===1/0;r*=2)i=Math.log(Math.pow(2,e/r))/Math.log(n)*r;var o=i-Math.floor(i),a="";for(r=0;r<Math.floor(i);r++)a=Math.floor(Math.random()*n).toString(n)+a;if(o){var s=Math.pow(n,o);a=Math.floor(Math.random()*s).toString(n)+a}var c=parseInt(a,n);return c!==1/0&&c>=Math.pow(2,e)?t(e,n):a};t.rack=function(e,n,i){var r=function(r){var a=0;do{if(a++>10){if(!i)throw new Error("too many ID collisions, use more bits");e+=i}var s=t(e,n)}while(Object.hasOwnProperty.call(o,s));return o[s]=r,s},o=r.hats={};return r.get=function(e){return r.hats[e]},r.set=function(e,t){return r.hats[e]=t,r},r.bits=e||128,r.base=n||16,r}}(t={exports:{}}),t.exports}();function a(e){if(!(this instanceof a))return new a(e);e=e||[128,36,1],this._seed=e.length?o.rack(e[0],e[1],e[2]):e}a.prototype.next=function(e){return this._seed(e||!0)},a.prototype.nextPrefixed=function(e,t){var n;do{n=e+this.next(!0)}while(this.assigned(n));return this.claim(n,t),n},a.prototype.claim=function(e,t){this._seed.set(e,t||!0)},a.prototype.assigned=function(e){return this._seed.get(e)||!1},a.prototype.unclaim=function(e){delete this._seed.hats[e]},a.prototype.clear=function(){var e,t=this._seed.hats;for(e in t)this.unclaim(e)};const s=a;function c(e){return Array.prototype.concat.apply([],e)}var u=Object.prototype.toString,l=Object.prototype.hasOwnProperty;function p(e){return void 0===e}function h(e){return void 0!==e}function d(e){return null==e}function f(e){return"[object Array]"===u.call(e)}function y(e){return"[object Object]"===u.call(e)}function v(e){return"[object Number]"===u.call(e)}function g(e){var t=u.call(e);return"[object Function]"===t||"[object AsyncFunction]"===t||"[object GeneratorFunction]"===t||"[object AsyncGeneratorFunction]"===t||"[object Proxy]"===t}function m(e){return"[object String]"===u.call(e)}function x(e,t){return l.call(e,t)}function _(e,t){var n;return t=L(t),b(e,(function(e,i){if(t(e,i))return n=e,!1})),n}function w(e,t){var n=[];return b(e,(function(e,i){t(e,i)&&n.push(e)})),n}function b(e,t){var n;if(!p(e)){var i=f(e)?D:z;for(var r in e)if(x(e,r)&&!1===t(n=e[r],i(r)))return n}}function E(e,t,n){return b(e,(function(e,i){n=t(n,e,i)})),n}function S(e,t){return!!E(e,(function(e,n,i){return e&&t(n,i)}),!0)}function T(e,t){return!!_(e,t)}function k(e,t){var n=[];return b(e,(function(e,i){n.push(t(e,i))})),n}function C(e){return e&&Object.keys(e)||[]}function M(e){return C(e).length}function P(e){return k(e,(function(e){return e}))}function j(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t=N(t),b(e,(function(e){var i=t(e)||"_",r=n[i];r||(r=n[i]=[]),r.push(e)})),n}function B(e){e=N(e);for(var t={},n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];b(i,(function(n){return j(n,e,t)}));var o=k(t,(function(e,t){return e[0]}));return o}var A=B;function R(e,t){t=N(t);var n=[];return b(e,(function(e,i){for(var r=t(e,i),o={d:r,v:e},a=0;a<n.length;a++)if(r<n[a].d)return void n.splice(a,0,o);n.push(o)})),k(n,(function(e){return e.v}))}function O(e){return function(t){return S(e,(function(e,n){return t[n]===e}))}}function N(e){return g(e)?e:function(t){return t[e]}}function L(e){return g(e)?e:function(t){return t===e}}function z(e){return e}function D(e){return Number(e)}function I(e,t){var n,i,r,o;function a(){var a=Date.now(),c=o+t-a;if(c>0)return s(c);e.apply(r,i),n=o=i=r=void 0}function s(e){n=setTimeout(a,e)}return function(){o=Date.now();for(var e=arguments.length,a=new Array(e),c=0;c<e;c++)a[c]=arguments[c];i=a,r=this,n||s(t)}}function F(e,t){return e.bind(t)}function H(){return(H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}function G(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return H.apply(void 0,[e].concat(n))}function U(e,t){var n={},i=Object(e);return b(t,(function(t){t in i&&(n[t]=e[t])})),n}function W(e,t){var n={};return b(Object(e),(function(e,i){-1===t.indexOf(i)&&(n[i]=e)})),n}function V(e,t,n){return 2==arguments.length?e.getAttribute(t):null===n?e.removeAttribute(t):(e.setAttribute(t,n),e)}var q=[].indexOf,Y=function(e,t){if(q)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1},X=/\s+/,K=Object.prototype.toString;function Z(e){return new J(e)}function J(e){if(!e||!e.nodeType)throw new Error("A DOM element reference is required");this.el=e,this.list=e.classList}function Q(e){for(var t;e.childNodes.length;)t=e.childNodes[0],e.removeChild(t);return e}J.prototype.add=function(e){if(this.list)return this.list.add(e),this;var t=this.array();return~Y(t,e)||t.push(e),this.el.className=t.join(" "),this},J.prototype.remove=function(e){if("[object RegExp]"==K.call(e))return this.removeMatching(e);if(this.list)return this.list.remove(e),this;var t=this.array(),n=Y(t,e);return~n&&t.splice(n,1),this.el.className=t.join(" "),this},J.prototype.removeMatching=function(e){for(var t=this.array(),n=0;n<t.length;n++)e.test(t[n])&&this.remove(t[n]);return this},J.prototype.toggle=function(e,t){return this.list?(void 0!==t?t!==this.list.toggle(e,t)&&this.list.toggle(e):this.list.toggle(e),this):(void 0!==t?t?this.add(e):this.remove(e):this.has(e)?this.remove(e):this.add(e),this)},J.prototype.array=function(){var e=(this.el.getAttribute("class")||"").replace(/^\s+|\s+$/g,"").split(X);return""===e[0]&&e.shift(),e},J.prototype.has=J.prototype.contains=function(e){return this.list?this.list.contains(e):!!~Y(this.array(),e)};var ee="undefined"!=typeof Element?Element.prototype:{},te=ee.matches||ee.matchesSelector||ee.webkitMatchesSelector||ee.mozMatchesSelector||ee.msMatchesSelector||ee.oMatchesSelector,ne=function(e,t){if(!e||1!==e.nodeType)return!1;if(te)return te.call(e,t);for(var n=e.parentNode.querySelectorAll(t),i=0;i<n.length;i++)if(n[i]==e)return!0;return!1};function ie(e,t,n){for(var i=n?e:e.parentNode;i&&i.nodeType!==document.DOCUMENT_NODE&&i.nodeType!==document.DOCUMENT_FRAGMENT_NODE;){if(ne(i,t))return i;i=i.parentNode}return ne(i,t)?i:null}var re,oe=window.addEventListener?"addEventListener":"attachEvent",ae=window.removeEventListener?"removeEventListener":"detachEvent",se="addEventListener"!==oe?"on":"",ce={bind:function(e,t,n,i){return e[oe](se+t,n,i||!1),n},unbind:function(e,t,n,i){return e[ae](se+t,n,i||!1),n}},ue=["focus","blur"],le=function(e,t,n,i,r){return-1!==ue.indexOf(n)&&(r=!0),ce.bind(e,n,(function(n){var r=n.target||n.srcElement;n.delegateTarget=ie(r,t,!0),n.delegateTarget&&i.call(e,n)}),r)},pe=function(e,t,n,i){return-1!==ue.indexOf(t)&&(i=!0),ce.unbind(e,t,n,i)},he=function(e,t){if("string"!=typeof e)throw new TypeError("String expected");t||(t=document);var n=/<([\w:]+)/.exec(e);if(!n)return t.createTextNode(e);e=e.replace(/^\s+|\s+$/g,"");var i=n[1];if("body"==i)return(r=t.createElement("html")).innerHTML=e,r.removeChild(r.lastChild);var r,o=fe[i]||fe._default,a=o[0],s=o[1],c=o[2];for((r=t.createElement("div")).innerHTML=s+e+c;a--;)r=r.lastChild;if(r.firstChild==r.lastChild)return r.removeChild(r.firstChild);for(var u=t.createDocumentFragment();r.firstChild;)u.appendChild(r.removeChild(r.firstChild));return u},de=!1;"undefined"!=typeof document&&((re=document.createElement("div")).innerHTML='  <link/><table></table><a href="/a">a</a><input type="checkbox"/>',de=!re.getElementsByTagName("link").length,re=void 0);var fe={legend:[1,"<fieldset>","</fieldset>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],_default:de?[1,"X<div>","</div>"]:[0,"",""]};function ye(e,t){return(t=t||document).querySelector(e)}function ve(e,t){return(t=t||document).querySelectorAll(e)}function ge(e){e.parentNode&&e.parentNode.removeChild(e)}function me(e,t){return t.appendChild(function(e,t){if(e.ownerDocument!==t.ownerDocument)try{return t.ownerDocument.importNode(e,!0)}catch(e){}return e}(e,t))}function xe(e,t){return me(t,e),e}fe.td=fe.th=[3,"<table><tbody><tr>","</tr></tbody></table>"],fe.option=fe.optgroup=[1,'<select multiple="multiple">',"</select>"],fe.thead=fe.tbody=fe.colgroup=fe.caption=fe.tfoot=[1,"<table>","</table>"],fe.polyline=fe.ellipse=fe.polygon=fe.circle=fe.text=fe.line=fe.path=fe.rect=fe.g=[1,'<svg xmlns="http://www.w3.org/2000/svg" version="1.1">',"</svg>"];var _e={"alignment-baseline":1,"baseline-shift":1,clip:1,"clip-path":1,"clip-rule":1,color:1,"color-interpolation":1,"color-interpolation-filters":1,"color-profile":1,"color-rendering":1,cursor:1,direction:1,display:1,"dominant-baseline":1,"enable-background":1,fill:1,"fill-opacity":1,"fill-rule":1,filter:1,"flood-color":1,"flood-opacity":1,font:1,"font-family":1,"font-size":2,"font-size-adjust":1,"font-stretch":1,"font-style":1,"font-variant":1,"font-weight":1,"glyph-orientation-horizontal":1,"glyph-orientation-vertical":1,"image-rendering":1,kerning:1,"letter-spacing":1,"lighting-color":1,marker:1,"marker-end":1,"marker-mid":1,"marker-start":1,mask:1,opacity:1,overflow:1,"pointer-events":1,"shape-rendering":1,"stop-color":1,"stop-opacity":1,stroke:1,"stroke-dasharray":1,"stroke-dashoffset":1,"stroke-linecap":1,"stroke-linejoin":1,"stroke-miterlimit":1,"stroke-opacity":1,"stroke-width":2,"text-anchor":1,"text-decoration":1,"text-rendering":1,"unicode-bidi":1,visibility:1,"word-spacing":1,"writing-mode":1};function we(e,t,n){var i=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),r=_e[i];r?(2===r&&"number"==typeof n&&(n=String(n)+"px"),e.style[i]=n):e.setAttributeNS(null,t,n)}function be(e,t,n){if("string"==typeof t){if(void 0===n)return function(e,t){return _e[t]?e.style[t]:e.getAttributeNS(null,t)}(e,t);we(e,t,n)}else!function(e,t){var n,i,r=Object.keys(t);for(n=0;i=r[n];n++)we(e,i,t[i])}(e,t);return e}function Ee(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}var Se=/\s+/,Te=Object.prototype.toString;function ke(e){return void 0!==e}function Ce(e){return new Me(e)}function Me(e){if(!e||!e.nodeType)throw new Error("A DOM element reference is required");this.el=e,this.list=e.classList}function Pe(e){var t=e.parentNode;return t&&t.removeChild(e),e}function je(e){for(var t;t=e.firstChild;)Pe(t);return e}function Be(e){return e.cloneNode(!0)}Me.prototype.add=function(e){if(this.list)return this.list.add(e),this;var t=this.array();return~Ee(t,e)||t.push(e),ke(this.el.className.baseVal)?this.el.className.baseVal=t.join(" "):this.el.className=t.join(" "),this},Me.prototype.remove=function(e){if("[object RegExp]"===Te.call(e))return this.removeMatching(e);if(this.list)return this.list.remove(e),this;var t=this.array(),n=Ee(t,e);return~n&&t.splice(n,1),this.el.className.baseVal=t.join(" "),this},Me.prototype.removeMatching=function(e){for(var t=this.array(),n=0;n<t.length;n++)e.test(t[n])&&this.remove(t[n]);return this},Me.prototype.toggle=function(e,t){return this.list?(ke(t)?t!==this.list.toggle(e,t)&&this.list.toggle(e):this.list.toggle(e),this):(ke(t)?t?this.add(e):this.remove(e):this.has(e)?this.remove(e):this.add(e),this)},Me.prototype.array=function(){var e=(this.el.getAttribute("class")||"").replace(/^\s+|\s+$/g,"").split(Se);return""===e[0]&&e.shift(),e},Me.prototype.has=Me.prototype.contains=function(e){return this.list?this.list.contains(e):!!~Ee(this.array(),e)};var Ae="http://www.w3.org/2000/svg",Re='<svg xmlns="'+Ae+'"';function Oe(e){var t=!1;"<svg"===e.substring(0,4)?-1===e.indexOf(Ae)&&(e=Re+e.substring(4)):(e=Re+">"+e+"</svg>",t=!0);var n=function(e){var t;return(t=new DOMParser).async=!1,t.parseFromString(e,"text/xml")}(e);if(!t)return n;for(var i=document.createDocumentFragment(),r=n.firstChild;r.firstChild;)i.appendChild(r.firstChild);return i}function Ne(e,t){var n;return"<"===e.charAt(0)?(n=Oe(e).firstChild,n=document.importNode(n,!0)):n=document.createElementNS(Ae,e),t&&be(n,t),n}var Le=Ne("svg");function ze(e,t){var n,i,r=Object.keys(t);for(n=0;i=r[n];n++)e[i]=t[i];return e}function De(e){return e?Le.createSVGTransformFromMatrix(e):Le.createSVGTransform()}var Ie=/([&<>]{1})/g,$e=/([\n\r"]{1})/g,Fe={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"'"};function He(e,t){return e.replace(t,(function(e,t){return Fe[t]||t}))}function Ge(e,t){var n,i,r,o,a;switch(e.nodeType){case 3:t.push(He(e.textContent,Ie));break;case 1:if(t.push("<",e.tagName),e.hasAttributes())for(n=0,i=(r=e.attributes).length;n<i;++n)o=r.item(n),t.push(" ",o.name,'="',He(o.value,$e),'"');if(e.hasChildNodes()){for(t.push(">"),n=0,i=(a=e.childNodes).length;n<i;++n)Ge(a.item(n),t);t.push("</",e.tagName,">")}else t.push("/>");break;case 8:t.push("\x3c!--",He(e.nodeValue,Ie),"--\x3e");break;case 4:t.push("<![CDATA[",e.nodeValue,"]]>");break;default:throw new Error("unable to handle node "+e.nodeType)}return t}function Ue(e,t){if(void 0!==t){try{!function(e,t){var n=Oe(t);if(je(e),t){(function(e){return"#document-fragment"===e.nodeName})(n)||(n=n.documentElement);for(var i,r=(i=n.childNodes,Array.prototype.slice.call(i)),o=0;o<r.length;o++)me(r[o],e)}}(e,t)}catch(e){throw new Error("error parsing SVG: "+e.message)}return e}return function(e){for(var t=e.firstChild,n=[];t;)Ge(t,n),t=t.nextSibling;return n.join("")}(e)}function We(e,t){return t instanceof SVGMatrix?e.createSVGTransformFromMatrix(t):t}function Ve(e,t){var n=e.transform.baseVal;return t&&(Array.isArray(t)||(t=[t]),function(e,t){var n,i;for(e.clear(),n=0;i=t[n];n++)e.appendItem(We(e,i))}(n,t)),n.consolidate()}var qe=/^class /;function Ye(e){return"[object Array]"===Object.prototype.toString.call(e)}function Xe(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Ke(){var e=Array.prototype.slice.call(arguments);1===e.length&&Ye(e[0])&&(e=e[0]);var t=e.pop();return t.$inject=e,t}var Ze=/constructor\s*[^(]*\(\s*([^)]*)\)/m,Je=/^(?:async )?(?:function\s*)?[^(]*\(\s*([^)]*)\)/m,Qe=/\/\*([^*]*)\*\//m;function et(e){if("function"!=typeof e)throw new Error('Cannot annotate "'+e+'". Expected a function!');var t=e.toString().match(function(e){return qe.test(e.toString())}(e)?Ze:Je);return t&&t[1]&&t[1].split(",").map((function(e){return(t=e.match(Qe))?t[1].trim():e.trim()}))||[]}function tt(){var e=[];this.factory=function(t,n){return e.push([t,"factory",n]),this},this.value=function(t,n){return e.push([t,"value",n]),this},this.type=function(t,n){return e.push([t,"type",n]),this},this.forEach=function(t){e.forEach(t)}}function nt(e,t){t=t||{get:function(e,t){if(n.push(e),!1===t)return null;throw a('No provider for "'+e+'"!')}};var n=[],i=this._providers=Object.create(t._providers||null),r=this._instances=Object.create(null),o=r.injector=this,a=function(e){var t=n.join(" -> ");return n.length=0,new Error(t?e+" (Resolving: "+t+")":e)},s=function(e,o){if(!i[e]&&-1!==e.indexOf(".")){for(var c=e.split("."),u=s(c.shift());c.length;)u=u[c.shift()];return u}if(Xe(r,e))return r[e];if(Xe(i,e)){if(-1!==n.indexOf(e))throw n.push(e),a("Cannot resolve circular dependency!");return n.push(e),r[e]=i[e][0](i[e][1]),n.pop(),r[e]}return t.get(e,o)},c=function(e,t){if(void 0===t&&(t={}),"function"!=typeof e){if(!Ye(e))throw new Error('Cannot invoke "'+e+'". Expected a function!');e=Ke(e.slice())}return{fn:e,dependencies:(e.$inject||et(e)).map((function(e){return Xe(t,e)?t[e]:s(e)}))}},u=function(e){var t=c(e),n=t.fn,i=t.dependencies;return new(Function.prototype.bind.apply(n,[null].concat(i)))},l=function(e,t,n){var i=c(e,n),r=i.fn,o=i.dependencies;return r.apply(t,o)},p=function(e){return Ke((function(t){return e.get(t)}))},h={factory:l,type:u,value:function(e){return e}};e.forEach((function(e){function t(e,t){return"value"!==e&&Ye(t)&&(t=Ke(t.slice())),t}if(e instanceof tt)e.forEach((function(e){var n=e[0],r=e[1],o=e[2];i[n]=[h[r],t(r,o),r]}));else if("object"==typeof e)if(e.__exports__){var n=Object.keys(e).reduce((function(t,n){return"__"!==n.substring(0,2)&&(t[n]=e[n]),t}),Object.create(null)),r=new nt((e.__modules__||[]).concat([n]),o),a=Ke((function(e){return r.get(e)}));e.__exports__.forEach((function(e){i[e]=[a,e,"private",r]}))}else Object.keys(e).forEach((function(n){if("private"!==e[n][2]){var r=e[n][0],o=e[n][1];i[n]=[h[r],t(r,o),r]}else i[n]=e[n]}))})),this.get=s,this.invoke=l,this.instantiate=u,this.createChild=function(e,t){if(t&&t.length){var n,r,a,s,c=Object.create(null),u=Object.create(null),l=[],h=[],d=[];for(var f in i)n=i[f],-1!==t.indexOf(f)&&("private"===n[2]?-1===(r=l.indexOf(n[3]))?(a=n[3].createChild([],t),s=p(a),l.push(n[3]),h.push(a),d.push(s),c[f]=[s,f,"private",a]):c[f]=[d[r],f,"private",h[r]]:c[f]=[n[2],n[1]],u[f]=!0),"factory"!==n[2]&&"type"!==n[2]||!n[1].$scope||t.forEach((function(e){-1!==n[1].$scope.indexOf(e)&&(c[f]=[n[2],n[1]],u[e]=!0)}));t.forEach((function(e){if(!u[e])throw new Error('No provider for "'+e+'". Cannot use provider from the parent!')})),e.unshift(c)}return new nt(e,o)}}function it(e,t){var n=this;t=t||1e3,e.on(["render.shape","render.connection"],t,(function(e,t){var i=e.type,r=t.element,o=t.gfx;if(n.canRender(r))return"render.shape"===i?n.drawShape(o,r):n.drawConnection(o,r)})),e.on(["render.getShapePath","render.getConnectionPath"],t,(function(e,t){if(n.canRender(t))return"render.getShapePath"===e.type?n.getShapePath(t):n.getConnectionPath(t)}))}function rt(e){return e.join(",").replace(/,?([A-z]),?/g,"$1")}function ot(e){for(var t,n="",i=0;t=e[i];i++)n+=t.x+","+t.y+" ";return n}function at(e,t){var n=Ne("polyline");return be(n,{points:ot(e)}),t&&be(n,t),n}function st(e){return w(e,(function(t){return!_(e,(function(e){return e!==t&&ct(t,e)}))}))}function ct(e,t){if(t){if(e===t)return t;if(e.parent)return ct(e.parent,t)}}function ut(e,t,n){var i=!n||-1===e.indexOf(t);return i&&e.push(t),i}function lt(e,t,n){n=n||0,f(e)||(e=[e]),b(e,(function(e,i){var r=t(e,i,n);f(r)&&r.length&&lt(r,t,n+1)}))}function pt(e,t){return function(e,t,n){var i=[],r=[];return lt(e,(function(e,o,a){ut(i,e,t);var s=e.children;if((-1===n||a<n)&&s&&ut(r,s,t))return s})),i}(e,!t,-1)}function ht(e,t){var n,i,r,o;return t=!!t,f(e)||(e=[e]),b(e,(function(e){var a=e;e.waypoints&&!t&&(a=ht(e.waypoints,!0));var s=a.x,c=a.y,u=a.height||0,l=a.width||0;(s<n||void 0===n)&&(n=s),(c<i||void 0===i)&&(i=c),(s+l>r||void 0===r)&&(r=s+l),(c+u>o||void 0===o)&&(o=c+u)})),{x:n,y:i,height:o-i,width:r-n}}function dt(e){return"waypoints"in e?"connection":"x"in e?"shape":"root"}function ft(e){return!(!e||!e.isFrame)}function yt(e,t){return G({},e||{},t||{})}function vt(e,t){it.call(this,e,1),this.CONNECTION_STYLE=t.style(["no-fill"],{strokeWidth:5,stroke:"fuchsia"}),this.SHAPE_STYLE=t.style({fill:"white",stroke:"fuchsia",strokeWidth:2}),this.FRAME_STYLE=t.style(["no-fill"],{stroke:"fuchsia",strokeDasharray:4,strokeWidth:2})}it.prototype.canRender=function(){},it.prototype.drawShape=function(){},it.prototype.drawConnection=function(){},it.prototype.getShapePath=function(){},it.prototype.getConnectionPath=function(){},r()(vt,it),vt.prototype.canRender=function(){return!0},vt.prototype.drawShape=function(e,t){var n=Ne("rect");return be(n,{x:0,y:0,width:t.width||0,height:t.height||0}),ft(t)?be(n,this.FRAME_STYLE):be(n,this.SHAPE_STYLE),xe(e,n),n},vt.prototype.drawConnection=function(e,t){var n=at(t.waypoints,this.CONNECTION_STYLE);return xe(e,n),n},vt.prototype.getShapePath=function(e){var t=e.x,n=e.y,i=e.width;return rt([["M",t,n],["l",i,0],["l",0,e.height],["l",-i,0],["z"]])},vt.prototype.getConnectionPath=function(e){var t,n,i=e.waypoints,r=[];for(t=0;n=i[t];t++)n=n.original||n,r.push([0===t?"M":"L",n.x,n.y]);return rt(r)},vt.$inject=["eventBus","styles"];const gt={__init__:["defaultRenderer"],defaultRenderer:["type",vt],styles:["type",function(){var e={"no-fill":{fill:"none"},"no-border":{strokeOpacity:0},"no-events":{pointerEvents:"none"}},t=this;this.cls=function(e,t,n){return G(this.style(t,n),{class:e})},this.style=function(t,n){f(t)||n||(n=t,t=[]);var i=E(t,(function(t,n){return G(t,e[n]||{})}),{});return n?G(i,n):i},this.computeStyle=function(e,n,i){return f(n)||(i=n,n=[]),t.style(n||[],G({},i,e||{}))}}]};function mt(e,t){if(!e||!t)return-1;var n=e.indexOf(t);return-1!==n&&e.splice(n,1),n}function xt(e,t,n){if(e&&t){"number"!=typeof n&&(n=-1);var i=e.indexOf(t);if(-1!==i){if(i===n)return;if(-1===n)return;e.splice(i,1)}-1!==n?e.splice(n,0,t):e.push(t)}}function _t(e,t){return e&&t?e.indexOf(t):-1}function wt(e,t){return Math.round(e*t)/t}function bt(e){return v(e)?e+"px":e}function Et(e,t,n){var i=Ne("g");Ce(i).add(t);var r=void 0!==n?n:e.childNodes.length-1;return e.insertBefore(i,e.childNodes[r]||null),i}var St={shape:["x","y","width","height"],connection:["waypoints"]};function Tt(e,t,n,i){this._eventBus=t,this._elementRegistry=i,this._graphicsFactory=n,this._init(e||{})}function kt(e,t){var n="matrix("+t.a+","+t.b+","+t.c+","+t.d+","+t.e+","+t.f+")";e.setAttribute("transform",n)}Tt.$inject=["config.canvas","eventBus","graphicsFactory","elementRegistry"],Tt.prototype._init=function(e){var t=this._eventBus,n=this._container=function(e){var t=(e=G({},{width:"100%",height:"100%"},e)).container||document.body,n=document.createElement("div");return n.setAttribute("class","djs-container"),G(n.style,{position:"relative",overflow:"hidden",width:bt(e.width),height:bt(e.height)}),t.appendChild(n),n}(e),i=this._svg=Ne("svg");be(i,{width:"100%",height:"100%"}),xe(n,i);var r=this._viewport=Et(i,"viewport");this._layers={},!1!==e.deferUpdate&&(this._viewboxChanged=I(F(this._viewboxChanged,this),300)),t.on("diagram.init",(function(){t.fire("canvas.init",{svg:i,viewport:r})}),this),t.on(["shape.added","connection.added","shape.removed","connection.removed","elements.changed"],(function(){delete this._cachedViewbox}),this),t.on("diagram.destroy",500,this._destroy,this),t.on("diagram.clear",500,this._clear,this)},Tt.prototype._destroy=function(e){this._eventBus.fire("canvas.destroy",{svg:this._svg,viewport:this._viewport});var t=this._container.parentNode;t&&t.removeChild(this._container),delete this._svg,delete this._container,delete this._layers,delete this._rootElement,delete this._viewport},Tt.prototype._clear=function(){var e=this;this._elementRegistry.getAll().forEach((function(t){var n=dt(t);"root"===n?e.setRootElement(null,!0):e._removeElement(t,n)})),delete this._cachedViewbox},Tt.prototype.getDefaultLayer=function(){return this.getLayer("base",0)},Tt.prototype.getLayer=function(e,t){if(!e)throw new Error("must specify a name");var n=this._layers[e];if(n||(n=this._layers[e]=this._createLayer(e,t)),void 0!==t&&n.index!==t)throw new Error("layer <"+e+"> already created at index <"+t+">");return n.group},Tt.prototype._createLayer=function(e,t){t||(t=0);var n=E(this._layers,(function(e,n){return t>=n.index&&e++,e}),0);return{group:Et(this._viewport,"layer-"+e,n),index:t}},Tt.prototype.getContainer=function(){return this._container},Tt.prototype._updateMarker=function(e,t,n){var i;e.id||(e=this._elementRegistry.get(e)),(i=this._elementRegistry._elements[e.id])&&(b([i.gfx,i.secondaryGfx],(function(e){e&&(n?Ce(e).add(t):Ce(e).remove(t))})),this._eventBus.fire("element.marker.update",{element:e,gfx:i.gfx,marker:t,add:!!n}))},Tt.prototype.addMarker=function(e,t){this._updateMarker(e,t,!0)},Tt.prototype.removeMarker=function(e,t){this._updateMarker(e,t,!1)},Tt.prototype.hasMarker=function(e,t){return e.id||(e=this._elementRegistry.get(e)),Ce(this.getGraphics(e)).has(t)},Tt.prototype.toggleMarker=function(e,t){this.hasMarker(e,t)?this.removeMarker(e,t):this.addMarker(e,t)},Tt.prototype.getRootElement=function(){return this._rootElement||this.setRootElement({id:"__implicitroot",children:[]}),this._rootElement},Tt.prototype.setRootElement=function(e,t){e&&this._ensureValid("root",e);var n=this._rootElement,i=this._elementRegistry,r=this._eventBus;if(n){if(!t)throw new Error("rootElement already set, need to specify override");r.fire("root.remove",{element:n}),r.fire("root.removed",{element:n}),i.remove(n)}if(e){var o=this.getDefaultLayer();r.fire("root.add",{element:e}),i.add(e,o,this._svg),r.fire("root.added",{element:e,gfx:o})}return this._rootElement=e,e},Tt.prototype._ensureValid=function(e,t){if(!t.id)throw new Error("element must have an id");if(this._elementRegistry.get(t.id))throw new Error("element with id "+t.id+" already exists");var n=St[e];if(!S(n,(function(e){return void 0!==t[e]})))throw new Error("must supply { "+n.join(", ")+" } with "+e)},Tt.prototype._setParent=function(e,t,n){xt(t.children,e,n),e.parent=t},Tt.prototype._addElement=function(e,t,n,i){n=n||this.getRootElement();var r=this._eventBus,o=this._graphicsFactory;this._ensureValid(e,t),r.fire(e+".add",{element:t,parent:n}),this._setParent(t,n,i);var a=o.create(e,t,i);return this._elementRegistry.add(t,a),o.update(e,t,a),r.fire(e+".added",{element:t,gfx:a}),t},Tt.prototype.addShape=function(e,t,n){return this._addElement("shape",e,t,n)},Tt.prototype.addConnection=function(e,t,n){return this._addElement("connection",e,t,n)},Tt.prototype._removeElement=function(e,t){var n=this._elementRegistry,i=this._graphicsFactory,r=this._eventBus;if(e=n.get(e.id||e))return r.fire(t+".remove",{element:e}),i.remove(e),mt(e.parent&&e.parent.children,e),e.parent=null,r.fire(t+".removed",{element:e}),n.remove(e),e},Tt.prototype.removeShape=function(e){return this._removeElement(e,"shape")},Tt.prototype.removeConnection=function(e){return this._removeElement(e,"connection")},Tt.prototype.getGraphics=function(e,t){return this._elementRegistry.getGraphics(e,t)},Tt.prototype._changeViewbox=function(e){this._eventBus.fire("canvas.viewbox.changing"),e.apply(this),this._cachedViewbox=null,this._viewboxChanged()},Tt.prototype._viewboxChanged=function(){this._eventBus.fire("canvas.viewbox.changed",{viewbox:this.viewbox()})},Tt.prototype.viewbox=function(e){if(void 0===e&&this._cachedViewbox)return this._cachedViewbox;var t,n,i,r,o,a,s=this._viewport,c=this.getSize();return e?(this._changeViewbox((function(){r=Math.min(c.width/e.width,c.height/e.height);var t=this._svg.createSVGMatrix().scale(r).translate(-e.x,-e.y);Ve(s,t)})),e):(t=this.getDefaultLayer().getBBox(),n=(i=Ve(s))?i.matrix:function(e,t,n,i,r,o){var a=Le.createSVGMatrix();switch(arguments.length){case 0:return a;case 1:return ze(a,e);case 6:return ze(a,{a:e,b:t,c:n,d:i,e:r,f:o})}}(),r=wt(n.a,1e3),o=wt(-n.e||0,1e3),a=wt(-n.f||0,1e3),e=this._cachedViewbox={x:o?o/r:0,y:a?a/r:0,width:c.width/r,height:c.height/r,scale:r,inner:{width:t.width,height:t.height,x:t.x,y:t.y},outer:c})},Tt.prototype.scroll=function(e){var t=this._viewport,n=t.getCTM();return e&&this._changeViewbox((function(){e=G({dx:0,dy:0},e||{}),n=this._svg.createSVGMatrix().translate(e.dx,e.dy).multiply(n),kt(t,n)})),{x:n.e,y:n.f}},Tt.prototype.zoom=function(e,t){return e?"fit-viewport"===e?this._fitViewport(t):(this._changeViewbox((function(){"object"!=typeof t&&(n=this.viewbox().outer,t={x:n.width/2,y:n.height/2}),i=this._setZoom(e,t)})),wt(i.a,1e3)):this.viewbox(e).scale;var n,i},Tt.prototype._fitViewport=function(e){var t,n,i=this.viewbox(),r=i.outer,o=i.inner;return o.x>=0&&o.y>=0&&o.x+o.width<=r.width&&o.y+o.height<=r.height&&!e?n={x:0,y:0,width:Math.max(o.width+o.x,r.width),height:Math.max(o.height+o.y,r.height)}:(t=Math.min(1,r.width/o.width,r.height/o.height),n={x:o.x+(e?o.width/2-r.width/t/2:0),y:o.y+(e?o.height/2-r.height/t/2:0),width:r.width/t,height:r.height/t}),this.viewbox(n),this.viewbox(!1).scale},Tt.prototype._setZoom=function(e,t){var n,i,r,o,a=this._svg,s=this._viewport,c=a.createSVGMatrix(),u=a.createSVGPoint(),l=(i=s.getCTM()).a;return t?(n=G(u,t).matrixTransform(i.inverse()),r=c.translate(n.x,n.y).scale(1/l*e).translate(-n.x,-n.y),o=i.multiply(r)):o=c.scale(e),kt(this._viewport,o),o},Tt.prototype.getSize=function(){return{width:this._container.clientWidth,height:this._container.clientHeight}},Tt.prototype.getAbsoluteBBox=function(e){var t,n=this.viewbox();return{x:(t=e.waypoints?this.getGraphics(e).getBBox():e).x*n.scale-n.x*n.scale,y:t.y*n.scale-n.y*n.scale,width:t.width*n.scale,height:t.height*n.scale}},Tt.prototype.resized=function(){delete this._cachedViewbox,this._eventBus.fire("canvas.resized")};var Ct="data-element-id";function Mt(e){this._elements={},this._eventBus=e}Mt.$inject=["eventBus"],Mt.prototype.add=function(e,t,n){var i=e.id;this._validateId(i),be(t,Ct,i),n&&be(n,Ct,i),this._elements[i]={element:e,gfx:t,secondaryGfx:n}},Mt.prototype.remove=function(e){var t=this._elements,n=e.id||e,i=n&&t[n];i&&(be(i.gfx,Ct,""),i.secondaryGfx&&be(i.secondaryGfx,Ct,""),delete t[n])},Mt.prototype.updateId=function(e,t){this._validateId(t),"string"==typeof e&&(e=this.get(e)),this._eventBus.fire("element.updateId",{element:e,newId:t});var n=this.getGraphics(e),i=this.getGraphics(e,!0);this.remove(e),e.id=t,this.add(e,n,i)},Mt.prototype.get=function(e){var t;t="string"==typeof e?e:e&&be(e,Ct);var n=this._elements[t];return n&&n.element},Mt.prototype.filter=function(e){var t=[];return this.forEach((function(n,i){e(n,i)&&t.push(n)})),t},Mt.prototype.find=function(e){for(var t=this._elements,n=Object.keys(t),i=0;i<n.length;i++){var r=t[n[i]],o=r.element;if(e(o,r.gfx))return o}},Mt.prototype.getAll=function(){return this.filter((function(e){return e}))},Mt.prototype.forEach=function(e){var t=this._elements;Object.keys(t).forEach((function(n){var i=t[n],r=i.element,o=i.gfx;return e(r,o)}))},Mt.prototype.getGraphics=function(e,t){var n=e.id||e,i=this._elements[n];return i&&(t?i.secondaryGfx:i.gfx)},Mt.prototype._validateId=function(e){if(!e)throw new Error("element must have an id");if(this._elements[e])throw new Error("element with id "+e+" already added")};var Pt=n(235),jt=n.n(Pt),Bt=new(jt())({name:"children",enumerable:!0,collection:!0},{name:"parent"}),At=new(jt())({name:"labels",enumerable:!0,collection:!0},{name:"labelTarget"}),Rt=new(jt())({name:"attachers",collection:!0},{name:"host"}),Ot=new(jt())({name:"outgoing",collection:!0},{name:"source"}),Nt=new(jt())({name:"incoming",collection:!0},{name:"target"});function Lt(){Object.defineProperty(this,"businessObject",{writable:!0}),Object.defineProperty(this,"label",{get:function(){return this.labels[0]},set:function(e){var t=this.label,n=this.labels;!e&&t?n.remove(t):n.add(e,0)}}),Bt.bind(this,"parent"),At.bind(this,"labels"),Ot.bind(this,"outgoing"),Nt.bind(this,"incoming")}function zt(){Lt.call(this),Bt.bind(this,"children"),Rt.bind(this,"host"),Rt.bind(this,"attachers")}function Dt(){zt.call(this)}function It(){zt.call(this),At.bind(this,"labelTarget")}function $t(){Lt.call(this),Ot.bind(this,"source"),Nt.bind(this,"target")}r()(zt,Lt),r()(Dt,zt),r()(It,zt),r()($t,Lt);var Ft={connection:$t,shape:zt,label:It,root:Dt};function Ht(){this._uid=12}Ht.prototype.createRoot=function(e){return this.create("root",e)},Ht.prototype.createLabel=function(e){return this.create("label",e)},Ht.prototype.createShape=function(e){return this.create("shape",e)},Ht.prototype.createConnection=function(e){return this.create("connection",e)},Ht.prototype.create=function(e,t){return(t=G({},t||{})).id||(t.id=e+"_"+this._uid++),function(e,t){var n=Ft[e];if(!n)throw new Error("unknown type: <"+e+">");return G(new n,t)}(e,t)};var Gt=Array.prototype.slice;function Ut(){this._listeners={},this.on("diagram.destroy",1,this._destroy,this)}function Wt(){}function Vt(e){return e.childNodes[0]}function qt(e,t,n){var i=De();i.setTranslate(t,n),Ve(e,i)}function Yt(e,t){this._eventBus=e,this._elementRegistry=t}function Xt(e,t,n){var i=n||t.firstChild;e!==i&&t.insertBefore(e,i)}Ut.prototype.on=function(e,t,n,i){if(e=f(e)?e:[e],g(t)&&(i=n,n=t,t=1e3),!v(t))throw new Error("priority must be a number");var r=n;i&&((r=F(n,i)).__fn=n.__fn||n);var o=this;e.forEach((function(e){o._addListener(e,{priority:t,callback:r,next:null})}))},Ut.prototype.once=function(e,t,n,i){var r=this;if(g(t)&&(i=n,n=t,t=1e3),!v(t))throw new Error("priority must be a number");function o(){o.__isTomb=!0;var t=n.apply(i,arguments);return r.off(e,o),t}o.__fn=n,this.on(e,t,o)},Ut.prototype.off=function(e,t){e=f(e)?e:[e];var n=this;e.forEach((function(e){n._removeListener(e,t)}))},Ut.prototype.createEvent=function(e){var t=new Wt;return t.init(e),t},Ut.prototype.fire=function(e,t){var n,i,r,o;if(o=Gt.call(arguments),"object"==typeof e&&(e=(t=e).type),!e)throw new Error("no event type specified");if(i=this._listeners[e]){n=t instanceof Wt?t:this.createEvent(t),o[0]=n;var a=n.type;e!==a&&(n.type=e);try{r=this._invokeListeners(n,o,i)}finally{e!==a&&(n.type=a)}return void 0===r&&n.defaultPrevented&&(r=!1),r}},Ut.prototype.handleError=function(e){return!1===this.fire("error",{error:e})},Ut.prototype._destroy=function(){this._listeners={}},Ut.prototype._invokeListeners=function(e,t,n){for(var i;n&&!e.cancelBubble;)i=this._invokeListener(e,t,n),n=n.next;return i},Ut.prototype._invokeListener=function(e,t,n){var i;if(n.callback.__isTomb)return i;try{void 0!==(i=function(e,t){return e.apply(null,t)}(n.callback,t))&&(e.returnValue=i,e.stopPropagation()),!1===i&&e.preventDefault()}catch(e){if(!this.handleError(e))throw console.error("unhandled error in event listener"),console.error(e.stack),e}return i},Ut.prototype._addListener=function(e,t){var n,i=this._getListeners(e);if(i){for(;i;){if(i.priority<t.priority)return t.next=i,void(n?n.next=t:this._setListeners(e,t));n=i,i=i.next}n.next=t}else this._setListeners(e,t)},Ut.prototype._getListeners=function(e){return this._listeners[e]},Ut.prototype._setListeners=function(e,t){this._listeners[e]=t},Ut.prototype._removeListener=function(e,t){var n,i,r,o=this._getListeners(e);if(t)for(;o;)n=o.next,(r=o.callback)!==t&&r.__fn!==t||(i?i.next=n:this._setListeners(e,n)),i=o,o=n;else this._setListeners(e,null)},Wt.prototype.stopPropagation=function(){this.cancelBubble=!0},Wt.prototype.preventDefault=function(){this.defaultPrevented=!0},Wt.prototype.init=function(e){G(this,e||{})},Yt.$inject=["eventBus","elementRegistry"],Yt.prototype._getChildrenContainer=function(e){var t,n=this._elementRegistry.getGraphics(e);return e.parent?(t=function(e){return e.parentNode.childNodes[1]}(n))||(Ce(t=Ne("g")).add("djs-children"),xe(n.parentNode,t)):t=n,t},Yt.prototype._clear=function(e){var t=Vt(e);return Q(t),t},Yt.prototype._createContainer=function(e,t,n,i){var r=Ne("g");Ce(r).add("djs-group"),void 0!==n?Xt(r,t,t.childNodes[n]):xe(t,r);var o=Ne("g");Ce(o).add("djs-element"),Ce(o).add("djs-"+e),i&&Ce(o).add("djs-frame"),xe(r,o);var a=Ne("g");return Ce(a).add("djs-visual"),xe(o,a),o},Yt.prototype.create=function(e,t,n){var i=this._getChildrenContainer(t.parent);return this._createContainer(e,i,n,ft(t))},Yt.prototype.updateContainments=function(e){var t=this,n=this._elementRegistry;b(E(e,(function(e,t){return t.parent&&(e[t.parent.id]=t.parent),e}),{}),(function(e){var i=e.children;if(i){var r=t._getChildrenContainer(e);b(i.slice().reverse(),(function(e){Xt(n.getGraphics(e).parentNode,r)}))}}))},Yt.prototype.drawShape=function(e,t){return this._eventBus.fire("render.shape",{gfx:e,element:t})},Yt.prototype.getShapePath=function(e){return this._eventBus.fire("render.getShapePath",e)},Yt.prototype.drawConnection=function(e,t){return this._eventBus.fire("render.connection",{gfx:e,element:t})},Yt.prototype.getConnectionPath=function(e){return this._eventBus.fire("render.getConnectionPath",e)},Yt.prototype.update=function(e,t,n){if(t.parent){var i=this._clear(n);if("shape"===e)this.drawShape(i,t),qt(n,t.x,t.y);else{if("connection"!==e)throw new Error("unknown type: "+e);this.drawConnection(i,t)}t.hidden?be(n,"display","none"):be(n,"display","block")}},Yt.prototype.remove=function(e){Pe(this._elementRegistry.getGraphics(e).parentNode)};const Kt={__depends__:[gt],__init__:["canvas"],canvas:["type",Tt],elementRegistry:["type",Mt],elementFactory:["type",Ht],eventBus:["type",Ut],graphicsFactory:["type",Yt]};function Zt(e,t){this.injector=t=t||function(e){return function(e){var t=[],n=[];function i(e){return t.indexOf(e)>=0}e.forEach((function e(r){i(r)||((r.__depends__||[]).forEach(e),i(r)||(function(e){t.push(e)}(r),(r.__init__||[]).forEach((function(e){n.push(e)}))))}));var r=new nt(t);return n.forEach((function(e){try{r["string"==typeof e?"get":"invoke"](e)}catch(e){throw console.error("Failed to instantiate component"),console.error(e.stack),e}})),r}([{config:["value",e=e||{}]},Kt].concat(e.modules||[]))}(e),this.get=t.get,this.invoke=t.invoke,this.get("eventBus").fire("diagram.init")}function Jt(){}function Qt(e,t){this.model=e,this.properties=t}Zt.prototype.destroy=function(){this.get("eventBus").fire("diagram.destroy")},Zt.prototype.clear=function(){this.get("eventBus").fire("diagram.clear")},Jt.prototype.get=function(e){return this.$model.properties.get(this,e)},Jt.prototype.set=function(e,t){this.$model.properties.set(this,e,t)},Qt.prototype.createType=function(e){var t=this.model,n=this.properties,i=Object.create(Jt.prototype);b(e.properties,(function(e){e.isMany||void 0===e.default||(i[e.name]=e.default)})),n.defineModel(i,t),n.defineDescriptor(i,e);var r=e.ns.name;function o(e){n.define(this,"$type",{value:r,enumerable:!0}),n.define(this,"$attrs",{value:{}}),n.define(this,"$parent",{writable:!0}),b(e,F((function(e,t){this.set(t,e)}),this))}return o.prototype=i,o.hasType=i.$instanceOf=this.model.hasType,n.defineModel(o,t),n.defineDescriptor(o,e),o};var en={String:!0,Boolean:!0,Integer:!0,Real:!0,Element:!0},tn={String:function(e){return e},Boolean:function(e){return"true"===e},Integer:function(e){return parseInt(e,10)},Real:function(e){return parseFloat(e,10)}};function nn(e,t){var n=tn[e];return n?n(t):t}function rn(e){return!!en[e]}function on(e){return!!tn[e]}function an(e,t){var n,i,r=e.split(/:/);if(1===r.length)n=e,i=t;else{if(2!==r.length)throw new Error("expected <prefix:localName> or <localName>, got "+e);n=r[1],i=r[0]}return{name:e=(i?i+":":"")+n,prefix:i,localName:n}}function sn(e){this.ns=e,this.name=e.name,this.allTypes=[],this.allTypesByName={},this.properties=[],this.propertiesByName={}}function cn(e,t){this.packageMap={},this.typeMap={},this.packages=[],this.properties=t,b(e,F(this.registerPackage,this))}function un(e,t,n){var i=t[n];if(i in e)throw new Error("package with "+n+" <"+i+"> already defined")}function ln(e){this.model=e}function pn(e,t,n){Object.defineProperty(e,t.name,{enumerable:!t.isReference,writable:!0,value:n,configurable:!0})}function hn(e){this.properties=new ln(this),this.factory=new Qt(this,this.properties),this.registry=new cn(e,this.properties),this.typeCache={}}sn.prototype.build=function(){return U(this,["ns","name","allTypes","allTypesByName","properties","propertiesByName","bodyProperty","idProperty"])},sn.prototype.addProperty=function(e,t,n){"boolean"==typeof t&&(n=t,t=void 0),this.addNamedProperty(e,!1!==n);var i=this.properties;void 0!==t?i.splice(t,0,e):i.push(e)},sn.prototype.replaceProperty=function(e,t,n){var i=e.ns,r=this.properties,o=this.propertiesByName,a=e.name!==t.name;if(e.isId){if(!t.isId)throw new Error("property <"+t.ns.name+"> must be id property to refine <"+e.ns.name+">");this.setIdProperty(t,!1)}if(e.isBody){if(!t.isBody)throw new Error("property <"+t.ns.name+"> must be body property to refine <"+e.ns.name+">");this.setBodyProperty(t,!1)}var s=r.indexOf(e);if(-1===s)throw new Error("property <"+i.name+"> not found in property list");r.splice(s,1),this.addProperty(t,n?void 0:s,a),o[i.name]=o[i.localName]=t},sn.prototype.redefineProperty=function(e,t,n){var i=e.ns.prefix,r=t.split("#"),o=an(r[0],i),a=an(r[1],o.prefix).name,s=this.propertiesByName[a];if(!s)throw new Error("refined property <"+a+"> not found");this.replaceProperty(s,e,n),delete e.redefines},sn.prototype.addNamedProperty=function(e,t){var n=e.ns,i=this.propertiesByName;t&&(this.assertNotDefined(e,n.name),this.assertNotDefined(e,n.localName)),i[n.name]=i[n.localName]=e},sn.prototype.removeNamedProperty=function(e){var t=e.ns,n=this.propertiesByName;delete n[t.name],delete n[t.localName]},sn.prototype.setBodyProperty=function(e,t){if(t&&this.bodyProperty)throw new Error("body property defined multiple times (<"+this.bodyProperty.ns.name+">, <"+e.ns.name+">)");this.bodyProperty=e},sn.prototype.setIdProperty=function(e,t){if(t&&this.idProperty)throw new Error("id property defined multiple times (<"+this.idProperty.ns.name+">, <"+e.ns.name+">)");this.idProperty=e},sn.prototype.assertNotDefined=function(e,t){var n=e.name,i=this.propertiesByName[n];if(i)throw new Error("property <"+n+"> already defined; override of <"+i.definedBy.ns.name+"#"+i.ns.name+"> by <"+e.definedBy.ns.name+"#"+e.ns.name+"> not allowed without redefines")},sn.prototype.hasProperty=function(e){return this.propertiesByName[e]},sn.prototype.addTrait=function(e,t){var n=this.allTypesByName,i=this.allTypes,r=e.name;r in n||(b(e.properties,F((function(n){n=G({},n,{name:n.ns.localName,inherited:t}),Object.defineProperty(n,"definedBy",{value:e});var i=n.replaces,r=n.redefines;i||r?this.redefineProperty(n,i||r,i):(n.isBody&&this.setBodyProperty(n),n.isId&&this.setIdProperty(n),this.addProperty(n))}),this)),i.push(e),n[r]=e)},cn.prototype.getPackage=function(e){return this.packageMap[e]},cn.prototype.getPackages=function(){return this.packages},cn.prototype.registerPackage=function(e){e=G({},e);var t=this.packageMap;un(t,e,"prefix"),un(t,e,"uri"),b(e.types,F((function(t){this.registerType(t,e)}),this)),t[e.uri]=t[e.prefix]=e,this.packages.push(e)},cn.prototype.registerType=function(e,t){var n=an((e=G({},e,{superClass:(e.superClass||[]).slice(),extends:(e.extends||[]).slice(),properties:(e.properties||[]).slice(),meta:G(e.meta||{})})).name,t.prefix),i=n.name,r={};b(e.properties,F((function(e){var t=an(e.name,n.prefix),i=t.name;rn(e.type)||(e.type=an(e.type,t.prefix).name),G(e,{ns:t,name:i}),r[i]=e}),this)),G(e,{ns:n,name:i,propertiesByName:r}),b(e.extends,F((function(e){var t=this.typeMap[e];t.traits=t.traits||[],t.traits.push(i)}),this)),this.definePackage(e,t),this.typeMap[i]=e},cn.prototype.mapTypes=function(e,t,n){var i=rn(e.name)?{name:e.name}:this.typeMap[e.name],r=this;function o(e){return a(e,!0)}function a(n,i){var o=an(n,rn(n)?"":e.prefix);r.mapTypes(o,t,i)}if(!i)throw new Error("unknown type <"+e.name+">");b(i.superClass,n?o:a),t(i,!n),b(i.traits,o)},cn.prototype.getEffectiveDescriptor=function(e){var t=an(e),n=new sn(t);this.mapTypes(t,(function(e,t){n.addTrait(e,t)}));var i=n.build();return this.definePackage(i,i.allTypes[i.allTypes.length-1].$pkg),i},cn.prototype.definePackage=function(e,t){this.properties.define(e,"$pkg",{value:t})},ln.prototype.set=function(e,t,n){var i=this.model.getPropertyDescriptor(e,t),r=i&&i.name;void 0===n?i?delete e[r]:delete e.$attrs[t]:i?r in e?e[r]=n:pn(e,i,n):e.$attrs[t]=n},ln.prototype.get=function(e,t){var n=this.model.getPropertyDescriptor(e,t);if(!n)return e.$attrs[t];var i=n.name;return!e[i]&&n.isMany&&pn(e,n,[]),e[i]},ln.prototype.define=function(e,t,n){Object.defineProperty(e,t,n)},ln.prototype.defineDescriptor=function(e,t){this.define(e,"$descriptor",{value:t})},ln.prototype.defineModel=function(e,t){this.define(e,"$model",{value:t})},hn.prototype.create=function(e,t){var n=this.getType(e);if(!n)throw new Error("unknown type <"+e+">");return new n(t)},hn.prototype.getType=function(e){var t=this.typeCache,n=m(e)?e:e.ns.name,i=t[n];return i||(e=this.registry.getEffectiveDescriptor(n),i=t[n]=this.factory.createType(e)),i},hn.prototype.createAny=function(e,t,n){var i=an(e),r={$type:e,$instanceOf:function(e){return e===this.$type}},o={name:e,isGeneric:!0,ns:{prefix:i.prefix,localName:i.localName,uri:t}};return this.properties.defineDescriptor(r,o),this.properties.defineModel(r,this),this.properties.define(r,"$parent",{enumerable:!1,writable:!0}),b(n,(function(e,t){y(e)&&void 0!==e.value?r[e.name]=e.value:r[t]=e})),r},hn.prototype.getPackage=function(e){return this.registry.getPackage(e)},hn.prototype.getPackages=function(){return this.registry.getPackages()},hn.prototype.getElementDescriptor=function(e){return e.$descriptor},hn.prototype.hasType=function(e,t){return void 0===t&&(t=e,e=this),t in e.$model.getElementDescriptor(e).allTypesByName},hn.prototype.getPropertyDescriptor=function(e,t){return this.getElementDescriptor(e).propertiesByName[t]},hn.prototype.getTypeDescriptor=function(e){return this.registry.typeMap[e]};var dn=String.fromCharCode,fn=Object.prototype.hasOwnProperty,yn=/&#(\d+);|&#x([0-9a-f]+);|&(\w+);/gi,vn={amp:"&",apos:"'",gt:">",lt:"<",quot:'"'};function gn(e,t,n,i){return i?fn.call(vn,i)?vn[i]:"&"+i+";":dn(t||parseInt(n,16))}function mn(e){return e.length>3&&-1!==e.indexOf("&")?e.replace(yn,gn):e}Object.keys(vn).forEach((function(e){vn[e.toUpperCase()]=vn[e]}));var xn="xsi:type",_n="non-whitespace outside of root node";function wn(e){return new Error(e)}function bn(e){return"missing namespace for prefix <"+e+">"}function En(e){return{get:e,enumerable:!0}}function Sn(e){var t,n={};for(t in e)n[t]=e[t];return n}function Tn(e){return e+"$uri"}function kn(){return{line:0,column:0}}function Cn(e){throw e}function Mn(e){if(!this)return new Mn(e);var t,n,i,r,o,a,s,c,u,l=e&&e.proxy,p=Cn,h=kn,d=!1,f=!1,y=null,v=!1;function g(e){e instanceof Error||(e=wn(e)),y=e,p(e,h)}function m(e){o&&(e instanceof Error||(e=wn(e)),o(e,h))}this.on=function(e,u){if("function"!=typeof u)throw wn("required args <name, cb>");switch(e){case"openTag":n=u;break;case"text":t=u;break;case"closeTag":i=u;break;case"error":p=u;break;case"warn":o=u;break;case"cdata":r=u;break;case"attention":c=u;break;case"question":s=u;break;case"comment":a=u;break;default:throw wn("unsupported event: "+e)}return this},this.ns=function(e){if(void 0===e&&(e={}),"object"!=typeof e)throw wn("required args <nsMap={}>");var t,n={};for(t in e)n[t]=e[t];return n["http://www.w3.org/2001/XMLSchema-instance"]="xsi",f=!0,u=n,this},this.parse=function(e){if("string"!=typeof e)throw wn("required args <xml=string>");return y=null,function(e){var o,p,y,x,_,w,b,E,S,T,k,C=f?[]:null,M=f?function(e){var t,n,i={};for(t in e)i[n=e[t]]=n,i[Tn(n)]=t;return i}(u):null,P=[],j=0,B=!1,A=!1,R=0,O=0,N="",L=0;function z(){if(null!==k)return k;var e,t,n,i,r,o,a,s,c,l,p,h=f&&M.xmlns,y=f&&d?[]:null,v=L,g=N,x=g.length,_={},w={};e:for(;v<x;v++)if(c=!1,!(32===(l=g.charCodeAt(v))||l<14&&l>8)){for((l<65||l>122||l>90&&l<97)&&95!==l&&58!==l&&(m("illegal first char attribute name"),c=!0),p=v+1;p<x;p++)if(!((l=g.charCodeAt(p))>96&&l<123||l>64&&l<91||l>47&&l<59||46===l||45===l||95===l)){if(32===l||l<14&&l>8){m("missing attribute value"),v=p;continue e}if(61===l)break;m("illegal attribute name char"),c=!0}if("xmlns:xmlns"===(s=g.substring(v,p))&&(m("illegal declaration of xmlns"),c=!0),34===(l=g.charCodeAt(p+1)))-1===(p=g.indexOf('"',v=p+2))&&-1!==(p=g.indexOf("'",v))&&(m("attribute value quote missmatch"),c=!0);else if(39===l)-1===(p=g.indexOf("'",v=p+2))&&-1!==(p=g.indexOf('"',v))&&(m("attribute value quote missmatch"),c=!0);else for(m("missing attribute value quotes"),c=!0,p+=1;p<x&&!(32===(l=g.charCodeAt(p+1))||l<14&&l>8);p++);for(-1===p&&(m("missing closing quotes"),p=x,c=!0),c||(o=g.substring(v,p)),v=p;p+1<x&&!(32===(l=g.charCodeAt(p+1))||l<14&&l>8);p++)v===p&&(m("illegal character after attribute end"),c=!0);if(v=p+1,!c)if(s in w)m("attribute <"+s+"> already defined");else if(w[s]=!0,f)if(d){if(null!==(r="xmlns"===s?"xmlns":120===s.charCodeAt(0)&&"xmlns:"===s.substr(0,6)?s.substr(6):null)){if(e=mn(o),t=Tn(r),!(a=u[e])){if("xmlns"===r||t in M&&M[t]!==e)do{a="ns"+j++}while(void 0!==M[a]);else a=r;u[e]=a}M[r]!==a&&(i||(M=Sn(M),i=!0),M[r]=a,"xmlns"===r&&(M[Tn(a)]=e,h=a),M[t]=e),_[s]=o;continue}y.push(s,o)}else-1!==(l=s.indexOf(":"))?(n=M[s.substring(0,l)])?((s=h===n?s.substr(l+1):n+s.substr(l))===xn&&(-1!==(l=o.indexOf(":"))?(n=o.substring(0,l),o=(n=M[n]||n)+o.substring(l)):o=h+":"+o),_[s]=o):m(bn(s.substring(0,l))):_[s]=o;else _[s]=o}if(d)for(v=0,x=y.length;v<x;v++){if(s=y[v++],o=y[v],-1!==(l=s.indexOf(":"))){if(!(n=M[s.substring(0,l)])){m(bn(s.substring(0,l)));continue}(s=h===n?s.substr(l+1):n+s.substr(l))===xn&&(-1!==(l=o.indexOf(":"))?(n=o.substring(0,l),o=(n=M[n]||n)+o.substring(l)):o=h+":"+o)}_[s]=o}return k=_}for(h=function(){for(var t,n,i=/(\r\n|\r|\n)/g,r=0,o=0,a=0,s=O;R>=a&&(t=i.exec(e))&&!((s=t[0].length+t.index)>R);)r+=1,a=s;return-1==R?(o=s,n=e.substring(O)):0===O?n=e.substring(O,R):(o=R-a,n=-1==O?e.substring(R):e.substring(R,O+1)),{data:n,line:r,column:o}},l&&(T=Object.create({},{name:En((function(){return E})),originalName:En((function(){return S})),attrs:En(z),ns:En((function(){return M}))}));-1!==O;){if(-1===(R=60===e.charCodeAt(O)?O:e.indexOf("<",O)))return P.length?g("unexpected end of file"):0===O?g("missing start tag"):void(O<e.length&&e.substring(O).trim()&&m(_n));if(O!==R)if(P.length){if(t&&(t(e.substring(O,R),mn,h),v))return}else if(e.substring(O,R).trim()&&(m(_n),v))return;if(33===(_=e.charCodeAt(R+1))){if(91===(x=e.charCodeAt(R+2))&&"CDATA["===e.substr(R+3,6)){if(-1===(O=e.indexOf("]]>",R)))return g("unclosed cdata");if(r&&(r(e.substring(R+9,O),h),v))return;O+=3;continue}if(45===x&&45===e.charCodeAt(R+3)){if(-1===(O=e.indexOf("--\x3e",R)))return g("unclosed comment");if(a&&(a(e.substring(R+4,O),mn,h),v))return;O+=3;continue}}if(63!==_){for(p=R+1;;p++){if(w=e.charCodeAt(p),isNaN(w))return O=-1,g("unclosed tag");if(34===w)p=-1!==(x=e.indexOf('"',p+1))?x:p;else if(39===w)p=-1!==(x=e.indexOf("'",p+1))?x:p;else if(62===w){O=p;break}}if(33!==_){if(k={},47===_){if(B=!1,A=!0,!P.length)return g("missing open tag");if(p=E=P.pop(),x=R+2+p.length,e.substring(R+2,x)!==p)return g("closing tag mismatch");for(;x<O;x++)if(!(32===(_=e.charCodeAt(x))||_>8&&_<14))return g("close tag")}else{if(47===e.charCodeAt(O-1)?(p=E=e.substring(R+1,O-1),B=!0,A=!0):(p=E=e.substring(R+1,O),B=!0,A=!1),!(_>96&&_<123||_>64&&_<91||95===_||58===_))return g("illegal first char nodeName");for(x=1,y=p.length;x<y;x++)if(!((_=p.charCodeAt(x))>96&&_<123||_>64&&_<91||_>47&&_<59||45===_||95===_||46==_)){if(32===_||_<14&&_>8){E=p.substring(0,x),k=null;break}return g("invalid nodeName")}A||P.push(E)}if(f){if(o=M,B&&(A||C.push(o),null===k&&(d=-1!==p.indexOf("xmlns",x))&&(L=x,N=p,z(),d=!1)),S=E,-1!==(_=E.indexOf(":"))){if(!(b=M[E.substring(0,_)]))return g("missing namespace on <"+S+">");E=E.substr(_+1)}else b=M.xmlns;b&&(E=b+":"+E)}if(B&&(L=x,N=p,n&&(l?n(T,mn,A,h):n(E,z,mn,A,h),v)))return;if(A){if(i&&(i(l?T:E,mn,B,h),v))return;f&&(M=B?o:C.pop())}O+=1}else{if(c&&(c(e.substring(R,O+1),mn,h),v))return;O+=1}}else{if(-1===(O=e.indexOf("?>",R)))return g("unclosed question");if(s&&(s(e.substring(R,O+2),h),v))return;O+=2}}}(e),h=kn,v=!1,y},this.stop=function(){v=!0}}function Pn(e){return e.xml&&"lowerCase"===e.xml.tagAlias}var jn={xsi:"http://www.w3.org/2001/XMLSchema-instance",xml:"http://www.w3.org/XML/1998/namespace"},Bn="xsi:type";function An(e){return e.xml&&e.xml.serialize}function Rn(e){return An(e)===Bn}function On(e,t){return Pn(t)?e.prefix+":"+((n=e.localName).charAt(0).toUpperCase()+n.slice(1)):e.name;var n}function Nn(e){return new Error(e)}function Ln(e){return e.$descriptor}function zn(e){G(this,e),this.elementsById={},this.references=[],this.warnings=[],this.addReference=function(e){this.references.push(e)},this.addElement=function(e){if(!e)throw Nn("expected element");var t,n=this.elementsById,i=Ln(e).idProperty;if(i&&(t=e.get(i.name))){if(!/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i.test(t))throw new Error("illegal ID <"+t+">");if(n[t])throw Nn("duplicate ID <"+t+">");n[t]=e}},this.addWarning=function(e){this.warnings.push(e)}}function Dn(){}function In(){}function $n(){}function Fn(e,t){this.property=e,this.context=t}function Hn(e,t){this.element=t,this.propertyDesc=e}function Gn(){}function Un(e,t,n){this.model=e,this.type=e.getType(t),this.context=n}function Wn(e,t,n){Un.call(this,e,t,n)}function Vn(e,t,n){this.model=e,this.context=n}function qn(e){e instanceof hn&&(e={model:e}),G(this,{lax:!1},e)}Dn.prototype.handleEnd=function(){},Dn.prototype.handleText=function(){},Dn.prototype.handleNode=function(){},In.prototype=Object.create(Dn.prototype),In.prototype.handleNode=function(){return this},$n.prototype=Object.create(Dn.prototype),$n.prototype.handleText=function(e){this.body=(this.body||"")+e},Fn.prototype=Object.create($n.prototype),Fn.prototype.handleNode=function(e){if(this.element)throw Nn("expected no sub nodes");return this.element=this.createReference(e),this},Fn.prototype.handleEnd=function(){this.element.id=this.body},Fn.prototype.createReference=function(e){return{property:this.property.ns.name,id:""}},Hn.prototype=Object.create($n.prototype),Hn.prototype.handleEnd=function(){var e=this.body||"",t=this.element,n=this.propertyDesc;e=nn(n.type,e),n.isMany?t.get(n.name).push(e):t.set(n.name,e)},Gn.prototype=Object.create($n.prototype),Gn.prototype.handleNode=function(e){var t=this,n=this.element;return n?t=this.handleChild(e):(n=this.element=this.createElement(e),this.context.addElement(n)),t},Un.prototype=Object.create(Gn.prototype),Un.prototype.addReference=function(e){this.context.addReference(e)},Un.prototype.handleText=function(e){if(!Ln(this.element).bodyProperty)throw Nn("unexpected body text <"+e+">");$n.prototype.handleText.call(this,e)},Un.prototype.handleEnd=function(){var e=this.body,t=this.element,n=Ln(t).bodyProperty;n&&void 0!==e&&(e=nn(n.type,e),t.set(n.name,e))},Un.prototype.createElement=function(e){var t,n=e.attributes,i=this.type,r=Ln(i),o=this.context,a=new i({}),s=this.model;return b(n,(function(e,n){var i=r.propertiesByName[n];i&&i.isReference?i.isMany?b(e.split(" "),(function(e){o.addReference({element:a,property:i.ns.name,id:e})})):o.addReference({element:a,property:i.ns.name,id:e}):(i?e=nn(i.type,e):"xmlns"!==n&&(t=an(n,r.ns.prefix),s.getPackage(t.prefix)&&o.addWarning({message:"unknown attribute <"+n+">",element:a,property:n,value:e})),a.set(n,e))})),a},Un.prototype.getPropertyForNode=function(e){var t,n,i=an(e.name),r=this.type,o=this.model,a=Ln(r),s=i.name,c=a.propertiesByName[s];if(c&&!c.isAttr)return Rn(c)&&(t=e.attributes["xsi:type"])?(t=function(e,t){var n=an(e);return function(e,t){var n=e.name,i=e.localName,r=t.xml&&t.xml.typePrefix;return r&&0===i.indexOf(r)?e.prefix+":"+i.slice(r.length):n}(n,t.getPackage(n.prefix))}(t,o),G({},c,{effectiveType:Ln(n=o.getType(t)).name})):c;var u=o.getPackage(i.prefix);if(u){if(t=On(i,u),n=o.getType(t),c=_(a.properties,(function(e){return!e.isVirtual&&!e.isReference&&!e.isAttribute&&n.hasType(e.type)})))return G({},c,{effectiveType:Ln(n).name})}else if(c=_(a.properties,(function(e){return!e.isReference&&!e.isAttribute&&"Element"===e.type})))return c;throw Nn("unrecognized element <"+i.name+">")},Un.prototype.toString=function(){return"ElementDescriptor["+Ln(this.type).name+"]"},Un.prototype.valueHandler=function(e,t){return new Hn(e,t)},Un.prototype.referenceHandler=function(e){return new Fn(e,this.context)},Un.prototype.handler=function(e){return"Element"===e?new Vn(this.model,e,this.context):new Un(this.model,e,this.context)},Un.prototype.handleChild=function(e){var t,n,i,r;if(t=this.getPropertyForNode(e),i=this.element,on(n=t.effectiveType||t.type))return this.valueHandler(t,i);var o=(r=t.isReference?this.referenceHandler(t).handleNode(e):this.handler(n).handleNode(e)).element;return void 0!==o&&(t.isMany?i.get(t.name).push(o):i.set(t.name,o),t.isReference?(G(o,{element:i}),this.context.addReference(o)):o.$parent=i),r},Wn.prototype=Object.create(Un.prototype),Wn.prototype.createElement=function(e){var t=e.name,n=an(t),i=this.model,r=this.type,o=i.getPackage(n.prefix),a=o&&On(n,o)||t;if(!r.hasType(a))throw Nn("unexpected element <"+e.originalName+">");return Un.prototype.createElement.call(this,e)},Vn.prototype=Object.create(Gn.prototype),Vn.prototype.createElement=function(e){var t=e.name,n=an(t).prefix,i=e.ns[n+"$uri"],r=e.attributes;return this.model.createAny(t,i,r)},Vn.prototype.handleChild=function(e){var t=new Vn(this.model,"Element",this.context).handleNode(e),n=this.element,i=t.element;return void 0!==i&&((n.$children=n.$children||[]).push(i),i.$parent=n),t},Vn.prototype.handleEnd=function(){this.body&&(this.element.$body=this.body)},qn.prototype.fromXML=function(e,t,n){var i=t.rootHandler;t instanceof Un?(i=t,t={}):"string"==typeof t?(i=this.handler(t),t={}):"string"==typeof i&&(i=this.handler(i));var r=this.model,o=this.lax,a=new zn(G({},t,{rootHandler:i})),s=new Mn({proxy:!0}),c=function(){var e=[];return Object.defineProperty(e,"peek",{value:function(){return this[this.length-1]}}),e}();function u(e,t,n){var i=t(),r=i.line,o=i.column,s=i.data;"<"===s.charAt(0)&&-1!==s.indexOf(" ")&&(s=s.slice(0,s.indexOf(" "))+">");var c="unparsable content "+(s?s+" ":"")+"detected\n\tline: "+r+"\n\tcolumn: "+o+"\n\tnested error: "+e.message;if(n)return a.addWarning({message:c,error:e}),!0;throw Nn(c)}function l(e,t){return u(e,t,!0)}i.context=a,c.push(i);var p=/^<\?xml /i,h=/ encoding="([^"]+)"/i,d=/^utf-8$/i;function f(e,t){try{c.peek().handleText(e)}catch(e){l(e,t)}}var y=r.getPackages().reduce((function(e,t){return e[t.uri]=t.prefix,e}),{"http://www.w3.org/XML/1998/namespace":"xml"});return s.ns(y).on("openTag",(function(e,t,n,i){var r=e.attrs||{},a=Object.keys(r).reduce((function(e,n){var i=t(r[n]);return e[n]=i,e}),{});!function(e,t){var n=c.peek();try{c.push(n.handleNode(e))}catch(e){u(e,t,o)&&c.push(new In)}}({name:e.name,originalName:e.originalName,attributes:a,ns:e.ns},i)})).on("question",(function(e){if(p.test(e)){var t=h.exec(e),n=t&&t[1];n&&!d.test(n)&&a.addWarning({message:"unsupported document encoding <"+n+">, falling back to UTF-8"})}})).on("closeTag",(function(){c.pop().handleEnd()})).on("cdata",f).on("text",(function(e,t,n){!function(e,t){(e=e.trim())&&f(e,t)}(t(e),n)})).on("error",u).on("warn",l),new Promise((function(t,n){var r;try{s.parse(e),function(){var e,t,n=a.elementsById,i=a.references;for(e=0;t=i[e];e++){var r=t.element,o=n[t.id],s=Ln(r).propertiesByName[t.property];if(o||a.addWarning({message:"unresolved reference <"+t.id+">",element:t.element,property:t.property,value:t.id}),s.isMany){var c=r.get(s.name),u=c.indexOf(t);-1===u&&(u=c.length),o?c[u]=o:c.splice(u,1)}else r.set(s.name,o)}}()}catch(e){r=e}var o=i.element;r||o||(r=Nn("failed to parse document as <"+i.type.$descriptor.name+">"));var c=a.warnings,u=a.references,l=a.elementsById;return r?(r.warnings=c,n(r)):t({rootElement:o,elementsById:l,references:u,warnings:c})}))},qn.prototype.handler=function(e){return new Wn(this.model,e)};var Yn=/<|>|'|"|&|\n\r|\n/g,Xn=/<|>|&/g;function Kn(e){var t={},n={},i={},r=[],o=[];this.byUri=function(t){return n[t]||e&&e.byUri(t)},this.add=function(e,t){n[e.uri]=e,t?r.push(e):o.push(e),this.mapPrefix(e.prefix,e.uri)},this.uriByPrefix=function(e){return t[e||"xmlns"]},this.mapPrefix=function(e,n){t[e||"xmlns"]=n},this.getNSKey=function(e){return void 0!==e.prefix?e.uri+"|"+e.prefix:e.uri},this.logUsed=function(t){var n=t.uri,r=this.getNSKey(t);i[r]=this.byUri(n),e&&e.logUsed(t)},this.getUsed=function(e){var t=this;return[].concat(r,o).filter((function(e){var n=t.getNSKey(e);return i[n]}))}}function Zn(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function Jn(e){return m(e)?e:(e.prefix?e.prefix+":":"")+e.localName}var Qn={"\n":"#10","\n\r":"#10",'"':"#34","'":"#39","<":"#60",">":"#62","&":"#38"},ei={"<":"lt",">":"gt","&":"amp"};function ti(e,t,n){return(e=m(e)?e:""+e).replace(t,(function(e){return"&"+n[e]+";"}))}function ni(e){this.tagName=e}function ii(){}function ri(e){this.tagName=e}function oi(e,t){this.body=[],this.attrs=[],this.parent=e,this.propertyDescriptor=t}function ai(e,t){oi.call(this,e,t)}function si(){this.value="",this.write=function(e){this.value+=e}}function ci(e,t){var n=[""];this.append=function(t){return e.write(t),this},this.appendNewLine=function(){return t&&e.write("\n"),this},this.appendIndent=function(){return t&&e.write(n.join("  ")),this},this.indent=function(){return n.push(""),this},this.unindent=function(){return n.pop(),this}}function ui(e){return e=G({format:!1,preamble:!0},e||{}),{toXML:function(t,n){var i=n||new si,r=new ci(i,e.format);if(e.preamble&&r.append('<?xml version="1.0" encoding="UTF-8"?>\n'),(new oi).build(t).serializeTo(r),!n)return i.value}}}function li(e,t){hn.call(this,e,t)}ni.prototype.build=function(e){return this.element=e,this},ni.prototype.serializeTo=function(e){e.appendIndent().append("<"+this.tagName+">"+this.element.id+"</"+this.tagName+">").appendNewLine()},ii.prototype.serializeValue=ii.prototype.serializeTo=function(e){e.append(this.escape?ti(this.value,Xn,ei):this.value)},ii.prototype.build=function(e,t){return this.value=t,"String"===e.type&&-1!==t.search(Xn)&&(this.escape=!0),this},Zn(ri,ii),ri.prototype.serializeTo=function(e){e.appendIndent().append("<"+this.tagName+">"),this.serializeValue(e),e.append("</"+this.tagName+">").appendNewLine()},oi.prototype.build=function(e){this.element=e;var t,n,i=e.$descriptor,r=this.propertyDescriptor,o=i.isGeneric;return t=o?this.parseGeneric(e):this.parseNsAttributes(e),this.ns=r?this.nsPropertyTagName(r):this.nsTagName(i),this.tagName=this.addTagName(this.ns),o||(n=function(e){return w(e.$descriptor.properties,(function(t){var n=t.name;if(t.isVirtual)return!1;if(!x(e,n))return!1;var i=e[n];return i!==t.default&&null!==i&&(!t.isMany||i.length)}))}(e),this.parseAttributes(w(n,(function(e){return e.isAttr}))),this.parseContainments(w(n,(function(e){return!e.isAttr})))),this.parseGenericAttributes(e,t),this},oi.prototype.nsTagName=function(e){return function(e,t){return t.isGeneric?G({localName:t.ns.localName},e):G({localName:(n=t.ns.localName,i=t.$pkg,Pn(i)?(r=n).charAt(0).toLowerCase()+r.slice(1):n)},e);var n,i,r}(this.logNamespaceUsed(e.ns),e)},oi.prototype.nsPropertyTagName=function(e){return function(e,t){return G({localName:t.ns.localName},e)}(this.logNamespaceUsed(e.ns),e)},oi.prototype.isLocalNs=function(e){return e.uri===this.ns.uri},oi.prototype.nsAttributeName=function(e){var t;if(t=m(e)?an(e):e.ns,e.inherited)return{localName:t.localName};var n=this.logNamespaceUsed(t);return this.getNamespaces().logUsed(n),this.isLocalNs(n)?{localName:t.localName}:G({localName:t.localName},n)},oi.prototype.parseGeneric=function(e){var t=this,n=this.body,i=[];return b(e,(function(r,o){"$body"===o?n.push((new ii).build({type:"String"},r)):"$children"===o?b(r,(function(e){n.push(new oi(t).build(e))})):0!==o.indexOf("$")&&t.parseNsAttribute(e,o,r)&&i.push({name:o,value:r})})),i},oi.prototype.parseNsAttribute=function(e,t,n){var i,r=e.$model,o=an(t);if("xmlns"===o.prefix&&(i={prefix:o.localName,uri:n}),o.prefix||"xmlns"!==o.localName||(i={uri:n}),!i)return{name:t,value:n};if(r&&r.getPackage(n))this.logNamespace(i,!0,!0);else{var a=this.logNamespaceUsed(i,!0);this.getNamespaces().logUsed(a)}},oi.prototype.parseNsAttributes=function(e,t){var n=this,i=e.$attrs,r=[];return b(i,(function(t,i){var o=n.parseNsAttribute(e,i,t);o&&r.push(o)})),r},oi.prototype.parseGenericAttributes=function(e,t){var n=this;b(t,(function(t){if(t.name!==Bn)try{n.addAttribute(n.nsAttributeName(t.name),t.value)}catch(n){console.warn("missing namespace information for ",t.name,"=",t.value,"on",e,n)}}))},oi.prototype.parseContainments=function(e){var t=this,n=this.body,i=this.element;b(e,(function(e){var r=i.get(e.name),o=e.isReference;if(e.isMany||(r=[r]),e.isBody)n.push((new ii).build(e,r[0]));else if(on(e.type))b(r,(function(i){n.push(new ri(t.addTagName(t.nsPropertyTagName(e))).build(e,i))}));else if(o)b(r,(function(i){n.push(new ni(t.addTagName(t.nsPropertyTagName(e))).build(i))}));else{var a=Rn(e),s=function(e){return"property"===An(e)}(e);b(r,(function(i){var r;r=a?new ai(t,e):s?new oi(t,e):new oi(t),n.push(r.build(i))}))}}))},oi.prototype.getNamespaces=function(e){var t,n=this.namespaces,i=this.parent;return n||(t=i&&i.getNamespaces(),e||!t?this.namespaces=n=new Kn(t):n=t),n},oi.prototype.logNamespace=function(e,t,n){var i=this.getNamespaces(n),r=e.uri,o=e.prefix,a=i.byUri(r);return"xml"===o||a&&!n||i.add(e,t),i.mapPrefix(o,r),e},oi.prototype.logNamespaceUsed=function(e,t){var n,i,r,o=this.element.$model,a=this.getNamespaces(t),s=e.prefix,c=e.uri;if(!s&&!c)return{localName:e.localName};if(r=jn[s]||o&&(o.getPackage(s)||{}).uri,!(c=c||r||a.uriByPrefix(s)))throw new Error("no namespace uri given for prefix <"+s+">");if(!(e=a.byUri(c))){for(n=s,i=1;a.uriByPrefix(n);)n=s+"_"+i++;e=this.logNamespace({prefix:n,uri:c},r===c)}return s&&a.mapPrefix(s,c),e},oi.prototype.parseAttributes=function(e){var t=this,n=this.element;b(e,(function(e){var i=n.get(e.name);if(e.isReference)if(e.isMany){var r=[];b(i,(function(e){r.push(e.id)})),i=r.join(" ")}else i=i.id;t.addAttribute(t.nsAttributeName(e),i)}))},oi.prototype.addTagName=function(e){var t=this.logNamespaceUsed(e);return this.getNamespaces().logUsed(t),Jn(e)},oi.prototype.addAttribute=function(e,t){var n=this.attrs;m(t)&&(t=ti(t,Yn,Qn)),n.push({name:e,value:t})},oi.prototype.serializeAttributes=function(e){var t=this.attrs,n=this.namespaces;n&&(t=function(e){return k(e.getUsed(),(function(e){return{name:"xmlns"+(e.prefix?":"+e.prefix:""),value:e.uri}}))}(n).concat(t)),b(t,(function(t){e.append(" ").append(Jn(t.name)).append('="').append(t.value).append('"')}))},oi.prototype.serializeTo=function(e){var t=this.body[0],n=t&&t.constructor!==ii;e.appendIndent().append("<"+this.tagName),this.serializeAttributes(e),e.append(t?">":" />"),t&&(n&&e.appendNewLine().indent(),b(this.body,(function(t){t.serializeTo(e)})),n&&e.unindent().appendIndent(),e.append("</"+this.tagName+">")),e.appendNewLine()},Zn(ai,oi),ai.prototype.parseNsAttributes=function(e){var t=oi.prototype.parseNsAttributes.call(this,e),n=e.$descriptor;if(n.name===this.propertyDescriptor.type)return t;var i=this.typeNs=this.nsTagName(n);this.getNamespaces().logUsed(this.typeNs);var r=e.$model.getPackage(i.uri),o=r.xml&&r.xml.typePrefix||"";return this.addAttribute(this.nsAttributeName(Bn),(i.prefix?i.prefix+":":"")+o+n.ns.localName),t},ai.prototype.isLocalNs=function(e){return e.uri===(this.typeNs||this.ns).uri},li.prototype=Object.create(hn.prototype),li.prototype.fromXML=function(e,t,n){m(t)||(n=t,t="postit:Definitions");var i=new qn(G({model:this,lax:!0},n)),r=i.handler(t);return i.fromXML(e,r)},li.prototype.toXML=function(e,t){var n=new ui(t);return new Promise((function(t,i){try{return t({xml:n.toXML(e)})}catch(e){return i(e)}}))};var pi={postit:JSON.parse('{"name":"Postit","uri":"http://some-company/schema/postit","prefix":"postit","xml":{"tagAlias":"lowerCase"},"types":[{"name":"BoardElement","isAbstract":true,"properties":[{"name":"name","isAttr":true,"type":"String"},{"name":"id","isAttr":true,"type":"String","isId":true}]},{"name":"PostitBoard","superClass":["RootElement"],"properties":[{"name":"boardElements","isMany":true,"type":"BoardElement"}]},{"name":"Postit","superClass":["BoardElement"],"properties":[{"name":"color","isAttr":true,"type":"String"}]},{"name":"SquarePostit","superClass":["Postit"]},{"name":"CirclePostit","superClass":["Postit"]},{"name":"TextBox","superClass":["BoardElement"]},{"name":"Group","superClass":["BoardElement"]},{"name":"Image","superClass":["BoardElement"],"properties":[{"name":"source","isAttr":true,"type":"String"}]},{"name":"RootElement","isAbstract":true,"superClass":["BoardElement"]},{"name":"Definitions","superClass":["BoardElement"],"properties":[{"name":"targetNamespace","isAttr":true,"type":"String"},{"name":"expressionLanguage","default":"http://www.w3.org/1999/XPath","isAttr":true,"type":"String"},{"name":"typeLanguage","default":"http://www.w3.org/2001/XMLSchema","isAttr":true,"type":"String"},{"name":"rootElements","type":"RootElement","isMany":true},{"name":"rootBoards","isMany":true,"type":"postitDi:PostitRootBoard"},{"name":"exporter","isAttr":true,"type":"String"},{"name":"exporterVersion","isAttr":true,"type":"String"}]}]}'),postitDi:JSON.parse('{"name":"POSTITDI","uri":"http://some-company/schema/postitdi","prefix":"postitDi","xml":{"tagAlias":"lowerCase"},"types":[{"name":"PostitRootBoard","properties":[{"name":"plane","type":"PostitPlane","redefines":"Board#rootElement"},{"name":"labelStyle","type":"PostitLabelStyle","isMany":true}],"superClass":["Board"]},{"name":"PostitPlane","properties":[{"name":"boardElement","isAttr":true,"isReference":true,"type":"postit:BoardElement","redefines":"BoardElement#modelElement"}],"superClass":["Plane"]},{"name":"PostitShape","properties":[{"name":"boardElement","isAttr":true,"isReference":true,"type":"postit:BoardElement","redefines":"BoardElement#modelElement"},{"name":"label","type":"PostitLabel"}],"superClass":["LabeledShape"]},{"name":"PostitLabel","properties":[{"name":"labelStyle","type":"PostitLabelStyle","isAttr":true,"isReference":true,"redefines":"BoardElement#style"}],"superClass":["Label"]},{"name":"PostitLabelStyle","properties":[{"name":"font","type":"dc:Font"}],"superClass":["Style"]},{"name":"BoardElement","isAbstract":true,"properties":[{"name":"id","isAttr":true,"isId":true,"type":"String"},{"name":"owningBoard","type":"Board","isReadOnly":true,"isVirtual":true,"isReference":true},{"name":"owningElement","type":"BoardElement","isReadOnly":true,"isVirtual":true,"isReference":true},{"name":"modelElement","isReadOnly":true,"isVirtual":true,"isReference":true,"type":"Element"},{"name":"style","type":"Style","isReadOnly":true,"isVirtual":true,"isReference":true}]},{"name":"Node","isAbstract":true,"superClass":["BoardElement"]},{"name":"Board","isAbstract":true,"properties":[{"name":"id","isAttr":true,"isId":true,"type":"String"},{"name":"rootElement","type":"BoardElement","isReadOnly":true,"isVirtual":true},{"name":"name","isAttr":true,"type":"String"},{"name":"resolution","isAttr":true,"type":"Real"},{"name":"ownedStyle","type":"Style","isReadOnly":true,"isMany":true,"isVirtual":true}]},{"name":"Shape","isAbstract":true,"superClass":["Node"],"properties":[{"name":"bounds","type":"dc:Bounds"}]},{"name":"Plane","isAbstract":true,"superClass":["Node"],"properties":[{"name":"planeElement","type":"BoardElement","subsettedProperty":"BoardElement-ownedElement","isMany":true}]},{"name":"LabeledEdge","isAbstract":true,"superClass":["Edge"],"properties":[{"name":"ownedLabel","type":"Label","isReadOnly":true,"subsettedProperty":"BoardElement-ownedElement","isMany":true,"isVirtual":true}]},{"name":"LabeledShape","isAbstract":true,"superClass":["Shape"],"properties":[{"name":"ownedLabel","type":"Label","isReadOnly":true,"subsettedProperty":"BoardElement-ownedElement","isMany":true,"isVirtual":true}]},{"name":"Label","isAbstract":true,"superClass":["Node"],"properties":[{"name":"bounds","type":"dc:Bounds"}]},{"name":"Style","isAbstract":true,"properties":[{"name":"id","isAttr":true,"isId":true,"type":"String"}]},{"name":"Extension","properties":[{"name":"values","isMany":true,"type":"Element"}]}],"enumerations":[],"associations":[]}'),dc:JSON.parse('{"name":"dc","uri":"http://www.omg.org/spec/DD/20100524/DC","prefix":"dc","types":[{"name":"Boolean"},{"name":"Integer"},{"name":"Real"},{"name":"String"},{"name":"Font","properties":[{"name":"name","type":"String","isAttr":true},{"name":"size","type":"Real","isAttr":true},{"name":"isBold","type":"Boolean","isAttr":true},{"name":"isItalic","type":"Boolean","isAttr":true},{"name":"isUnderline","type":"Boolean","isAttr":true},{"name":"isStrikeThrough","type":"Boolean","isAttr":true}]},{"name":"Point","properties":[{"name":"x","type":"Real","default":"0","isAttr":true},{"name":"y","type":"Real","default":"0","isAttr":true}]},{"name":"Bounds","properties":[{"name":"x","type":"Real","default":"0","isAttr":true},{"name":"y","type":"Real","default":"0","isAttr":true},{"name":"width","type":"Real","isAttr":true},{"name":"height","type":"Real","isAttr":true}]}],"associations":[]}')};function hi(e,t){return new li(G({},pi,e),t)}function di(e){return e?"<"+e.$type+(e.id?' id="'+e.id:"")+'" />':"<null>"}var fi=new(jt())({name:"boardElement",enumerable:!0},{name:"di",configurable:!0});function yi(e,t){return e.$instanceOf(t)}function vi(e,t){var n={},i=[];function r(t,n){e.error(t,n)}function o(e){n[e.id]=e}function a(e){var n=e.boardElement;n?n.di?r(t("multiple DI elements defined for {element}",{element:di(n)}),{element:n}):(fi.bind(n,"di"),n.di=e):r(t("no boardElement referenced in {element}",{element:di(e)}),{element:e})}function s(e){a(e)}function c(){for(;i.length;)i.shift()()}return{handleDeferred:c,handleDefinitions:function(n,i){var u=n.rootBoards;if(i&&-1===u.indexOf(i))throw new Error(t("rootBoard not part of postit:Definitions"));if(!i&&u&&u.length&&(i=u[0]),!i)throw new Error(t("no rootBoard to display"));!function(e){var t;a(t=e.plane),b(t.planeElement,s)}(i);var l=i.plane;if(!l)throw new Error(t("no plane for {element}",{element:di(i)}));var p=l.boardElement;if(!p){if(!(p=function(e){return _(e.rootElements,(function(e){return yi(e,"postit:PostitBoard")}))}(n)))throw new Error(t("no board to display"));r(t("correcting missing boardElement on {plane} to {rootElement}",{plane:di(l),rootElement:di(p)})),l.boardElement=p,a(l)}var h,d,f,y,v=(h=p,d=l,e.root(h,d));yi(p,"postit:PostitBoard")&&(y=v,function(n,i){b(n,(function(n){!function(n,i){try{var a=n.di&&function(n,i){if(n.gfx)throw new Error(t("already rendered {element}",{element:di(n)}));return e.element(n,i)}(n,i);o(n)}catch(e){r(e.message,{element:n,error:e}),console.error(t("failed to import {element}",{element:di(n)})),console.error(e)}}(n,i)}))}((f=p).boardElements,y),o(f)),c()},registerDi:a}}function gi(e){e=G({},xi,e),this._moddle=this._createModdle(e),this._container=this._createContainer(e),this._init(this._container,this._moddle,e)}function mi(e,t){return e.warnings=t,e}r()(gi,Zt),gi.prototype.importXML=function(e,t){var n=this;return new Promise((function(i,r){e=n._emit("import.parse.start",{xml:e})||e,n._moddle.fromXML(e,"postit:Definitions").then((function(e){var o=e.rootElement,a=e.references,s=e.warnings,c={references:a,elementsById:e.elementsById,warnings:s};o=n._emit("import.parse.complete",{definitions:o,context:c})||o,n.importDefinitions(o,t).then((function(e){var t=[].concat(s,e.warnings||[]);return n._emit("import.done",{error:null,warnings:t}),i({warnings:t})})).catch((function(e){var t=[].concat(s,e.warnings||[]);return n._emit("import.done",{error:e,warnings:t}),r(mi(e,t))}))})).catch((function(e){return n._emit("import.parse.complete",{error:e}),e=function(e){var t=/unparsable content <([^>]+)> detected([\s\S]*)$/.exec(e.message);return t&&(e.message="unparsable content <"+t[1]+"> detected; this may indicate an invalid Postit board file"+t[2]),e}(e),n._emit("import.done",{error:e,warnings:e.warnings}),r(e)}))}))},gi.prototype.importDefinitions=function(e,t){var n=this;return new Promise((function(i,r){n._setDefinitions(e),n.open(t).then((function(e){var t=e.warnings;return i({warnings:t})})).catch((function(e){return r(e)}))}))},gi.prototype.open=function(e){var t=this._definitions,n=e,i=this;return new Promise((function(r,o){if(!t){var a=new Error("no XML imported");return o(mi(a,[]))}if("string"==typeof e&&!(n=function(e,t){return t&&_(e.rootBoards,(function(e){return e.id===t}))||null}(t,e))){var s=new Error("PostitRootBoard <"+e+"> not found");return o(mi(s,[]))}try{i.clear()}catch(e){return o(mi(e,[]))}(function(e,t,n){var i,r,o,a=[];return new Promise((function(s,c){try{return i=e.get("postitImporter"),r=e.get("eventBus"),o=e.get("translate"),r.fire("import.render.start",{definitions:t}),function(e,t){new vi({root:function(e){return i.add(e)},element:function(e,t){return i.add(e,t)},error:function(e,t){a.push({message:e,context:t})}},o).handleDefinitions(e,t)}(t,n),r.fire("import.render.complete",{error:void 0,warnings:a}),s({warnings:a})}catch(e){return c(e)}}))})(i,t,n).then((function(e){var t=e.warnings;return r({warnings:t})})).catch((function(e){return o(e)}))}))},gi.prototype.saveXML=function(e){e=e||{};var t=this,n=this._definitions;return new Promise((function(i,r){if(!n){var o=new Error("no definitions loaded");return r(o)}n=t._emit("saveXML.start",{definitions:n})||n,t._moddle.toXML(n,e).then((function(e){var n=e.xml;try{n=t._emit("saveXML.serialized",{error:null,xml:n})||n,t._emit("saveXML.done",{error:null,xml:n})}catch(e){console.error("error in saveXML life-cycle listener",e)}return i({xml:n})})).catch((function(e){return r(e)}))}))},gi.prototype.saveSVG=function(e){e=e||{};var t=this;return new Promise((function(e,n){var i,r;t._emit("saveSVG.start");try{var o=t.get("canvas"),a=o.getDefaultLayer(),s=ye("defs",o._svg),c=Ue(a),u=s?"<defs>"+Ue(s)+"</defs>":"",l=a.getBBox();i='<?xml version="1.0" encoding="utf-8"?>\n\x3c!-- created with diagram-js / http://bpmn.io --\x3e\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="'+l.width+'" height="'+l.height+'" viewBox="'+l.x+" "+l.y+" "+l.width+" "+l.height+'" version="1.1">'+u+c+"</svg>"}catch(e){r=e}return t._emit("saveSVG.done",{error:r,svg:i}),r?n(r):e({svg:i})}))},gi.prototype._setDefinitions=function(e){this._definitions=e},gi.prototype.getModules=function(){return this._modules},gi.prototype.clear=function(){this.getDefinitions()&&(this.get("elementRegistry").forEach((function(e){var t=e.businessObject;t&&t.di&&delete t.di})),Zt.prototype.clear.call(this))},gi.prototype.destroy=function(){Zt.prototype.destroy.call(this),ge(this._container)},gi.prototype.on=function(e,t,n,i){return this.get("eventBus").on(e,t,n,i)},gi.prototype.off=function(e,t){this.get("eventBus").off(e,t)},gi.prototype.attachTo=function(e){if(!e)throw new Error("parentNode required");this.detach(),e.get&&e.constructor.prototype.jquery&&(e=e.get(0)),"string"==typeof e&&(e=ye(e)),e.appendChild(this._container),this._emit("attach",{}),this.get("canvas").resized()},gi.prototype.getDefinitions=function(){return this._definitions},gi.prototype.detach=function(){var e=this._container,t=e.parentNode;t&&(this._emit("detach",{}),t.removeChild(e))},gi.prototype._init=function(e,t,n){var i=n.modules||this.getModules(),r=n.additionalModules||[],o=[].concat([{postitjs:["value",this],moddle:["value",t]}],i,r),a=G(W(n,["additionalModules"]),{canvas:G({},n.canvas,{container:e}),modules:o});Zt.call(this,a),n&&n.container&&this.attachTo(n.container)},gi.prototype._emit=function(e,t){return this.get("eventBus").fire(e,t)},gi.prototype._createContainer=function(e){var t=he('<div class="pjs-container"></div>');return G(t.style,{width:_i(e.width),height:_i(e.height),position:e.position}),t},gi.prototype._createModdle=function(e){return new hi(G({},this._moddleExtensions,e.moddleExtensions))},gi.prototype._modules=[],gi.prototype._moddleExtensions={};var xi={width:"100%",height:"100%",position:"relative"};function _i(e){return e+(v(e)?"px":"")}function wi(e){gi.call(this,e),this.on("import.parse.complete",(function(e){e.error||this._collectIds(e.definitions,e.context)}),this),this.on("diagram.destroy",(function(){this.get("moddle").ids.clear()}),this)}function bi(e,t){var n=Ei(e);return n&&"function"==typeof n.$instanceOf&&n.$instanceOf(t)}function Ei(e){return e&&e.businessObject||e}function Si(e,t){return T(t,(function(t){return bi(e,t)}))}function Ti(e){if(Si(e,["postit:Postit","postit:TextBox","postit:Group"]))return"name"}function ki(e){var t=e.businessObject,n=Ti(t);if(n)return t[n]||""}function Ci(e){return e.businessObject.di}function Mi(e,t){return ji(e)||Ci(e).get("bioc:fill")||t||"white"}function Pi(e,t){return ji(e)||Ci(e).get("bioc:stroke")||t||"black"}function ji(e){return Ei(e).color||e.color}function Bi(e,t,n,i,r,o,a){it.call(this,t,a);var s=e&&e.defaultFillColor,c=e&&e.defaultStrokeColor,u=n.computeStyle;function l(e,t,n,i,r,o){y(r)&&(o=r,r=0),r=r||0,o=u(o,{stroke:"black",strokeWidth:2,fill:"white"});var a=Ne("rect");return be(a,{x:r,y:r,width:t-2*r,height:n-2*r,rx:i,ry:i}),be(a,o),xe(e,a),a}function p(e,t,n){n=G({size:{width:100}},n);var i=o.createText(t||"",n);return Ce(i).add("djs-label"),xe(e,i),i}function h(e,t,n,i){return p(e,function(e){return e.businessObject}(t).name,{box:t,align:n,padding:5,style:{fill:"black"===Ai(t)?"white":"black",fontSize:i||16}})}this.handlers={"postit:SquarePostit":function(e,t){var n={fill:Mi(t,s),stroke:Pi(t,c)};"fillOpacity"in n||(n.fillOpacity=.95);var i=l(e,t.width,t.height,0,n);return h(e,t,"center-middle"),i},"postit:Group":function(e,t){return l(e,t.width,t.height,10,{stroke:"black",strokeWidth:1,strokeDasharray:"8,3,1,3",fill:"none",pointerEvents:"none"})},"postit:CirclePostit":function(e,t){var n={fill:Mi(t,s),stroke:Pi(t,c)};"fillOpacity"in n||(n.fillOpacity=.95);var i=function(e,t,n,i,r){y(i)&&(r=i,i=0),i=i||0,"none"===(r=u(r,{stroke:"black",strokeWidth:2,fill:"white"})).fill&&delete r.fillOpacity;var o=t/2,a=n/2,s=Ne("circle");return be(s,{cx:o,cy:a,r:Math.round((t+n)/4-i)}),be(s,r),xe(e,s),s}(e,t.width,t.height,n);return h(e,t,"center-middle"),i},"postit:TextBox":function(e,t){var n=t.textSize||16,i=l(e,t.width,t.height,0,{fill:"none",stroke:"none"});return h(e,t,"center-middle",n),i},"postit:Image":function(e,t){var n;return Ri(t)?xe(e,n=Ne("image",{x:0,y:0,width:t.width,height:t.height,href:Ri(t)})):(n=l(e,t.width,t.height,0,{fill:"#ccc",stroke:"#ccc"}),p(e,"Image Placeholder",{box:t,align:"center-middle",padding:5,style:{fill:"black",fontSize:16}})),n},label:function(e,t){return function(e,t){var n={width:90,height:30,x:t.width/2+t.x,y:t.height/2+t.y};return p(e,ki(t),{box:n,fitBox:!0,style:G({},o.getExternalStyle(),{fill:"black"})})}(e,t)}},this._drawPath=function(e,t,n){n=u(n,["no-fill"],{strokeWidth:2,stroke:"black"});var i=Ne("path");return be(i,{d:t}),be(i,n),xe(e,i),i}}function Ai(e){return Ei(e).color||e.color}function Ri(e){return Ei(e).source||e.source}r()(wi,gi),wi.prototype._createModdle=function(e){var t=gi.prototype._createModdle.call(this,e);return t.ids=new s([32,36,1]),t},wi.prototype._collectIds=function(e,t){var n,i=e.$model.ids;for(n in i.clear(),t.elementsById)i.claim(n,t.elementsById[n])},r()(Bi,it),Bi.$inject=["config.postit","eventBus","styles","pathMap","canvas","textRenderer"],Bi.prototype.canRender=function(e){return bi(e,"postit:BoardElement")},Bi.prototype.drawShape=function(e,t){var n=t.type;return(0,this.handlers[n])(e,t)},Bi.prototype.getShapePath=function(e){return rt([["M",(t=e).x,t.y],["l",n=t.width,0],["l",0,t.height],["l",-n,0],["z"]]);var t,n};var Oi={width:150,height:50};function Ni(e,t){var n;t.textContent=e;try{var i,r=""===e;return t.textContent=r?"dummy":e,i={width:(n=t.getBBox()).width+2*n.x,height:n.height},r&&(i.width=0),i}catch(e){return{width:0,height:0}}}function Li(e,t,n){for(var i,r=e.shift(),o=r;;){if((i=Ni(o,n)).width=o?i.width:0," "===o||""===o||i.width<Math.round(t)||o.length<2)return zi(e,o,r,i);o=Di(o,i.width,t)}}function zi(e,t,n,i){if(t.length<n.length){var r=n.slice(t.length).trim();e.unshift(r)}return{width:i.width,height:i.height,text:t}}function Di(e,t,n){var i=Math.max(e.length*(n/t),1),r=function(e,t){var n,i=e.split(/(\s|-|\u00AD)/g),r=[],o=0;if(i.length>1)for(;n=i.shift();){if(!(n.length+o<t)){"-"!==n&&"­"!==n||r.pop();break}r.push(n),o+=n.length}var a=r[r.length-1];return a&&"­"===a&&(r[r.length-1]="-"),r.join("")}(e,i);return r||(r=e.slice(0,Math.max(Math.round(i-1),1))),r}function Ii(e){this._config=G({},{size:Oi,padding:0,style:{},align:"center-top"},e||{})}function $i(e){var t=G({fontFamily:"IBM Plex, sans-serif",fontSize:16,fontWeight:"normal",lineHeight:1.2},e&&e.defaultStyle||{}),n=parseInt(t.fontSize,10)-1,i=G({},t,{fontSize:n},e&&e.externalStyle||{}),r=new Ii({style:t});this.getExternalLabelBounds=function(e,t){var n=r.getDimensions(t,{box:{width:90,height:30,x:e.width/2+e.x,y:e.height/2+e.y},style:i});return{x:Math.round(e.x+e.width/2-n.width/2),y:Math.round(e.y),width:Math.ceil(n.width),height:Math.ceil(n.height)}},this.createText=function(e,t){return r.createText(e,t||{})},this.getDefaultStyle=function(){return t},this.getExternalStyle=function(){return i}}Ii.prototype.createText=function(e,t){return this.layoutText(e,t).element},Ii.prototype.getDimensions=function(e,t){return this.layoutText(e,t).dimensions},Ii.prototype.layoutText=function(e,t){var n,i=G({},this._config.size,t.box),r=G({},this._config.style,t.style),o=function(e){var t=e.split("-");return{horizontal:t[0]||"center",vertical:t[1]||"top"}}(t.align||this._config.align),a=function(e){return y(e)?G({top:0,left:0,right:0,bottom:0},e):{top:e,left:e,right:e,bottom:e}}(void 0!==t.padding?t.padding:this._config.padding),s=t.fitBox||!1,c=function(e){if("fontSize"in e&&"lineHeight"in e)return e.lineHeight*parseInt(e.fontSize,10)}(r),u=e.split(/\u00AD?\r?\n/),l=[],p=i.width-a.left-a.right,h=Ne("text");for(be(h,{x:0,y:0}),be(h,r),xe((n=void 0,(n=document.getElementById("helper-svg"))||(be(n=Ne("svg"),{id:"helper-svg",width:0,height:0,style:"visibility: hidden; position: fixed"}),document.body.appendChild(n)),n),h);u.length;)l.push(Li(u,p,h));"middle"===o.vertical&&(a.top=a.bottom=0);var d=E(l,(function(e,t,n){return e+(c||t.height)}),0)+a.top+a.bottom,f=E(l,(function(e,t,n){return t.width>e?t.width:e}),0),v=a.top;"middle"===o.vertical&&(v+=(i.height-d)/2),v-=(c||l[0].height)/4;var g=Ne("text");return be(g,r),b(l,(function(e){var t;switch(v+=c||e.height,o.horizontal){case"left":t=a.left;break;case"right":t=(s?f:p)-a.right-e.width;break;default:t=Math.max(((s?f:p)-e.width)/2+a.left,0)}var n=Ne("tspan");be(n,{x:t,y:v}),n.textContent=e.text,xe(g,n)})),Pe(h),{dimensions:{width:f,height:d},element:g}},$i.$inject=["config.textRenderer"];var Fi=/\{([^}]+)\}/g,Hi=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g;const Gi={__init__:["postitRenderer"],postitRenderer:["type",Bi],textRenderer:["type",$i],pathMap:["type",function(){this.pathMap={EVENT_MESSAGE:{d:"m {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}",height:36,width:36,heightElements:[6,14],widthElements:[10.5,21]},EVENT_SIGNAL:{d:"M {mx},{my} l {e.x0},{e.y0} l -{e.x1},0 Z",height:36,width:36,heightElements:[18],widthElements:[10,20]},EVENT_ESCALATION:{d:"M {mx},{my} l {e.x0},{e.y0} l -{e.x0},-{e.y1} l -{e.x0},{e.y1} Z",height:36,width:36,heightElements:[20,7],widthElements:[8]},EVENT_CONDITIONAL:{d:"M {e.x0},{e.y0} l {e.x1},0 l 0,{e.y2} l -{e.x1},0 Z M {e.x2},{e.y3} l {e.x0},0 M {e.x2},{e.y4} l {e.x0},0 M {e.x2},{e.y5} l {e.x0},0 M {e.x2},{e.y6} l {e.x0},0 M {e.x2},{e.y7} l {e.x0},0 M {e.x2},{e.y8} l {e.x0},0 ",height:36,width:36,heightElements:[8.5,14.5,18,11.5,14.5,17.5,20.5,23.5,26.5],widthElements:[10.5,14.5,12.5]},EVENT_LINK:{d:"m {mx},{my} 0,{e.y0} -{e.x1},0 0,{e.y1} {e.x1},0 0,{e.y0} {e.x0},-{e.y2} -{e.x0},-{e.y2} z",height:36,width:36,heightElements:[4.4375,6.75,7.8125],widthElements:[9.84375,13.5]},EVENT_ERROR:{d:"m {mx},{my} {e.x0},-{e.y0} {e.x1},-{e.y1} {e.x2},{e.y2} {e.x3},-{e.y3} -{e.x4},{e.y4} -{e.x5},-{e.y5} z",height:36,width:36,heightElements:[.023,8.737,8.151,16.564,10.591,8.714],widthElements:[.085,6.672,6.97,4.273,5.337,6.636]},EVENT_CANCEL_45:{d:"m {mx},{my} -{e.x1},0 0,{e.x0} {e.x1},0 0,{e.y1} {e.x0},0 0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z",height:36,width:36,heightElements:[4.75,8.5],widthElements:[4.75,8.5]},EVENT_COMPENSATION:{d:"m {mx},{my} {e.x0},-{e.y0} 0,{e.y1} z m {e.x1},-{e.y2} {e.x2},-{e.y3} 0,{e.y1} -{e.x2},-{e.y3} z",height:36,width:36,heightElements:[6.5,13,.4,6.1],widthElements:[9,9.3,8.7]},EVENT_TIMER_WH:{d:"M {mx},{my} l {e.x0},-{e.y0} m -{e.x0},{e.y0} l {e.x1},{e.y1} ",height:36,width:36,heightElements:[10,2],widthElements:[3,7]},EVENT_TIMER_LINE:{d:"M {mx},{my} m {e.x0},{e.y0} l -{e.x1},{e.y1} ",height:36,width:36,heightElements:[10,3],widthElements:[0,0]},EVENT_MULTIPLE:{d:"m {mx},{my} {e.x1},-{e.y0} {e.x1},{e.y0} -{e.x0},{e.y1} -{e.x2},0 z",height:36,width:36,heightElements:[6.28099,12.56199],widthElements:[3.1405,9.42149,12.56198]},EVENT_PARALLEL_MULTIPLE:{d:"m {mx},{my} {e.x0},0 0,{e.y1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} -{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z",height:36,width:36,heightElements:[2.56228,7.68683],widthElements:[2.56228,7.68683]},GATEWAY_EXCLUSIVE:{d:"m {mx},{my} {e.x0},{e.y0} {e.x1},{e.y0} {e.x2},0 {e.x4},{e.y2} {e.x4},{e.y1} {e.x2},0 {e.x1},{e.y3} {e.x0},{e.y3} {e.x3},0 {e.x5},{e.y1} {e.x5},{e.y2} {e.x3},0 z",height:17.5,width:17.5,heightElements:[8.5,6.5312,-6.5312,-8.5],widthElements:[6.5,-6.5,3,-3,5,-5]},GATEWAY_PARALLEL:{d:"m {mx},{my} 0,{e.y1} -{e.x1},0 0,{e.y0} {e.x1},0 0,{e.y1} {e.x0},0 0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z",height:30,width:30,heightElements:[5,12.5],widthElements:[5,12.5]},GATEWAY_EVENT_BASED:{d:"m {mx},{my} {e.x0},{e.y0} {e.x0},{e.y1} {e.x1},{e.y2} {e.x2},0 z",height:11,width:11,heightElements:[-6,6,12,-12],widthElements:[9,-3,-12]},GATEWAY_COMPLEX:{d:"m {mx},{my} 0,{e.y0} -{e.x0},-{e.y1} -{e.x1},{e.y2} {e.x0},{e.y1} -{e.x2},0 0,{e.y3} {e.x2},0  -{e.x0},{e.y1} l {e.x1},{e.y2} {e.x0},-{e.y1} 0,{e.y0} {e.x3},0 0,-{e.y0} {e.x0},{e.y1} {e.x1},-{e.y2} -{e.x0},-{e.y1} {e.x2},0 0,-{e.y3} -{e.x2},0 {e.x0},-{e.y1} -{e.x1},-{e.y2} -{e.x0},{e.y1} 0,-{e.y0} -{e.x3},0 z",height:17.125,width:17.125,heightElements:[4.875,3.4375,2.125,3],widthElements:[3.4375,2.125,4.875,3]},DATA_OBJECT_PATH:{d:"m 0,0 {e.x1},0 {e.x0},{e.y0} 0,{e.y1} -{e.x2},0 0,-{e.y2} {e.x1},0 0,{e.y0} {e.x0},0",height:61,width:51,heightElements:[10,50,60],widthElements:[10,40,50,60]},DATA_OBJECT_COLLECTION_PATH:{d:"m {mx}, {my} m  0 15  l 0 -15 m  4 15  l 0 -15 m  4 15  l 0 -15 ",height:61,width:51,heightElements:[12],widthElements:[1,6,12,15]},DATA_ARROW:{d:"m 5,9 9,0 0,-3 5,5 -5,5 0,-3 -9,0 z",height:61,width:51,heightElements:[],widthElements:[]},DATA_STORE:{d:"m  {mx},{my} l  0,{e.y2} c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 l  0,-{e.y2} c -{e.x0},-{e.y1} -{e.x1},-{e.y1} -{e.x2},0c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 m  -{e.x2},{e.y0}c  {e.x0},{e.y1} {e.x1},{e.y1} {e.x2},0m  -{e.x2},{e.y0}c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0",height:61,width:61,heightElements:[7,10,45],widthElements:[2,58,60]},TEXT_ANNOTATION:{d:"m {mx}, {my} m 10,0 l -10,0 l 0,{e.y0} l 10,0",height:30,width:10,heightElements:[30],widthElements:[10]},MARKER_SUB_PROCESS:{d:"m{mx},{my} m 7,2 l 0,10 m -5,-5 l 10,0",height:10,width:10,heightElements:[],widthElements:[]},MARKER_PARALLEL:{d:"m{mx},{my} m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10",height:10,width:10,heightElements:[],widthElements:[]},MARKER_SEQUENTIAL:{d:"m{mx},{my} m 0,3 l 10,0 m -10,3 l 10,0 m -10,3 l 10,0",height:10,width:10,heightElements:[],widthElements:[]},MARKER_COMPENSATION:{d:"m {mx},{my} 7,-5 0,10 z m 7.1,-0.3 6.9,-4.7 0,10 -6.9,-4.7 z",height:10,width:21,heightElements:[],widthElements:[]},MARKER_LOOP:{d:"m {mx},{my} c 3.526979,0 6.386161,-2.829858 6.386161,-6.320661 0,-3.490806 -2.859182,-6.320661 -6.386161,-6.320661 -3.526978,0 -6.38616,2.829855 -6.38616,6.320661 0,1.745402 0.714797,3.325567 1.870463,4.469381 0.577834,0.571908 1.265885,1.034728 2.029916,1.35457 l -0.718163,-3.909793 m 0.718163,3.909793 -3.885211,0.802902",height:13.9,width:13.7,heightElements:[],widthElements:[]},MARKER_ADHOC:{d:"m {mx},{my} m 0.84461,2.64411 c 1.05533,-1.23780996 2.64337,-2.07882 4.29653,-1.97997996 2.05163,0.0805 3.85579,1.15803 5.76082,1.79107 1.06385,0.34139996 2.24454,0.1438 3.18759,-0.43767 0.61743,-0.33642 1.2775,-0.64078 1.7542,-1.17511 0,0.56023 0,1.12046 0,1.6807 -0.98706,0.96237996 -2.29792,1.62393996 -3.6918,1.66181996 -1.24459,0.0927 -2.46671,-0.2491 -3.59505,-0.74812 -1.35789,-0.55965 -2.75133,-1.33436996 -4.27027,-1.18121996 -1.37741,0.14601 -2.41842,1.13685996 -3.44288,1.96782996 z",height:4,width:15,heightElements:[],widthElements:[]},TASK_TYPE_SEND:{d:"m {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}",height:14,width:21,heightElements:[6,14],widthElements:[10.5,21]},TASK_TYPE_SCRIPT:{d:"m {mx},{my} c 9.966553,-6.27276 -8.000926,-7.91932 2.968968,-14.938 l -8.802728,0 c -10.969894,7.01868 6.997585,8.66524 -2.968967,14.938 z m -7,-12 l 5,0 m -4.5,3 l 4.5,0 m -3,3 l 5,0m -4,3 l 5,0",height:15,width:12.6,heightElements:[6,14],widthElements:[10.5,21]},TASK_TYPE_USER_1:{d:"m {mx},{my} c 0.909,-0.845 1.594,-2.049 1.594,-3.385 0,-2.554 -1.805,-4.62199999 -4.357,-4.62199999 -2.55199998,0 -4.28799998,2.06799999 -4.28799998,4.62199999 0,1.348 0.974,2.562 1.89599998,3.405 -0.52899998,0.187 -5.669,2.097 -5.794,4.7560005 v 6.718 h 17 v -6.718 c 0,-2.2980005 -5.5279996,-4.5950005 -6.0509996,-4.7760005 zm -8,6 l 0,5.5 m 11,0 l 0,-5"},TASK_TYPE_USER_2:{d:"m {mx},{my} m 2.162,1.009 c 0,2.4470005 -2.158,4.4310005 -4.821,4.4310005 -2.66499998,0 -4.822,-1.981 -4.822,-4.4310005 "},TASK_TYPE_USER_3:{d:"m {mx},{my} m -6.9,-3.80 c 0,0 2.25099998,-2.358 4.27399998,-1.177 2.024,1.181 4.221,1.537 4.124,0.965 -0.098,-0.57 -0.117,-3.79099999 -4.191,-4.13599999 -3.57499998,0.001 -4.20799998,3.36699999 -4.20699998,4.34799999 z"},TASK_TYPE_MANUAL:{d:"m {mx},{my} c 0.234,-0.01 5.604,0.008 8.029,0.004 0.808,0 1.271,-0.172 1.417,-0.752 0.227,-0.898 -0.334,-1.314 -1.338,-1.316 -2.467,-0.01 -7.886,-0.004 -8.108,-0.004 -0.014,-0.079 0.016,-0.533 0,-0.61 0.195,-0.042 8.507,0.006 9.616,0.002 0.877,-0.007 1.35,-0.438 1.353,-1.208 0.003,-0.768 -0.479,-1.09 -1.35,-1.091 -2.968,-0.002 -9.619,-0.013 -9.619,-0.013 v -0.591 c 0,0 5.052,-0.016 7.225,-0.016 0.888,-0.002 1.354,-0.416 1.351,-1.193 -0.006,-0.761 -0.492,-1.196 -1.361,-1.196 -3.473,-0.005 -10.86,-0.003 -11.0829995,-0.003 -0.022,-0.047 -0.045,-0.094 -0.069,-0.139 0.3939995,-0.319 2.0409995,-1.626 2.4149995,-2.017 0.469,-0.4870005 0.519,-1.1650005 0.162,-1.6040005 -0.414,-0.511 -0.973,-0.5 -1.48,-0.236 -1.4609995,0.764 -6.5999995,3.6430005 -7.7329995,4.2710005 -0.9,0.499 -1.516,1.253 -1.882,2.19 -0.37000002,0.95 -0.17,2.01 -0.166,2.979 0.004,0.718 -0.27300002,1.345 -0.055,2.063 0.629,2.087 2.425,3.312 4.859,3.318 4.6179995,0.014 9.2379995,-0.139 13.8569995,-0.158 0.755,-0.004 1.171,-0.301 1.182,-1.033 0.012,-0.754 -0.423,-0.969 -1.183,-0.973 -1.778,-0.01 -5.824,-0.004 -6.04,-0.004 10e-4,-0.084 0.003,-0.586 10e-4,-0.67 z"},TASK_TYPE_INSTANTIATING_SEND:{d:"m {mx},{my} l 0,8.4 l 12.6,0 l 0,-8.4 z l 6.3,3.6 l 6.3,-3.6"},TASK_TYPE_SERVICE:{d:"m {mx},{my} v -1.71335 c 0.352326,-0.0705 0.703932,-0.17838 1.047628,-0.32133 0.344416,-0.14465 0.665822,-0.32133 0.966377,-0.52145 l 1.19431,1.18005 1.567487,-1.57688 -1.195028,-1.18014 c 0.403376,-0.61394 0.683079,-1.29908 0.825447,-2.01824 l 1.622133,-0.01 v -2.2196 l -1.636514,0.01 c -0.07333,-0.35153 -0.178319,-0.70024 -0.323564,-1.04372 -0.145244,-0.34406 -0.321407,-0.6644 -0.522735,-0.96217 l 1.131035,-1.13631 -1.583305,-1.56293 -1.129598,1.13589 c -0.614052,-0.40108 -1.302883,-0.68093 -2.022633,-0.82247 l 0.0093,-1.61852 h -2.241173 l 0.0042,1.63124 c -0.353763,0.0736 -0.705369,0.17977 -1.049785,0.32371 -0.344415,0.14437 -0.665102,0.32092 -0.9635006,0.52046 l -1.1698628,-1.15823 -1.5667691,1.5792 1.1684265,1.15669 c -0.4026573,0.61283 -0.68308,1.29797 -0.8247287,2.01713 l -1.6588041,0.003 v 2.22174 l 1.6724648,-0.006 c 0.073327,0.35077 0.1797598,0.70243 0.3242851,1.04472 0.1452428,0.34448 0.3214064,0.6644 0.5227339,0.96066 l -1.1993431,1.19723 1.5840256,1.56011 1.1964668,-1.19348 c 0.6140517,0.40346 1.3028827,0.68232 2.0233517,0.82331 l 7.19e-4,1.69892 h 2.226848 z m 0.221462,-3.9957 c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z"},TASK_TYPE_SERVICE_FILL:{d:"m {mx},{my} c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z"},TASK_TYPE_BUSINESS_RULE_HEADER:{d:"m {mx},{my} 0,4 20,0 0,-4 z"},TASK_TYPE_BUSINESS_RULE_MAIN:{d:"m {mx},{my} 0,12 20,0 0,-12 zm 0,8 l 20,0 m -13,-4 l 0,8"},MESSAGE_FLOW_MARKER:{d:"m {mx},{my} m -10.5 ,-7 l 0,14 l 21,0 l 0,-14 z l 10.5,6 l 10.5,-6"}},this.getRawPath=function(e){return this.pathMap[e].d},this.getScaledPath=function(e,t){var n,i,r=this.pathMap[e];t.abspos?(n=t.abspos.x,i=t.abspos.y):(n=t.containerWidth*t.position.mx,i=t.containerHeight*t.position.my);var o,a,s={};if(t.position){for(var c=t.containerHeight/r.height*t.yScaleFactor,u=t.containerWidth/r.width*t.xScaleFactor,l=0;l<r.heightElements.length;l++)s["y"+l]=r.heightElements[l]*c;for(var p=0;p<r.widthElements.length;p++)s["x"+p]=r.widthElements[p]*u}return o=r.d,a={mx:n,my:i,e:s},String(o).replace(Fi,(function(e,t){return function(e,t,n){var i=n;return t.replace(Hi,(function(e,t,n,r,o){t=t||r,i&&(t in i&&(i=i[t]),"function"==typeof i&&o&&(i=i()))})),i=(null==i||i==n?e:i)+""}(e,t,a)}))}}]},Ui={translate:["value",function(e,t){return t=t||{},e.replace(/{([^}]+)}/g,(function(e,n){return t[n]||"{"+n+"}"}))}]};var Wi={width:90,height:20};function Vi(e){return bi(e,"postit:Group")}function qi(e){return Xi(e.label)}function Yi(e){return bi(e,"postit:Group")?{x:e.x+e.width/2,y:e.y+Wi.height/2}:{x:e.x+e.width/2,y:e.y+e.height+Wi.height/2}}function Xi(e){return e&&!!e.labelTarget}function Ki(e,t){return G({id:e.id,type:e.$type,businessObject:e},t)}function Zi(e,t,n,i){return new Error(e("element {element} referenced by {referenced}#{property} not yet drawn",{element:di(n),referenced:di(t),property:i}))}function Ji(e,t,n,i,r,o){this._eventBus=e,this._canvas=t,this._elementFactory=n,this._elementRegistry=i,this._translate=r,this._textRenderer=o}Ji.$inject=["eventBus","canvas","elementFactory","elementRegistry","translate","textRenderer"],Ji.prototype.add=function(e,t){var n,i,r=e.di,o=this._translate;if(bi(r,"postitDi:PostitPlane"))n=this._elementFactory.createRoot(Ki(e)),this._canvas.setRootElement(n);else{if(!bi(r,"postitDi:PostitShape"))throw new Error(o("unknown di {di} for element {semantic}",{di:di(r),semantic:di(e)}));var a=function(e){return bi(e,"postit:Group")}(e);i=t&&(t.hidden||t.collapsed);var s=e.di.bounds;n=this._elementFactory.createShape(Ki(e,{hidden:i,x:Math.round(s.x),y:Math.round(s.y),width:Math.round(s.width),height:Math.round(s.height),isFrame:a})),this._canvas.addShape(n,t,void 0)}return Vi(e)&&ki(n)&&this.addLabel(e,n),this._eventBus.fire("boardElement.added",{element:n}),n},Ji.prototype._attachBoundary=function(e,t){var n=this._translate,i=e.attachedToRef;if(!i)throw new Error(n("missing {semantic}#attachedToRef",{semantic:di(e)}));var r=this._elementRegistry.get(i.id),o=r&&r.attachers;if(!r)throw Zi(n,e,i,"attachedToRef");t.host=r,o||(r.attachers=o=[]),-1===o.indexOf(t)&&o.push(t)},Ji.prototype.addLabel=function(e,t){var n,i,r;return n=function(e,t){var n,i,r,o=e.di.label;return o&&o.bounds?(r=o.bounds,i={width:Math.max(Wi.width,r.width),height:r.height},n={x:r.x+r.width/2,y:r.y+r.height/2}):(n=Yi(t),i=Wi),G({x:n.x-i.width/2,y:n.y-i.height/2},i)}(e,t),(i=ki(t))&&(n=this._textRenderer.getExternalLabelBounds(n,i)),r=this._elementFactory.createLabel(Ki(e,{id:e.id+"_label",labelTarget:t,type:"label",hidden:t.hidden||!ki(t),x:Math.round(n.x),y:Math.round(n.y),width:Math.round(n.width),height:Math.round(n.height)})),this._canvas.addShape(r,t.parent)},Ji.prototype._getEnd=function(e,t){var n,i,r=this._translate;if(n=(i=e[t+"Ref"])&&this._getElement(i))return n;throw i?Zi(r,e,i,t+"Ref"):new Error(r("{semantic}#{side} Ref not specified",{semantic:di(e),side:t}))},Ji.prototype._getSource=function(e){return this._getEnd(e,"source")},Ji.prototype._getTarget=function(e){return this._getEnd(e,"target")},Ji.prototype._getElement=function(e){return this._elementRegistry.get(e.id)};const Qi={__depends__:[Gi,{__depends__:[Ui],postitImporter:["type",Ji]}]};function er(e){e&&"function"==typeof e.stopPropagation&&e.stopPropagation()}function tr(e){return e.originalEvent||e.srcEvent}function nr(e,t){er(e),er(tr(e))}function ir(e){return e.pointers&&e.pointers.length&&(e=e.pointers[0]),e.touches&&e.touches.length&&(e=e.touches[0]),e?{x:e.clientX,y:e.clientY}:null}function rr(e,t){return(tr(e)||e).button===t}function or(e){return rr(e,0)}function ar(e){var t=tr(e)||e;return!!or(e)&&(/mac/i.test(navigator.platform)?t.metaKey:t.ctrlKey)}function sr(e){var t=tr(e)||e;return or(e)&&t.shiftKey}function cr(e){return!0}function ur(e){return or(e)||function(e){return rr(e,1)}(e)}function lr(e,t,n){var i=this;function r(n,i,r){var o,a;(function(e,t){return!(c[e]||or)(t)})(n,i)||(r?a=t.getGraphics(r):(o=i.delegateTarget||i.target)&&(a=o,r=t.get(a)),a&&r&&!1===e.fire(n,{element:r,gfx:a,originalEvent:i})&&(i.stopPropagation(),i.preventDefault()))}var o={};function a(e){return o[e]}var s={click:"element.click",contextmenu:"element.contextmenu",dblclick:"element.dblclick",mousedown:"element.mousedown",mousemove:"element.mousemove",mouseover:"element.hover",mouseout:"element.out",mouseup:"element.mouseup"},c={"element.contextmenu":cr,"element.mousedown":ur,"element.mouseup":ur,"element.click":ur,"element.dblclick":ur};function u(e,t,n,i){var a=o[n]=function(e){r(n,e)};i&&(c[n]=i),a.$delegate=le(e,"svg, .djs-element",t,a)}function l(e,t,n){var i=a(n);i&&pe(e,t,i.$delegate)}e.on("canvas.destroy",(function(e){var t;t=e.svg,b(s,(function(e,n){l(t,n,e)}))})),e.on("canvas.init",(function(e){var t;t=e.svg,b(s,(function(e,n){u(t,n,e)}))})),e.on(["shape.added","connection.added"],(function(t){var n=t.element,i=t.gfx;e.fire("interactionEvents.createHit",{element:n,gfx:i})})),e.on(["shape.changed","connection.changed"],500,(function(t){var n=t.element,i=t.gfx;e.fire("interactionEvents.updateHit",{element:n,gfx:i})})),e.on("interactionEvents.createHit",500,(function(e){var t=e.element,n=e.gfx;i.createDefaultHit(t,n)})),e.on("interactionEvents.updateHit",(function(e){var t=e.element,n=e.gfx;i.updateDefaultHit(t,n)}));var p=f("djs-hit djs-hit-stroke"),h=f("djs-hit djs-hit-click-stroke"),d={all:f("djs-hit djs-hit-all"),"click-stroke":h,stroke:p};function f(e,t){return t=G({stroke:"white",strokeWidth:15},t||{}),n.cls(e,["no-fill","no-border"],t)}function y(e,t){var n=d[t];if(!n)throw new Error("invalid hit type <"+t+">");return be(e,n),e}function v(e,t){xe(e,t)}this.removeHits=function(e){b(ve(".djs-hit",e),Pe)},this.createDefaultHit=function(e,t){var n,i=e.waypoints,r=e.isFrame;return i?this.createWaypointsHit(t,i):(n=r?"stroke":"all",this.createBoxHit(t,n,{width:e.width,height:e.height}))},this.createWaypointsHit=function(e,t){var n=at(t);return y(n,"stroke"),v(e,n),n},this.createBoxHit=function(e,t,n){n=G({x:0,y:0},n);var i=Ne("rect");return y(i,t),be(i,n),v(e,i),i},this.updateDefaultHit=function(e,t){var n=ye(".djs-hit",t);if(n)return e.waypoints?function(e,t){be(e,{points:ot(t)})}(n,e.waypoints):be(n,{width:e.width,height:e.height}),n},this.fire=r,this.triggerMouseEvent=function(e,t,n){var i=s[e];if(!i)throw new Error("unmapped DOM event name <"+e+">");return r(i,t,n)},this.mouseHandler=a,this.registerEvent=u,this.unregisterEvent=l}lr.$inject=["eventBus","elementRegistry","styles"];const pr={__init__:["interactionEvents"],interactionEvents:["type",lr]};function hr(e,t,n){this.offset=6;var i=t.cls("djs-outline",["no-fill"]),r=this;function o(e,t){var n=Ne("rect");return be(n,G({x:10,y:10,width:100,height:100},i)),xe(e,n),n}e.on(["shape.added","shape.changed"],500,(function(e){var t=e.element,n=e.gfx,i=ye(".djs-outline",n);i||(i=o(n)),r.updateShapeOutline(i,t)})),e.on(["connection.added","connection.changed"],(function(e){var t=e.element,n=e.gfx,i=ye(".djs-outline",n);i||(i=o(n)),r.updateConnectionOutline(i,t)}))}hr.prototype.updateShapeOutline=function(e,t){be(e,{x:-this.offset,y:-this.offset,width:t.width+2*this.offset,height:t.height+2*this.offset})},hr.prototype.updateConnectionOutline=function(e,t){var n=ht(t);be(e,{x:n.x-this.offset,y:n.y-this.offset,width:n.width+2*this.offset,height:n.height+2*this.offset})},hr.$inject=["eventBus","styles","elementRegistry"];const dr={__init__:["outline"],outline:["type",hr]};function fr(e){this._eventBus=e,this._selectedElements=[];var t=this;e.on(["shape.remove","connection.remove"],(function(e){var n=e.element;t.deselect(n)})),e.on(["diagram.clear"],(function(e){t.select(null)}))}fr.$inject=["eventBus"],fr.prototype.deselect=function(e){var t=this._selectedElements,n=t.indexOf(e);if(-1!==n){var i=t.slice();t.splice(n,1),this._eventBus.fire("selection.changed",{oldSelection:i,newSelection:t})}},fr.prototype.get=function(){return this._selectedElements},fr.prototype.isSelected=function(e){return-1!==this._selectedElements.indexOf(e)},fr.prototype.select=function(e,t){var n=this._selectedElements,i=n.slice();f(e)||(e=e?[e]:[]),t?b(e,(function(e){-1===n.indexOf(e)&&n.push(e)})):this._selectedElements=n=e.slice(),this._eventBus.fire("selection.changed",{oldSelection:i,newSelection:n})};var yr="hover",vr="selected";function gr(e,t,n,i){function r(e,n){t.addMarker(e,n)}function o(e,n){t.removeMarker(e,n)}this._multiSelectionBox=null,e.on("element.hover",(function(e){r(e.element,yr)})),e.on("element.out",(function(e){o(e.element,yr)})),e.on("selection.changed",(function(e){var t=e.oldSelection,n=e.newSelection;b(t,(function(e){-1===n.indexOf(e)&&o(e,vr)})),b(n,(function(e){-1===t.indexOf(e)&&r(e,vr)}))}))}function mr(e,t,n,i){e.on("create.end",500,(function(e){var n=e.context,i=n.canExecute,r=n.elements,o=(n.hints||{}).autoSelect;if(i){if(!1===o)return;f(o)?t.select(o):t.select(r.filter(xr))}})),e.on("connect.end",500,(function(e){var n=e.context,i=n.canExecute,r=n.hover;i&&r&&t.select(r)})),e.on("shape.move.end",500,(function(e){var n=e.previousSelection||[],r=i.get(e.context.shape.id);_(n,(function(e){return r.id===e.id}))||t.select(r)})),e.on("element.click",(function(e){if(or(e)){var i=e.element;i===n.getRootElement()&&(i=null);var r=t.isSelected(i),o=t.get().length>1,a=ar(e)||sr(e);if(r&&o)return a?t.deselect(i):t.select(i);r?t.deselect(i):t.select(i,a)}}))}function xr(e){return!e.hidden}gr.$inject=["eventBus","canvas","selection","styles"],mr.$inject=["eventBus","selection","canvas","elementRegistry"];const _r={__init__:["selectionVisuals","selectionBehavior"],__depends__:[pr,dr],selection:["type",fr],selectionVisuals:["type",gr],selectionBehavior:["type",mr]};function wr(e){this._counter=0,this._prefix=(e?e+"-":"")+Math.floor(1e9*Math.random())+"-"}wr.prototype.next=function(){return this._prefix+ ++this._counter};var br=new wr("ov");function Er(e,t,n,i){var r,o;this._eventBus=t,this._canvas=n,this._elementRegistry=i,this._ids=br,this._overlayDefaults=G({show:null,scale:!0},e&&e.defaults),this._overlays={},this._overlayContainers=[],this._overlayRoot=(r=n.getContainer(),o=he('<div class="djs-overlay-container" style="position: absolute; width: 0; height: 0;" />'),r.insertBefore(o,r.firstChild),o),this._init()}function Sr(e,t,n){G(e.style,{left:t+"px",top:n+"px"})}function Tr(e,t){e.style.display=!1===t?"none":""}function kr(e,t){e.style["transform-origin"]="top left",["","-ms-","-webkit-"].forEach((function(n){e.style[n+"transform"]=t}))}Er.$inject=["config.overlays","eventBus","canvas","elementRegistry"],Er.prototype.get=function(e){if(m(e)&&(e={id:e}),m(e.element)&&(e.element=this._elementRegistry.get(e.element)),e.element){var t=this._getOverlayContainer(e.element,!0);return t?e.type?w(t.overlays,O({type:e.type})):t.overlays.slice():[]}return e.type?w(this._overlays,O({type:e.type})):e.id?this._overlays[e.id]:null},Er.prototype.add=function(e,t,n){if(y(t)&&(n=t,t=null),e.id||(e=this._elementRegistry.get(e)),!n.position)throw new Error("must specifiy overlay position");if(!n.html)throw new Error("must specifiy overlay html");if(!e)throw new Error("invalid element specified");var i=this._ids.next();return n=G({},this._overlayDefaults,n,{id:i,type:t,element:e,html:n.html}),this._addOverlay(n),i},Er.prototype.remove=function(e){var t=this.get(e)||[];f(t)||(t=[t]);var n=this;b(t,(function(e){var t=n._getOverlayContainer(e.element,!0);if(e&&(ge(e.html),ge(e.htmlContainer),delete e.htmlContainer,delete e.element,delete n._overlays[e.id]),t){var i=t.overlays.indexOf(e);-1!==i&&t.overlays.splice(i,1)}}))},Er.prototype.show=function(){Tr(this._overlayRoot)},Er.prototype.hide=function(){Tr(this._overlayRoot,!1)},Er.prototype.clear=function(){this._overlays={},this._overlayContainers=[],Q(this._overlayRoot)},Er.prototype._updateOverlayContainer=function(e){var t=e.element,n=e.html,i=t.x,r=t.y;if(t.waypoints){var o=ht(t);i=o.x,r=o.y}Sr(n,i,r),V(e.html,"data-container-id",t.id)},Er.prototype._updateOverlay=function(e){var t,n,i=e.position,r=e.htmlContainer,o=e.element,a=i.left,s=i.top;void 0!==i.right&&(t=o.waypoints?ht(o).width:o.width,a=-1*i.right+t),void 0!==i.bottom&&(n=o.waypoints?ht(o).height:o.height,s=-1*i.bottom+n),Sr(r,a||0,s||0)},Er.prototype._createOverlayContainer=function(e){var t=he('<div class="djs-overlays" style="position: absolute" />');this._overlayRoot.appendChild(t);var n={html:t,element:e,overlays:[]};return this._updateOverlayContainer(n),this._overlayContainers.push(n),n},Er.prototype._updateRoot=function(e){var t=e.scale||1,n="matrix("+[t,0,0,t,-1*e.x*t,-1*e.y*t].join(",")+")";kr(this._overlayRoot,n)},Er.prototype._getOverlayContainer=function(e,t){var n=_(this._overlayContainers,(function(t){return t.element===e}));return n||t?n:this._createOverlayContainer(e)},Er.prototype._addOverlay=function(e){var t,n,i=e.id,r=e.element,o=e.html;o.get&&o.constructor.prototype.jquery&&(o=o.get(0)),m(o)&&(o=he(o)),n=this._getOverlayContainer(r),(t=he('<div class="djs-overlay" data-overlay-id="'+i+'" style="position: absolute">')).appendChild(o),e.type&&Z(t).add("djs-overlay-"+e.type),e.htmlContainer=t,n.overlays.push(e),n.html.appendChild(t),this._overlays[i]=e,this._updateOverlay(e),this._updateOverlayVisibilty(e,this._canvas.viewbox())},Er.prototype._updateOverlayVisibilty=function(e,t){var n=e.show,i=n&&n.minZoom,r=n&&n.maxZoom,o=e.htmlContainer,a=!0;n&&((h(i)&&i>t.scale||h(r)&&r<t.scale)&&(a=!1),Tr(o,a)),this._updateOverlayScale(e,t)},Er.prototype._updateOverlayScale=function(e,t){var n,i,r,o=e.scale,a=e.htmlContainer,s="";!0!==o&&(!1===o?(n=1,i=1):(n=o.min,i=o.max),h(n)&&t.scale<n&&(r=(1/t.scale||1)*n),h(i)&&t.scale>i&&(r=(1/t.scale||1)*i)),h(r)&&(s="scale("+r+","+r+")"),kr(a,s)},Er.prototype._updateOverlaysVisibilty=function(e){var t=this;b(this._overlays,(function(n){t._updateOverlayVisibilty(n,e)}))},Er.prototype._init=function(){var e=this._eventBus,t=this;e.on("canvas.viewbox.changing",(function(e){t.hide()})),e.on("canvas.viewbox.changed",(function(e){var n;n=e.viewbox,t._updateRoot(n),t._updateOverlaysVisibilty(n),t.show()})),e.on(["shape.remove","connection.remove"],(function(e){var n=e.element;b(t.get({element:n}),(function(e){t.remove(e.id)}));var i=t._getOverlayContainer(n);if(i){ge(i.html);var r=t._overlayContainers.indexOf(i);-1!==r&&t._overlayContainers.splice(r,1)}})),e.on("element.changed",500,(function(e){var n=e.element,i=t._getOverlayContainer(n,!0);i&&(b(i.overlays,(function(e){t._updateOverlay(e)})),t._updateOverlayContainer(i))})),e.on("element.marker.update",(function(e){var n=t._getOverlayContainer(e.element,!0);n&&Z(n.html)[e.add?"add":"remove"](e.marker)})),e.on("diagram.clear",this.clear,this)};const Cr={__init__:["overlays"],overlays:["type",Er]};function Mr(e){gi.call(this,e)}function Pr(e){return!e.altKey&&(e.ctrlKey||e.metaKey)}function jr(e,t){return-1!==(e=f(e)?e:[e]).indexOf(t.key)||-1!==e.indexOf(t.keyCode)}function Br(e){return e.shiftKey}r()(Mr,gi),Mr.prototype._modules=[Qi,Ui,_r,Cr],Mr.prototype._moddleExtensions={};var Ar="keyboard.keydown";function Rr(e,t){var n=this;this._config=e||{},this._eventBus=t,this._keydownHandler=this._keydownHandler.bind(this),this._keyupHandler=this._keyupHandler.bind(this),t.on("diagram.destroy",(function(){n._fire("destroy"),n.unbind()})),t.on("diagram.init",(function(){n._fire("init")})),t.on("attach",(function(){e&&e.bindTo&&n.bind(e.bindTo)})),t.on("detach",(function(){n.unbind()}))}Rr.$inject=["config.keyboard","eventBus"],Rr.prototype._keydownHandler=function(e){this._keyHandler(e,Ar)},Rr.prototype._keyupHandler=function(e){this._keyHandler(e,"keyboard.keyup")},Rr.prototype._keyHandler=function(e,t){if(!(i=e.target)||!ne(i,"input, textarea")&&"true"!==i.contentEditable){var n={keyEvent:e};this._eventBus.fire(t||Ar,n)&&e.preventDefault()}var i},Rr.prototype.bind=function(e){this.unbind(),this._node=e,ce.bind(e,"keydown",this._keydownHandler,!0),ce.bind(e,"keyup",this._keyupHandler,!0),this._fire("bind")},Rr.prototype.getBinding=function(){return this._node},Rr.prototype.unbind=function(){var e=this._node;e&&(this._fire("unbind"),ce.unbind(e,"keydown",this._keydownHandler,!0),ce.unbind(e,"keyup",this._keyupHandler,!0)),this._node=null},Rr.prototype._fire=function(e){this._eventBus.fire("keyboard."+e,{node:this._node})},Rr.prototype.addListener=function(e,t,n){g(e)&&(n=t,t=e,e=1e3),this._eventBus.on(n||Ar,e,t)},Rr.prototype.removeListener=function(e,t){this._eventBus.off(t||Ar,e)},Rr.prototype.hasModifier=function(e){return e.ctrlKey||e.metaKey||e.shiftKey||e.altKey},Rr.prototype.isCmd=Pr,Rr.prototype.isShift=Br,Rr.prototype.isKey=jr;var Or=["c","C",67],Nr=["v","V",86],Lr=["y","Y",89],zr=["z","Z",90];function Dr(e,t){var n=this;e.on("editorActions.init",500,(function(e){var i=e.editorActions;n.registerBindings(t,i)}))}Dr.$inject=["eventBus","keyboard"],Dr.prototype.registerBindings=function(e,t){function n(n,i){t.isRegistered(n)&&e.addListener(i)}n("undo",(function(e){var n=e.keyEvent;if(Pr(n)&&!Br(n)&&jr(zr,n))return t.trigger("undo"),!0})),n("redo",(function(e){var n=e.keyEvent;if(Pr(n)&&(jr(Lr,n)||jr(zr,n)&&Br(n)))return t.trigger("redo"),!0})),n("copy",(function(e){var n=e.keyEvent;if(Pr(n)&&jr(Or,n))return t.trigger("copy"),!0})),n("paste",(function(e){var n=e.keyEvent;if(Pr(n)&&jr(Nr,n))return t.trigger("paste"),!0})),n("stepZoom",(function(e){var n=e.keyEvent;if(jr(["+","Add","="],n)&&Pr(n))return t.trigger("stepZoom",{value:1}),!0})),n("stepZoom",(function(e){var n=e.keyEvent;if(jr(["-","Subtract"],n)&&Pr(n))return t.trigger("stepZoom",{value:-1}),!0})),n("zoom",(function(e){var n=e.keyEvent;if(jr("0",n)&&Pr(n))return t.trigger("zoom",{value:1}),!0})),n("removeSelection",(function(e){if(jr(["Backspace","Delete","Del"],e.keyEvent))return t.trigger("removeSelection"),!0}))};const Ir={__init__:["keyboard","keyboardBindings"],keyboard:["type",Rr],keyboardBindings:["type",Dr]};var $r={moveSpeed:50,moveSpeedAccelerated:200};function Fr(e,t,n){var i=this;this._config=G({},$r,e||{}),t.addListener((function(e){var n=e.keyEvent,r=i._config;if(t.isCmd(n)&&t.isKey(["ArrowLeft","Left","ArrowUp","Up","ArrowDown","Down","ArrowRight","Right"],n)){var o,a=t.isShift(n)?r.moveSpeedAccelerated:r.moveSpeed;switch(n.key){case"ArrowLeft":case"Left":o="left";break;case"ArrowUp":case"Up":o="up";break;case"ArrowRight":case"Right":o="right";break;case"ArrowDown":case"Down":o="down"}return i.moveCanvas({speed:a,direction:o}),!0}})),this.moveCanvas=function(e){var t=0,i=0,r=e.speed/Math.min(Math.sqrt(n.viewbox().scale),1);switch(e.direction){case"left":t=r;break;case"up":i=r;break;case"right":t=-r;break;case"down":i=-r}n.scroll({dx:t,dy:i})}}Fr.$inject=["config.keyboardMove","keyboard","canvas"];const Hr={__depends__:[Ir],__init__:["keyboardMove"],keyboardMove:["type",Fr]};var Gr=/^djs-cursor-.*$/;function Ur(e){var t=Z(document.body);t.removeMatching(Gr),e&&t.add("djs-cursor-"+e)}function Wr(){Ur(null)}function Vr(e,t){function n(){return!1}return t=t||"element.click",e.once(t,5e3,n),function(){e.off(t,n)}}function qr(e){return{x:e.x+e.width/2,y:e.y+e.height/2}}function Yr(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Xr(e,t){var n;function i(i){var r,o=n.start,a=n.button,s=ir(i),c=Yr(s,o);!n.dragging&&(r=c,Math.sqrt(Math.pow(r.x,2)+Math.pow(r.y,2))>15)&&(n.dragging=!0,0===a&&Vr(e),Ur("grab")),n.dragging&&(c=Yr(s,n.last||n.start),t.scroll({dx:c.x,dy:c.y}),n.last=s),i.preventDefault()}function r(e){ce.unbind(document,"mousemove",i),ce.unbind(document,"mouseup",r),n=null,Wr()}e.on("element.mousedown",500,(function(e){return function(e){if(!ie(e.target,".djs-draggable")){var t=e.button;if(!(t>=2||e.ctrlKey||e.shiftKey||e.altKey))return n={button:t,start:ir(e)},ce.bind(document,"mousemove",i),ce.bind(document,"mouseup",r),!0}}(e.originalEvent)})),this.isActive=function(){return!!n}}Xr.$inject=["eventBus","canvas"];const Kr={__init__:["moveCanvas"],moveCanvas:["type",Xr]};function Zr(e){return Math.log(e)/Math.log(10)}function Jr(e,t){var n=Zr(e.min),i=Zr(e.max);return(Math.abs(n)+Math.abs(i))/t}var Qr=Math.sign||function(e){return e>=0?1:-1},eo={min:.2,max:4};function to(e,t,n){e=e||{},this._enabled=!1,this._canvas=n,this._container=n._container,this._handleWheel=F(this._handleWheel,this),this._totalDelta=0,this._scale=e.scale||.75;var i=this;t.on("canvas.init",(function(t){i._init(!1!==e.enabled)}))}to.$inject=["config.zoomScroll","eventBus","canvas"],to.prototype.scroll=function(e){this._canvas.scroll(e)},to.prototype.reset=function(){this._canvas.zoom("fit-viewport")},to.prototype.zoom=function(e,t){var n=Jr(eo,20);this._totalDelta+=e,Math.abs(this._totalDelta)>.1&&(this._zoom(e,t,n),this._totalDelta=0)},to.prototype._handleWheel=function(e){if(!ie(e.target,".djs-scrollable",!0)){var t=this._container;e.preventDefault();var n,i=e.ctrlKey,r=e.shiftKey,o=-1*this._scale;if(o*=i?0===e.deltaMode?.02:.32:0===e.deltaMode?1:16,i){var a=t.getBoundingClientRect(),s={x:e.clientX-a.left,y:e.clientY-a.top};n=Math.sqrt(Math.pow(e.deltaY,2)+Math.pow(e.deltaX,2))*Qr(e.deltaY)*o,this.zoom(n,s)}else n=r?{dx:o*e.deltaY,dy:0}:{dx:o*e.deltaX,dy:o*e.deltaY},this.scroll(n)}},to.prototype.stepZoom=function(e,t){var n=Jr(eo,10);this._zoom(e,t,n)},to.prototype._zoom=function(e,t,n){var i=this._canvas,r=e>0?1:-1,o=Zr(i.zoom()),a=Math.round(o/n)*n;a+=n*r;var s,c,u=Math.pow(10,a);i.zoom((s=eo,c=u,Math.max(s.min,Math.min(s.max,c))),t)},to.prototype.toggle=function(e){var t=this._container,n=this._handleWheel,i=this._enabled;return void 0===e&&(e=!i),i!==e&&ce[e?"bind":"unbind"](t,"wheel",n,!1),this._enabled=e,e},to.prototype._init=function(e){this.toggle(e)};const no={__init__:["zoomScroll"],zoomScroll:["type",to]};function io(e){Mr.call(this,e)}r()(io,Mr),io.prototype._navigationModules=[Hr,Kr,no],io.prototype._modules=[].concat(Mr.prototype._modules,io.prototype._navigationModules);var ro=n(840),oo=n.n(ro),ao=["mousedown","mouseup","mouseover","mouseout","click","dblclick"];function so(e,t){return t.get(e,!1)}function co(e){e.preventDefault(),"function"==typeof e.stopPropagation?e.stopPropagation():e.srcEvent&&"function"==typeof e.srcEvent.stopPropagation&&e.srcEvent.stopPropagation(),"function"==typeof e.stopImmediatePropagation&&e.stopImmediatePropagation()}function uo(e){function t(t){setTimeout((function(){b(ao,(function(t){ce.unbind(e,t,co,!0)}))}),500)}ce.bind(e,"touchstart",(function(t){b(ao,(function(t){ce.bind(e,t,co,!0)}))}),!0),ce.bind(e,"touchend",t,!0),ce.bind(e,"touchcancel",t,!0);var n=new(oo().Manager)(e,{inputClass:oo().TouchInput,recognizers:[],domEvents:!0}),i=new(oo().Tap),r=new(oo().Pan)({threshold:10}),o=new(oo().Press),a=new(oo().Pinch),s=new(oo().Tap)({event:"doubletap",taps:2});return a.requireFailure(r),a.requireFailure(o),n.add([r,o,a,s,i]),n.reset=function(e){var t=this.recognizers,i=this.session;i.stopped||(n.stop(e),setTimeout((function(){var e,n;for(e=0;n=t[e];e++)n.reset(),n.state=8;i.curRecognizer=null}),0))},n.on("hammer.input",(function(e){e.srcEvent.defaultPrevented&&n.reset(!0)})),n}function lo(e,t,n,i,r){var o,a=so("dragging",e),s=so("move",e),c=so("contextPad",e),u=so("palette",e);function l(e){return function(t){r.fire(e,t)}}function p(e){return ie(e,"svg, .djs-element",!0)}a&&n.on("drag.move",(function(e){var t=e.originalEvent;if(t&&!(t instanceof MouseEvent)){var n=ir(t),r=p(document.elementFromPoint(n.x,n.y)),o=r&&i.get(r);o!==e.hover&&(e.hover&&a.out(e),o&&(a.hover({element:o,gfx:r}),e.hover=o,e.hoverGfx=r))}})),c&&n.on("contextPad.create",(function(e){var t=uo(e.pad.html);t.on("panstart",(function(e){c.trigger("dragstart",e,!0)})),t.on("press",(function(e){c.trigger("dragstart",e,!0)})),t.on("tap",(function(e){c.trigger("click",e)}))})),u&&n.on("palette.create",(function(e){var t=uo(e.container);t.on("panstart",(function(e){u.trigger("dragstart",e,!0)})),t.on("press",(function(e){u.trigger("dragstart",e,!0)})),t.on("tap",(function(e){u.trigger("click",e)}))})),n.on("canvas.init",(function(e){!function(e){function n(e){var n=p(e.target),r=n&&i.get(n);if(s&&t.getRootElement()!==r)return s.start(e,r,!0);!function(e){var n=0,i=0;function r(e){var r=e.deltaX-n,o=e.deltaY-i;t.scroll({dx:r,dy:o}),n=e.deltaX,i=e.deltaY}function a(e){o.off("panmove",r),o.off("panend",a),o.off("pancancel",a)}o.on("panmove",r),o.on("panend",a),o.on("pancancel",a)}()}(o=uo(e)).on("doubletap",l("element.dblclick")),o.on("tap",l("element.click")),o.on("panstart",n),o.on("press",n),o.on("pinchstart",(function(e){var n=t.zoom(),i=e.center;function r(e){var r=1-(1-e.scale)/1.5,o=Math.max(.2,Math.min(4,r*n));t.zoom(o,i),co(e)}function a(e){o.off("pinchmove",r),o.off("pinchend",a),o.off("pinchcancel",a),o.reset(!0)}o.on("pinchmove",r),o.on("pinchend",a),o.on("pinchcancel",a)}))}(e.svg)}))}function po(e,t){var n=this;t.on("canvas.init",(function(e){n.addBBoxMarker(e.svg)}))}lo.$inject=["injector","canvas","eventBus","elementRegistry","interactionEvents","touchFix"],po.$inject=["canvas","eventBus"],po.prototype.addBBoxMarker=function(e){var t={fill:"none",class:"outer-bound-marker"},n=Ne("rect");be(n,{x:-1e4,y:1e4,width:10,height:10}),be(n,t),xe(e,n);var i=Ne("rect");be(i,{x:1e4,y:1e4,width:10,height:10}),be(i,t),xe(e,i)};const ho={__depends__:[{__depends__:[pr],__init__:["touchInteractionEvents"],touchInteractionEvents:["type",lo],touchFix:["type",po]}]};function fo(e){return e&&e[e.length-1]}function yo(e){return e.y}function vo(e){return e.x}var go={left:vo,center:vo,right:function(e){return e.x+e.width},top:yo,middle:yo,bottom:function(e){return e.y+e.height}};function mo(e){this._modeling=e}mo.$inject=["modeling"],mo.prototype._getOrientationDetails=function(e){var t="x",n="width";return-1!==["top","bottom","middle"].indexOf(e)&&(t="y",n="height"),{axis:t,dimension:n}},mo.prototype._isType=function(e,t){return-1!==t.indexOf(e)},mo.prototype._alignmentPosition=function(e,t){var n,i,r,o=this._getOrientationDetails(e),a=o.axis,s=o.dimension,c={},u={},l=!1;if(this._isType(e,["left","top"]))c[e]=t[0][a];else if(this._isType(e,["right","bottom"]))r=fo(t),c[e]=r[a]+r[s];else if(this._isType(e,["center","middle"])){if(b(t,(function(e){var t=e[a]+Math.round(e[s]/2);u[t]?u[t].elements.push(e):u[t]={elements:[e],center:t}})),n=R(u,(function(e){return e.elements.length>1&&(l=!0),e.elements.length})),l)return c[e]=fo(n).center,c;i=t[0],r=fo(t=R(t,(function(e){return e[a]+e[s]}))),c[e]=function(e,t){return Math.round((e[a]+t[a]+t[s])/2)}(i,r)}return c},mo.prototype.trigger=function(e,t){var n=this._modeling,i=w(e,(function(e){return!(e.waypoints||e.host||e.labelTarget)}));if(!(i.length<2)){var r=R(i,go[t]),o=this._alignmentPosition(t,r);n.alignElements(r,o)}};const xo={__init__:["alignElements"],alignElements:["type",mo]};function _o(e,t,n){var i,r,o=this,a=n.get("dragging",!1);a&&t.on("drag.start",(function(n){t.once("drag.move",1500,(function(t){!function(t){if(!t.hover){var n=t.originalEvent,i=o._findTargetGfx(n),r=i&&e.get(i);i&&r&&(t.stopPropagation(),a.hover({element:r,gfx:i}),a.move(n))}}(t)}))})),t.on("element.hover",(function(e){i=e.gfx,r=e.element})),t.on("element.hover",1500,(function(e){r&&t.fire("element.out",{element:r,gfx:i})})),t.on("element.out",(function(){i=null,r=null})),this._findTargetGfx=function(e){var t;if(e instanceof MouseEvent)return t=ir(e),ie(document.elementFromPoint(t.x,t.y),"svg, .djs-element",!0)}}_o.$inject=["elementRegistry","eventBus","injector"];const wo={__init__:["hoverFix"],hoverFix:["type",_o]};var bo=Math.round,Eo="djs-drag-active";function So(e){e.preventDefault()}function To(e,t,n,i){var r,o={threshold:5,trapClick:!0};function a(e){var n=t.viewbox(),i=t._container.getBoundingClientRect();return{x:n.x+(e.x-i.left)/n.scale,y:n.y+(e.y-i.top)/n.scale}}function s(t,n){n=n||r;var i=e.createEvent(G({},n.payload,n.data,{isTouch:n.isTouch}));return!1!==e.fire("drag."+t,i)&&e.fire(n.prefix+"."+t,i)}function c(e,i){var o,c=r.payload,u=r.displacement,l=r.globalStart,p=ir(e),h=Yr(p,l),d=r.localStart,f=a(p),v=Yr(f,d);if(!r.active&&(i||(o=h,Math.sqrt(Math.pow(o.x,2)+Math.pow(o.y,2))>r.threshold))){if(G(c,{x:bo(d.x+u.x),y:bo(d.y+u.y),dx:0,dy:0},{originalEvent:e}),!1===s("start"))return y();r.active=!0,r.keepSelection||(c.previousSelection=n.get(),n.select(null)),r.cursor&&Ur(r.cursor),t.addMarker(t.getRootElement(),Eo)}nr(e),r.active&&(G(c,{x:bo(f.x+u.x),y:bo(f.y+u.y),dx:bo(v.x),dy:bo(v.y)},{originalEvent:e}),s("move"))}function u(e){var t=!0;r.active&&(e&&(r.payload.originalEvent=e,nr(e)),t=s("end")),!1===t&&s("rejected"),s("ended",v(!0!==t))}function l(e){27===e.which&&(So(e),y())}function p(t){var n;r.active&&(n=Vr(e),setTimeout(n,400),So(t)),u(t)}function h(e){c(e)}function d(e){var t=r.payload;t.hoverGfx=e.gfx,t.hover=e.element,s("hover")}function f(e){s("out");var t=r.payload;t.hoverGfx=null,t.hover=null}function y(e){var t;if(r){var n=r.active;n&&s("cancel"),t=v(e),n&&s("canceled",t)}}function v(o){var a,v;s("cleanup"),Wr(),v=r.trapClick?p:u,ce.unbind(document,"mousemove",c),ce.unbind(document,"dragstart",So),ce.unbind(document,"selectstart",So),ce.unbind(document,"mousedown",v,!0),ce.unbind(document,"mouseup",v,!0),ce.unbind(document,"keyup",l),ce.unbind(document,"touchstart",h,!0),ce.unbind(document,"touchcancel",y,!0),ce.unbind(document,"touchmove",c,!0),ce.unbind(document,"touchend",u,!0),e.off("element.hover",d),e.off("element.out",f),t.removeMarker(t.getRootElement(),Eo);var g=r.payload.previousSelection;return!1!==o&&g&&!n.get().length&&function(e){var t=e.filter((function(e){return i.get(e.id)}));t.length&&n.select(t)}(g),a=r,r=null,a}e.on("diagram.destroy",y),this.init=function(t,n,i,v){r&&y(!1),"string"==typeof n&&(v=i,i=n,n=null);var g,m,x,_,w,b=(v=G({},o,v||{})).data||{};_=v.trapClick?p:u,t?(g=tr(t)||t,m=ir(t),nr(t),"dragstart"===g.type&&So(g)):(g=null,m={x:0,y:0}),x=a(m),n||(n=x),w=function(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}(g),r=G({prefix:i,data:b,payload:{},globalStart:m,displacement:Yr(n,x),localStart:x,isTouch:w},v),v.manual||(w?(ce.bind(document,"touchstart",h,!0),ce.bind(document,"touchcancel",y,!0),ce.bind(document,"touchmove",c,!0),ce.bind(document,"touchend",u,!0)):(ce.bind(document,"mousemove",c),ce.bind(document,"dragstart",So),ce.bind(document,"selectstart",So),ce.bind(document,"mousedown",_,!0),ce.bind(document,"mouseup",_,!0)),ce.bind(document,"keyup",l),e.on("element.hover",d),e.on("element.out",f)),s("init"),v.autoActivate&&c(t,!0)},this.move=c,this.hover=d,this.out=f,this.end=u,this.cancel=y,this.context=function(){return r},this.setOptions=function(e){G(o,e)}}To.$inject=["eventBus","canvas","selection","elementRegistry"];const ko={__depends__:[wo,_r],dragging:["type",To]};function Co(e,t,n){this._canvas=n,this._opts=G({scrollThresholdIn:[20,20,20,20],scrollThresholdOut:[0,0,0,0],scrollRepeatTimeout:15,scrollStep:10},e);var i=this;t.on("drag.move",(function(e){var t=i._toBorderPoint(e);i.startScroll(t)})),t.on(["drag.cleanup"],(function(){i.stopScroll()}))}Co.$inject=["config.autoScroll","eventBus","canvas"],Co.prototype.startScroll=function(e){var t,n,i,r=this._canvas,o=this._opts,a=this,s=r.getContainer().getBoundingClientRect(),c=[e.x,e.y,s.width-e.x,s.height-e.y];this.stopScroll();for(var u=0,l=0,p=0;p<4;p++)t=c[p],n=o.scrollThresholdOut[p],i=o.scrollThresholdIn[p],n<t&&t<i&&(0===p?u=o.scrollStep:1==p?l=o.scrollStep:2==p?u=-o.scrollStep:3==p&&(l=-o.scrollStep));0===u&&0===l||(r.scroll({dx:u,dy:l}),this._scrolling=setTimeout((function(){a.startScroll(e)}),o.scrollRepeatTimeout))},Co.prototype.stopScroll=function(){clearTimeout(this._scrolling)},Co.prototype.setOptions=function(e){this._opts=G({},this._opts,e)},Co.prototype._toBorderPoint=function(e){var t=this._canvas._container.getBoundingClientRect(),n=ir(e.originalEvent);return{x:n.x-t.left,y:n.y-t.top}};const Mo={__depends__:[ko],__init__:["autoScroll"],autoScroll:["type",Co]};function Po(e){this._commandStack=e.get("commandStack",!1)}Po.$inject=["injector"],Po.prototype.allowed=function(e,t){var n=!0,i=this._commandStack;return i&&(n=i.canExecute(e,t)),void 0===n||n};const jo={__init__:["rules"],rules:["type",Po]};function Bo(e,t){return e&&t?Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):-1}function Ao(e,t,n,i){if(void 0===i&&(i=5),!e||!t||!n)return!1;var r=(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x),o=Bo(e,t);return Math.abs(r/o)<=i}function Ro(e,t){var n;return function(e,t){var n,i=(n=f(e)?e:[e,void 0]).slice().shift();return S(n,(function(e){return Math.abs(i.y-e.y)<=2}))}(n=f(e)?e:[e,t])?"h":!!function(e,t){var n,i=(n=f(e)?e:[e,void 0]).slice().shift();return S(n,(function(e){return Math.abs(i.x-e.x)<=2}))}(n)&&"v"}function Oo(e,t){return{x:Math.round(e.x+(t.x-e.x)/2),y:Math.round(e.y+(t.y-e.y)/2)}}var No=n(720),Lo=n.n(No),zo=Math.round,Do=Math.max;function Io(e,t,n){return function(e,t){return function(e,t){var n,i;for(n=0;i=e[n];n++)if(Bo(i,t)<=10)return{point:e[n],bendpoint:!0,index:n};return null}(e,t)||function(e,t){var n,i,r=Lo()(function(e,t){return[["M",e.x,e.y],["m",0,-t],["a",t,t,0,1,1,0,20],["a",t,t,0,1,1,0,-20],["z"]]}(t,10),(n=[],e.forEach((function(e,t){n.push([0===t?"M":"L",e.x,e.y])})),n)),o=r[0],a=r[r.length-1];return o?o!==a?o.segment2!==a.segment2?{point:e[i=Do(o.segment2,a.segment2)-1],bendpoint:!0,index:i}:{point:{x:zo(o.x+a.x)/2,y:zo(o.y+a.y)/2},index:o.segment2}:{point:{x:zo(o.x),y:zo(o.y)},index:o.segment2}:null}(e,t)}(t,function(e,t){var n,i=ir(t),r=e._container.getBoundingClientRect();n={x:r.left,y:r.top};var o=e.viewbox();return{x:o.x+(i.x-n.x)/o.scale,y:o.y+(i.y-n.y)/o.scale}}(e,n))}function $o(e,t){var n=Ne("g");Ce(n).add("djs-bendpoint"),xe(e,n);var i=Ne("circle");be(i,{cx:0,cy:0,r:4}),Ce(i).add("djs-visual"),xe(n,i);var r=Ne("circle");return be(r,{cx:0,cy:0,r:10}),Ce(r).add("djs-hit"),xe(n,r),t&&Ce(n).add(t),n}function Fo(e,t,n){var i=Ne("g"),r=Oo(t,n),o=Ro(t,n);return xe(e,i),function(e,t,n,i){var r=Ne("g");xe(e,r);var o=function(e,t,n){var i=t.x-e.x,r=t.y-e.y;return Ho("h"===n?i:r)}(t,n,i),a=Ne("rect");be(a,{x:-7,y:-1.5,width:14,height:3}),Ce(a).add("djs-visual"),xe(r,a);var s,c,u,l=Ne("rect");be(l,{x:-o/2,y:-7,width:o,height:14}),Ce(l).add("djs-hit"),xe(r,l),s=r,c="v"===i?90:0,(u=De()).setRotate(c,0,0),Ve(s,u)}(i,t,n,o),Ce(i).add("djs-segment-dragger"),Ce(i).add("h"===o?"horizontal":"vertical"),qt(i,r.x,r.y),i}function Ho(e){return Math.abs(Math.round(2*e/3))}var Go=n(269),Uo=n.n(Go);function Wo(e,t,n,i,r){function o(e,t,i){ce.bind(e,t,(function(e){n.triggerMouseEvent(t,e,i),e.stopPropagation()}))}function a(e,n){var i=t.getLayer("overlays"),r=ye('.djs-bendpoints[data-element-id="'+Uo()(e.id)+'"]',i);return!r&&n&&(be(r=Ne("g"),{"data-element-id":e.id}),Ce(r).add("djs-bendpoints"),xe(i,r),o(r,"mousedown",e),o(r,"click",e),o(r,"dblclick",e)),r}function s(e,t){return ye('.djs-segment-dragger[data-segment-idx="'+e+'"]',t)}function c(e,t){t.waypoints.forEach((function(t,n){var i=$o(e);xe(e,i),qt(i,t.x,t.y)})),$o(e,"floating")}function u(e,t){for(var n,i,r,a=t.waypoints,s=1;s<a.length;s++)Ro(n=a[s-1],i=a[s])&&(be(r=Fo(e,n,i),{"data-segment-idx":s}),o(r,"mousemove",t))}function l(e){var t=a(e);return t||(c(t=a(e,!0),e),u(t,e)),t}function p(e){var t=a(e);t&&(function(e){b(ve(".djs-segment-dragger",e),(function(e){Pe(e)}))}(t),function(e){b(ve(".djs-bendpoint",e),(function(e){Pe(e)}))}(t),u(t,e),c(t,e))}e.on("connection.changed",(function(e){p(e.element)})),e.on("connection.remove",(function(e){var t=a(e.element);t&&Pe(t)})),e.on("element.marker.update",(function(e){var t,n=e.element;n.waypoints&&(t=l(n),e.add?Ce(t).add(e.marker):Ce(t).remove(e.marker))})),e.on("element.mousemove",(function(e){var n,i,r=e.element,o=r.waypoints;if(o){if(n=a(r,!0),!(i=Io(t,o,e.originalEvent)))return;!function(e,t){var n=ye(".floating",e),i=t.point;n&&qt(n,i.x,i.y)}(n,i),i.bendpoint||function(e,t,n){var i,r,o=s(t.index,e),a=n[t.index-1],c=n[t.index],u=t.point,l=Oo(a,c),p=Ro(a,c);o&&(i=function(e){return ye(".djs-visual",e)}(o),r={x:u.x-l.x,y:u.y-l.y},"v"===p&&(r={x:r.y,y:r.x}),qt(i,r.x,r.y))}(n,i,o)}})),e.on("element.mousedown",(function(e){if(or(e)){var n=e.originalEvent,o=e.element;if(o.waypoints)return function(e,n){var o=n.waypoints,a=Io(t,o,e);if(a)return function(e,t,n){var i,r,o,a,s,c,u=e.index,l=e.point;return!(u<=0||e.bendpoint)&&(o=Oo(i=t[u-1],r=t[u]),a=Ro(i,r),s=Math.abs(l.x-o.x),c=Math.abs(l.y-o.y),a&&s<=n&&c<=n)}(a,o,function(e,t){var n,i,r=e.waypoints;return t.index<=0||t.bendpoint?null:(i=Ro((n={start:r[t.index-1],end:r[t.index]}).start,n.end))?Ho("h"===i?n.end.x-n.start.x:n.end.y-n.start.y)/2:null}(n,a))?r.start(e,n,a.index):i.start(e,n,a.index,!a.bendpoint),!0}(n,o)}})),e.on("selection.changed",(function(e){var t=e.newSelection[0];t&&t.waypoints&&l(t)})),e.on("element.hover",(function(e){var t=e.element;t.waypoints&&(l(t),n.registerEvent(e.gfx,"mousemove","element.mousemove"))})),e.on("element.out",(function(e){n.unregisterEvent(e.gfx,"mousemove","element.mousemove")})),e.on("element.updateId",(function(e){var t=e.element,n=e.newId;if(t.waypoints){var i=a(t);i&&be(i,{"data-element-id":n})}})),this.addHandles=l,this.updateHandles=p,this.getBendpointsContainer=a,this.getSegmentDragger=s}function Vo(e){return{x:Math.round(e.x),y:Math.round(e.y)}}function qo(e){return{top:e.y,right:e.x+(e.width||0),bottom:e.y+(e.height||0),left:e.x}}function Yo(e){return{x:e.left,y:e.top,width:e.right-e.left,height:e.bottom-e.top}}function Xo(e){return Vo({x:e.x+(e.width||0)/2,y:e.y+(e.height||0)/2})}function Ko(e,t,n){y(n=n||0)||(n={x:n,y:n});var i=qo(e),r=qo(t),o=i.bottom+n.y<=r.top,a=i.left-n.x>=r.right,s=i.top-n.y>=r.bottom,c=o?"top":s?"bottom":null,u=i.right+n.x<=r.left?"left":a?"right":null;return u&&c?c+"-"+u:u||c||"intersect"}function Zo(e,t,n){var i,r,o=(i=e,r=t,Lo()(i,r));return 1===o.length||2===o.length&&Bo(o[0],o[1])<1?Vo(o[0]):o.length>1?Vo((o=R(o,(function(e){var t=Math.floor(100*e.t2)||1;return t=((t=100-t)<10?"0":"")+t,e.segment2+"#"+t})))[n?0:o.length-1]):null}Wo.$inject=["eventBus","canvas","interactionEvents","bendpointMove","connectionSegmentMove"];var Jo=Math.round,Qo="reconnectStart",ea="reconnectEnd",ta="updateWaypoints";function na(e,t,n,i,r,o){this._injector=e,this.start=function(e,t,o,a){var s,c=n.getGraphics(t),u=t.source,l=t.target,p=t.waypoints,h=(s=a||0!==o?a||o!==p.length-1?ta:ea:Qo)===ta?"connection.updateWaypoints":"connection.reconnect",d=r.allowed(h,{connection:t,source:u,target:l});!1===d&&(d=r.allowed(h,{connection:t,source:l,target:u})),!1!==d&&i.init(e,"bendpoint.move",{data:{connection:t,connectionGfx:c,context:{allowed:d,bendpointIndex:o,connection:t,source:u,target:l,insert:a,type:s}}})},t.on("bendpoint.move.hover",(function(e){var t,n=e.context,i=n.connection,o=i.source,a=i.target,s=e.hover,c=n.type;if(n.hover=s,s){var u=c===ta?"connection.updateWaypoints":"connection.reconnect";if(t=n.allowed=r.allowed(u,{connection:i,source:c===Qo?s:o,target:c===ea?s:a}))return n.source=c===Qo?s:o,void(n.target=c===ea?s:a);!1===t&&(t=n.allowed=r.allowed(u,{connection:i,source:c===ea?s:a,target:c===Qo?s:o})),t&&(n.source=c===ea?s:a,n.target=c===Qo?s:o)}})),t.on(["bendpoint.move.out","bendpoint.move.cleanup"],(function(e){var t=e.context,n=t.type;t.hover=null,t.source=null,t.target=null,n!==ta&&(t.allowed=!1)})),t.on("bendpoint.move.end",(function(e){var t=e.context,n=t.allowed,i=t.bendpointIndex,r=t.connection,a=t.insert,s=r.waypoints.slice(),c=t.source,u=t.target,l=t.type,p=t.hints||{},h={x:Jo(e.x),y:Jo(e.y)};if(!n)return!1;l===ta?(a?s.splice(i,0,h):s[i]=h,p.bendpointMove={insert:a,bendpointIndex:i},s=this.cropWaypoints(r,s),o.updateWaypoints(r,function(e){e=e.slice();for(var t,n,i,r=0;e[r];)t=e[r],n=e[r-1],0===Bo(t,i=e[r+1])||Ao(n,i,t)?e.splice(r,1):r++;return e}(s),p)):(l===Qo?(p.docking="source",ia(t)&&(p.docking="target",p.newWaypoints=s.reverse())):l===ea&&(p.docking="target",ia(t)&&(p.docking="source",p.newWaypoints=s.reverse())),o.reconnect(r,c,u,h,p))}),this)}function ia(e){var t=e.hover,n=e.source,i=e.target,r=e.type;return r===Qo?t&&i&&t===i&&n!==i:r===ea?t&&n&&t===n&&n!==i:void 0}na.$inject=["injector","eventBus","canvas","dragging","rules","modeling"],na.prototype.cropWaypoints=function(e,t){var n=this._injector.get("connectionDocking",!1);if(!n)return t;var i=e.waypoints;return e.waypoints=t,e.waypoints=n.getCroppedWaypoints(e),t=e.waypoints,e.waypoints=i,t};var ra="updateWaypoints",oa="connect-ok",aa="connect-not-ok",sa="connect-hover",ca="djs-updating",ua="djs-element-hidden";function la(e,t,n,i){this._injector=t;var r=t.get("connectionPreview",!1);n.on("bendpoint.move.start",(function(e){var t=e.context,n=t.bendpointIndex,r=t.connection,o=t.insert,a=r.waypoints,s=a.slice();t.waypoints=a,o&&s.splice(n,0,{x:e.x,y:e.y}),r.waypoints=s,Ce(t.draggerGfx=$o(i.getLayer("overlays"))).add("djs-dragging"),i.addMarker(r,ua),i.addMarker(r,ca)})),n.on("bendpoint.move.hover",(function(e){var t=e.context,n=t.allowed,r=t.hover,o=t.type;if(r){if(i.addMarker(r,sa),o===ra)return;n?(i.removeMarker(r,aa),i.addMarker(r,oa)):!1===n&&(i.removeMarker(r,oa),i.addMarker(r,aa))}})),n.on(["bendpoint.move.out","bendpoint.move.cleanup"],1100,(function(e){var t=e.context,n=t.hover,r=t.target;n&&(i.removeMarker(n,sa),i.removeMarker(n,r?oa:aa))})),n.on("bendpoint.move.move",(function(t){var n=t.context,i=n.allowed,o=n.bendpointIndex,a=n.draggerGfx,s=n.hover,c=n.type,u=n.connection,l=u.source,p=u.target,h=u.waypoints.slice(),d={x:t.x,y:t.y},f=n.hints||{},y={};r&&(f.connectionStart&&(y.connectionStart=f.connectionStart),f.connectionEnd&&(y.connectionEnd=f.connectionEnd),"reconnectStart"===c?ia(n)?(y.connectionEnd=y.connectionEnd||d,y.source=p,y.target=s||l,h=h.reverse()):(y.connectionStart=y.connectionStart||d,y.source=s||l,y.target=p):"reconnectEnd"===c?ia(n)?(y.connectionStart=y.connectionStart||d,y.source=s||p,y.target=l,h=h.reverse()):(y.connectionEnd=y.connectionEnd||d,y.source=l,y.target=s||p):(y.noCropping=!0,y.noLayout=!0,h[o]=d),c===ra&&(h=e.cropWaypoints(u,h)),y.waypoints=h,r.drawPreview(n,i,y)),qt(a,t.x,t.y)}),this),n.on(["bendpoint.move.end","bendpoint.move.cancel"],1100,(function(e){var t=e.context,n=t.connection,o=t.draggerGfx,a=t.hover,s=t.target,c=t.waypoints;n.waypoints=c,Pe(o),i.removeMarker(n,ca),i.removeMarker(n,ua),a&&(i.removeMarker(a,oa),i.removeMarker(a,s?oa:aa)),r&&r.cleanUp(t)}))}la.$inject=["bendpointMove","injector","eventBus","canvas"];var pa="connect-hover",ha="djs-updating";function da(e,t,n){return fa(e,t,e[t]+n)}function fa(e,t,n){return{x:"x"===t?n:e.x,y:"y"===t?n:e.y}}function ya(e){return"x"===e?"y":"x"}function va(e,t,n){var i,r;return e.original?e.original:(i=Xo(t),fa(e,r=ya(n),i[r]))}function ga(e,t,n,i,r,o){var a=e.get("connectionDocking",!1);function s(e,t){if(!a)return t;var n,i=e.waypoints;return e.waypoints=t,n=a.getCroppedWaypoints(e),e.waypoints=i,n}function c(e){r.update("connection",e.connection,e.connectionGfx)}this.start=function(e,t,r){var o,a,s,c,u=n.getGraphics(t),l=r-1,p=r,h=t.waypoints,d=h[l],f=h[p],y=Io(n,h,e);(a=Ro(d,f))&&(s="v"===a?"x":"y",0===l&&(d=va(d,t.source,s)),p===h.length-1&&(f=va(f,t.target,s)),o={connection:t,segmentStartIndex:l,segmentEndIndex:p,segmentStart:d,segmentEnd:f,axis:s,dragPosition:c=y?y.point:{x:(d.x+f.x)/2,y:(d.y+f.y)/2}},i.init(e,c,"connectionSegment.move",{cursor:"x"===s?"resize-ew":"resize-ns",data:{connection:t,connectionGfx:u,context:o}}))},t.on("connectionSegment.move.start",(function(e){var t=e.context,i=e.connection,r=n.getLayer("overlays");t.originalWaypoints=i.waypoints.slice(),t.draggerGfx=Fo(r,t.segmentStart,t.segmentEnd),Ce(t.draggerGfx).add("djs-dragging"),n.addMarker(i,ha)})),t.on("connectionSegment.move.move",(function(e){var t,n,i=e.context,r=i.connection,o=i.segmentStartIndex,a=i.segmentEndIndex,u=i.segmentStart,l=i.segmentEnd,p=i.axis,h=i.originalWaypoints.slice(),d=da(u,p,e["d"+p]),f=da(l,p,e["d"+p]),y=h.length,v=0;h[o]=d,h[a]=f,o<2&&(t=Ko(r.source,d),1===o?"intersect"===t&&(h.shift(),h[0]=d,v--):"intersect"!==t&&(h.unshift(u),v++)),a>y-3&&(n=Ko(r.target,f),a===y-2?"intersect"===n&&(h.pop(),h[h.length-1]=f):"intersect"!==n&&h.push(l)),i.newWaypoints=r.waypoints=s(r,h),function(e,t,n){var i,r,o,a,s,c,u=e.newWaypoints,l=(i=n,r=u[e.segmentStartIndex+t],o=u[e.segmentEndIndex+t],a=ya(e.axis),s=Math.max(r[a],o[a]),c=Math.min(r[a],o[a]),fa(r,a,Math.min(Math.max(c+20,i[a]),s-20)));qt(e.draggerGfx,l.x,l.y)}(i,v,e),i.newSegmentStartIndex=o+v,c(e)})),t.on("connectionSegment.move.hover",(function(e){e.context.hover=e.hover,n.addMarker(e.hover,pa)})),t.on(["connectionSegment.move.out","connectionSegment.move.cleanup"],(function(e){var t=e.context.hover;t&&n.removeMarker(t,pa)})),t.on("connectionSegment.move.cleanup",(function(e){var t=e.context,i=t.connection;t.draggerGfx&&Pe(t.draggerGfx),n.removeMarker(i,ha)})),t.on(["connectionSegment.move.cancel","connectionSegment.move.end"],(function(e){var t=e.context;t.connection.waypoints=t.originalWaypoints,c(e)})),t.on("connectionSegment.move.end",(function(e){var t=e.context,n=t.connection,i=t.newWaypoints,r=t.newSegmentStartIndex,a=function(e,t){var n=0;return{waypoints:e.filter((function(i,r){return!Ao(e[r-1],e[r+1],i)||(n=r<=t?n-1:n,!1)})),segmentOffset:n}}(i=i.map((function(e){return{original:e.original,x:Math.round(e.x),y:Math.round(e.y)}})),r),c=s(n,a.waypoints),u=a.segmentOffset,l={segmentMove:{segmentStartIndex:t.segmentStartIndex,newSegmentStartIndex:r+u}};o.updateWaypoints(n,c,l)}))}ga.$inject=["injector","eventBus","canvas","dragging","graphicsFactory","modeling"];var ma=Math.abs,xa=Math.round;function _a(e,t){return!e||isNaN(e.x)||isNaN(e.y)?t:{x:xa(e.x+e.width/2),y:xa(e.y+e.height/2)}}function wa(e,t){var n=e.snapped;return!!n&&("string"==typeof t?n[t]:n.x&&n.y)}function ba(e,t,n){if("string"!=typeof t)throw new Error("axis must be in [x, y]");if("number"!=typeof n&&!1!==n)throw new Error("value must be Number or false");var i,r=e[t],o=e.snapped=e.snapped||{};return!1===n?o[t]=!1:(o[t]=!0,i=n-r,e[t]+=i,e["d"+t]+=i),r}function Ea(e){return e.children||[]}var Sa=Math.abs,Ta=Math.round;function ka(e){function t(e,t){if(f(e)){for(var n=e.length;n--;)if(Sa(e[n]-t)<=10)return e[n]}else{var i=t%(e=+e);if(i<10)return t-i;if(i>e-10)return t-i+e}return t}function n(e){if(e.width)return{x:Ta(e.width/2+e.x),y:Ta(e.height/2+e.y)}}e.on("connectionSegment.move.move",1500,(function(e){var i,r,o=function(e){var t=e.snapPoints,i=e.connection,r=i.waypoints,o=e.segmentStart,a=e.segmentStartIndex,s=e.segmentEnd,c=e.segmentEndIndex,u=e.axis;if(t)return t;var l=[r[a-1],o,s,r[c+1]];return a<2&&l.unshift(n(i.source)),c>r.length-3&&l.unshift(n(i.target)),e.snapPoints=t={horizontal:[],vertical:[]},b(l,(function(e){e&&(e=e.original||e,"y"===u&&t.horizontal.push(e.y),"x"===u&&t.vertical.push(e.x))})),t}(e.context),a=e.x,s=e.y;if(o){var c=a-(i=t(o.vertical,a)),u=s-(r=t(o.horizontal,s));G(e,{dx:e.dx-c,dy:e.dy-u,x:i,y:r}),(c||-1!==o.vertical.indexOf(a))&&ba(e,"x",i),(u||-1!==o.horizontal.indexOf(s))&&ba(e,"y",r)}})),e.on(["bendpoint.move.move","bendpoint.move.end"],1500,(function(e){var i,r,o=e.context,a=function(e){var t=e.snapPoints,n=e.connection.waypoints,i=e.bendpointIndex;if(t)return t;var r=[n[i-1],n[i+1]];return e.snapPoints=t={horizontal:[],vertical:[]},b(r,(function(e){e&&(e=e.original||e,t.horizontal.push(e.y),t.vertical.push(e.x))})),t}(o),s=o.hover,c=s&&n(s),u=e.x,l=e.y;if(a){var p=u-(i=t(c?a.vertical.concat([c.x]):a.vertical,u)),h=l-(r=t(c?a.horizontal.concat([c.y]):a.horizontal,l));G(e,{dx:e.dx-p,dy:e.dy-h,x:e.x-p,y:e.y-h}),(p||-1!==a.vertical.indexOf(u))&&ba(e,"x",i),(h||-1!==a.horizontal.indexOf(l))&&ba(e,"y",r)}}))}ka.$inject=["eventBus"];const Ca={__depends__:[ko,jo],__init__:["bendpoints","bendpointSnapping","bendpointMovePreview"],bendpoints:["type",Wo],bendpointMove:["type",na],bendpointMovePreview:["type",la],connectionSegmentMove:["type",ga],bendpointSnapping:["type",ka]},Ma={YELLOW:"#FFFF88",GREEN:"#7EC845",PINK:"#F46F60",ICE_BLUE:"#B8D6F7",BLUE:"#23BFE7",ORANGE:"#FF9D48",BLACK:"black"};var Pa={type:"postit:SquarePostit",color:Ma.YELLOW,$instanceOf:function(){return!0}};function ja(e,t,n,i,r){var o=Pa;e.on("canvas.init",(function(a){var s=a.svg;a.viewport.innerHTML='<filter id="noteDropShadow" style="height: 130%;"><feGaussianBlur in="SourceAlpha" stdDeviation="3"></feGaussianBlur><feOffset dx="1" dy="2" result="offsetblur"></feOffset><feMerge><feMergeNode></feMergeNode><feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter>',le(s,"svg","dblclick",(function(e){e.target===s&&function(e){var a,s=function(e){var t=ir(e);return{x:t.x,y:t.y}}(e),c=t.createPostitElement("shape",G(o,s)),u=n.getRootElement();Si(a=r.createShape(c,s,u),["postit:Postit","postit:Group","postit:TextBox"])&&i.activate(a)}(e)})),e.on("create.end",(function(e){!function(e){if(e){var t=Ei(e);o={type:e.type,color:e.color||t.color,$instanceOf:function(e){return"function"==typeof t.$instanceOf&&t.$instanceOf(e)}}}else o=Pa}(e.shape)}))}))}ja.prototype.$inject=["eventBus","elementFactory","canvas","directEditing","modeling"];var Ba=Math.min,Aa=Math.max;function Ra(e){e.preventDefault()}function Oa(e){e.stopPropagation()}function Na(e){this.container=e.container,this.parent=he('<div class="djs-direct-editing-parent"><div class="djs-direct-editing-content" contenteditable="true"></div></div>'),this.content=ye("[contenteditable]",this.parent),this.keyHandler=e.keyHandler||function(){},this.resizeHandler=e.resizeHandler||function(){},this.autoResize=F(this.autoResize,this),this.handlePaste=F(this.handlePaste,this)}function La(e,t){this._eventBus=e,this._providers=[],this._textbox=new Na({container:t.getContainer(),keyHandler:F(this._handleKey,this),resizeHandler:F(this._handleResize,this)})}Na.prototype.create=function(e,t,n,i){var r=this.parent,o=this.content,a=this.container;i=this.options=i||{};var s=U(t=this.style=t||{},["width","height","maxWidth","maxHeight","minWidth","minHeight","left","top","backgroundColor","position","overflow","border","wordWrap","textAlign","outline","transform"]);G(r.style,{width:e.width+"px",height:e.height+"px",maxWidth:e.maxWidth+"px",maxHeight:e.maxHeight+"px",minWidth:e.minWidth+"px",minHeight:e.minHeight+"px",left:e.x+"px",top:e.y+"px",backgroundColor:"#ffffff",position:"absolute",overflow:"visible",border:"1px solid #ccc",boxSizing:"border-box",wordWrap:"normal",textAlign:"center",outline:"none"},s);var c=U(t,["fontFamily","fontSize","fontWeight","lineHeight","padding","paddingTop","paddingRight","paddingBottom","paddingLeft"]);return G(o.style,{boxSizing:"border-box",width:"100%",outline:"none",wordWrap:"break-word"},c),i.centerVertically&&G(o.style,{position:"absolute",top:"50%",transform:"translate(0, -50%)"},c),o.innerText=n,ce.bind(o,"keydown",this.keyHandler),ce.bind(o,"mousedown",Oa),ce.bind(o,"paste",this.handlePaste),i.autoResize&&ce.bind(o,"input",this.autoResize),i.resizable&&this.resizable(t),a.appendChild(r),this.setSelection(o.lastChild,o.lastChild&&o.lastChild.length),r},Na.prototype.handlePaste=function(e){var t,n=this.options,i=this.style;if(e.preventDefault(),t=e.clipboardData?e.clipboardData.getData("text/plain"):window.clipboardData.getData("Text"),this.insertText(t),n.autoResize){var r=this.autoResize(i);r&&this.resizeHandler(r)}},Na.prototype.insertText=function(e){document.execCommand("insertText",!1,e)||this._insertTextIE(e)},Na.prototype._insertTextIE=function(e){var t,n,i,r=this.getSelection(),o=r.startContainer,a=r.endContainer,s=r.startOffset,c=r.endOffset,u=r.commonAncestorContainer,l=(t=u.childNodes,[].slice.call(t));if(function(e){return e.nodeType===Node.TEXT_NODE}(u)){var p=o.textContent;o.textContent=p.substring(0,s)+e+p.substring(c),n=o,i=s+e.length}else if(o===this.content&&a===this.content){var h=document.createTextNode(e);this.content.insertBefore(h,l[s]),n=h,i=h.textContent.length}else{var d=l.indexOf(o),f=l.indexOf(a);l.forEach((function(t,n){n===d?t.textContent=o.textContent.substring(0,s)+e+a.textContent.substring(c):n>d&&n<=f&&ge(t)})),n=o,i=s+e.length}n&&void 0!==i&&setTimeout((function(){self.setSelection(n,i)}))},Na.prototype.autoResize=function(){var e=this.parent,t=this.content,n=parseInt(this.style.fontSize)||12;if(t.scrollHeight>e.offsetHeight||t.scrollHeight<e.offsetHeight-n){var i=e.getBoundingClientRect(),r=t.scrollHeight;e.style.height=r+"px",this.resizeHandler({width:i.width,height:i.height,dx:0,dy:r-i.height})}},Na.prototype.resizable=function(){var e=this,t=this.parent,n=this.resizeHandle,i=parseInt(this.style.minWidth)||0,r=parseInt(this.style.minHeight)||0,o=parseInt(this.style.maxWidth)||1/0,a=parseInt(this.style.maxHeight)||1/0;if(!n){var s,c,u,l;n=this.resizeHandle=he('<div class="djs-direct-editing-resize-handle"></div>');var p=function(n){Ra(n),Oa(n);var p=Ba(Aa(u+n.clientX-s,i),o),h=Ba(Aa(l+n.clientY-c,r),a);t.style.width=p+"px",t.style.height=h+"px",e.resizeHandler({width:u,height:l,dx:n.clientX-s,dy:n.clientY-c})},h=function(e){Ra(e),Oa(e),ce.unbind(document,"mousemove",p,!1),ce.unbind(document,"mouseup",h,!1)};ce.bind(n,"mousedown",(function(e){Ra(e),Oa(e),s=e.clientX,c=e.clientY;var n=t.getBoundingClientRect();u=n.width,l=n.height,ce.bind(document,"mousemove",p),ce.bind(document,"mouseup",h)}))}G(n.style,{position:"absolute",bottom:"0px",right:"0px",cursor:"nwse-resize",width:"0",height:"0",borderTop:(parseInt(this.style.fontSize)/4||3)+"px solid transparent",borderRight:(parseInt(this.style.fontSize)/4||3)+"px solid #ccc",borderBottom:(parseInt(this.style.fontSize)/4||3)+"px solid #ccc",borderLeft:(parseInt(this.style.fontSize)/4||3)+"px solid transparent"}),t.appendChild(n)},Na.prototype.destroy=function(){var e=this.parent,t=this.content,n=this.resizeHandle;t.innerText="",e.removeAttribute("style"),t.removeAttribute("style"),ce.unbind(t,"keydown",this.keyHandler),ce.unbind(t,"mousedown",Oa),ce.unbind(t,"input",this.autoResize),ce.unbind(t,"paste",this.handlePaste),n&&(n.removeAttribute("style"),ge(n)),ge(e)},Na.prototype.getValue=function(){return this.content.innerText.trim()},Na.prototype.getSelection=function(){return window.getSelection().getRangeAt(0)},Na.prototype.setSelection=function(e,t){var n=document.createRange();null===e?n.selectNodeContents(this.content):(n.setStart(e,t),n.setEnd(e,t));var i=window.getSelection();i.removeAllRanges(),i.addRange(n)},La.$inject=["eventBus","canvas"],La.prototype.registerProvider=function(e){this._providers.push(e)},La.prototype.isActive=function(){return!!this._active},La.prototype.cancel=function(){this._active&&(this._fire("cancel"),this.close())},La.prototype._fire=function(e,t){this._eventBus.fire("directEditing."+e,t||{active:this._active})},La.prototype.close=function(){this._textbox.destroy(),this._fire("deactivate"),this._active=null,this.resizable=void 0},La.prototype.complete=function(){var e=this._active;if(e){var t,n=e.context.bounds,i=this.$textbox.getBoundingClientRect(),r=this.getValue();r===e.context.text&&i.height===n.height&&i.width===n.width||(t=this._textbox.container.getBoundingClientRect(),e.provider.update(e.element,r,e.context.text,{x:i.left-t.left,y:i.top-t.top,width:i.width,height:i.height})),this._fire("complete"),this.close()}},La.prototype.getValue=function(){return this._textbox.getValue()},La.prototype._handleKey=function(e){e.stopPropagation();var t=e.keyCode||e.charCode;return 27===t?(e.preventDefault(),this.cancel()):13!==t||e.shiftKey?void 0:(e.preventDefault(),this.complete())},La.prototype._handleResize=function(e){this._fire("resize",e)},La.prototype.activate=function(e){var t;this.isActive()&&this.cancel();var n=_(this._providers,(function(n){return(t=n.activate(e))?n:null}));return t&&(this.$textbox=this._textbox.create(t.bounds,t.style,t.text,t.options),this._active={element:e,context:t,provider:n},t.options&&t.options.resizable&&(this.resizable=!0),this._fire("activate")),!!t};const za={__depends__:[pr],__init__:["directEditing"],directEditing:["type",La]},Da={__depends__:[za],__init__:["canvasCreate"],canvasCreate:["type",ja]};function Ia(e,t,n,i){function r(e,t){return i.allowed("connection.create",{source:e,target:t})}e.on("connect.hover",(function(e){var t,n=e.context,i=n.start,o=e.hover;if(n.hover=o,!d(t=n.canExecute=r(i,o))){if(!1!==t)return n.source=i,void(n.target=o);d(t=n.canExecute=r(o,i))||!1!==t&&(n.source=o,n.target=i)}})),e.on(["connect.out","connect.cleanup"],(function(e){var t=e.context;t.hover=null,t.source=null,t.target=null,t.canExecute=!1})),e.on("connect.end",(function(e){var t=e.context,i=t.canExecute,r=t.connectionStart,o={x:e.x,y:e.y},a=t.source,s=t.target;if(!i)return!1;var c=null,u={connectionStart:$a(t)?o:r,connectionEnd:$a(t)?r:o};y(i)&&(c=i),n.connect(a,s,c,u)})),this.start=function(e,n,i,r){y(i)||(r=i,i=Xo(n)),t.init(e,"connect",{autoActivate:r,data:{shape:n,context:{start:n,connectionStart:i}}})}}function $a(e){var t=e.hover,n=e.source,i=e.target;return t&&n&&t===n&&n!==i}Ia.$inject=["eventBus","dragging","modeling","rules"];var Fa="connect-ok",Ha="connect-not-ok";function Ga(e,t,n){var i=e.get("connectionPreview",!1);i&&t.on("connect.move",(function(e){var t=e.context,n=t.canExecute,r=t.hover,o=t.source,a=t.start,s=t.startPosition,c=t.connectionStart,u=t.connectionEnd,l=t.target;c||(c=$a(t)?{x:e.x,y:e.y}:s),u||(u=$a(t)?s:{x:e.x,y:e.y}),i.drawPreview(t,n,{source:o||a,target:l||r,connectionStart:c,connectionEnd:u})})),t.on("connect.hover",900,(function(e){var t=e.context,i=e.hover,r=t.canExecute;null!==r&&n.addMarker(i,r?Fa:Ha)})),t.on(["connect.out","connect.cleanup"],1100,(function(e){var t=e.hover;t&&(n.removeMarker(t,Fa),n.removeMarker(t,Ha))})),i&&t.on("connect.cleanup",(function(e){i.cleanUp(e.context)}))}Ga.$inject=["injector","eventBus","canvas"];const Ua={__depends__:[_r,jo,ko],__init__:["connectPreview"],connect:["type",Ia],connectPreview:["type",Ga]};function Wa(e,t,n,i){this._canvas=t,this._graphicsFactory=n,this._elementFactory=i,this._connectionDocking=e.get("connectionDocking",!1),this._layouter=e.get("layouter",!1)}Wa.$inject=["injector","canvas","graphicsFactory","elementFactory"],Wa.prototype.drawPreview=function(e,t,n){n=n||{};var i,r,o,a=e.connectionPreviewGfx,s=e.getConnection,c=n.source,u=n.target,l=n.waypoints,p=n.connectionStart,h=n.connectionEnd,d=n.noLayout,f=n.noCropping,y=n.noNoop,v=this;a||(a=e.connectionPreviewGfx=this.createConnectionPreviewGfx()),je(a),s||(s=e.getConnection=(r=function(e,t,n){return v.getConnection(e,t,n)},o={},function(e){var t=JSON.stringify(e),n=o[t];return n||(n=o[t]=r.apply(null,arguments)),n})),t&&(i=s(t,c,u)),i?(i.waypoints=l||[],this._layouter&&!d&&(i.waypoints=this._layouter.layoutConnection(i,{source:c,target:u,connectionStart:p,connectionEnd:h,waypoints:n.waypoints||i.waypoints})),i.waypoints&&i.waypoints.length||(i.waypoints=[c?Xo(c):p,u?Xo(u):h]),this._connectionDocking&&(c||u)&&!f&&(i.waypoints=this._connectionDocking.getCroppedWaypoints(i,c,u)),this._graphicsFactory.drawConnection(a,i)):!y&&this.drawNoopPreview(a,n)},Wa.prototype.drawNoopPreview=function(e,t){var n=t.source,i=t.target,r=t.connectionStart||Xo(n),o=t.connectionEnd||Xo(i),a=this.cropWaypoints(r,o,n,i);xe(e,this.createNoopConnection(a[0],a[1]))},Wa.prototype.cropWaypoints=function(e,t,n,i){var r=this._graphicsFactory,o=n&&r.getShapePath(n),a=i&&r.getShapePath(i),s=r.getConnectionPath({waypoints:[e,t]});return[e=n&&Zo(o,s,!0)||e,t=i&&Zo(a,s,!1)||t]},Wa.prototype.cleanUp=function(e){e&&e.connectionPreviewGfx&&Pe(e.connectionPreviewGfx)},Wa.prototype.getConnection=function(e){var t=function(e){return y(e)?e:{}}(e);return this._elementFactory.createConnection(t)},Wa.prototype.createConnectionPreviewGfx=function(){var e=Ne("g");return be(e,{pointerEvents:"none"}),Ce(e).add("djs-connection-preview"),xe(this._canvas.getDefaultLayer(),e),e},Wa.prototype.createNoopConnection=function(e,t){var n=Ne("polyline");return be(n,{stroke:"#333",strokeDasharray:[1],strokeWidth:2,"pointer-events":"none"}),be(n,{points:[e.x,e.y,t.x,t.y]}),n};const Va={__init__:["connectionPreview"],connectionPreview:["type",Wa]};var qa=".entry";function Ya(e,t,n){this._eventBus=t,this._overlays=n;var i=h(e&&e.scale)?e.scale:{min:1,max:1.5};this._overlaysConfig={position:{right:-9,top:-6},scale:i},this._current=null,this._init()}Ya.$inject=["config.contextPad","eventBus","overlays"],Ya.prototype._init=function(){var e=this._eventBus,t=this;e.on("selection.changed",(function(e){var n=e.newSelection;1===n.length?t.open(n[0]):t.close()})),e.on("elements.delete",(function(e){b(e.elements,(function(e){t.isOpen(e)&&t.close()}))})),e.on("element.changed",(function(e){var n=e.element,i=t._current;i&&i.element===n&&t.open(n,!0)}))},Ya.prototype.registerProvider=function(e,t){t||(t=e,e=1e3),this._eventBus.on("contextPad.getProviders",e,(function(e){e.providers.push(t)}))},Ya.prototype.getEntries=function(e){var t=this._getProviders(),n={};return b(t,(function(t){var i=t.getContextPadEntries(e);g(i)?n=i(n):b(i,(function(e,t){n[t]=e}))})),n},Ya.prototype.trigger=function(e,t,n){var i,r,o=this._current.element,a=this._current.entries,s=t.delegateTarget||t.target;if(!s)return t.preventDefault();if(i=a[V(s,"data-action")].action,r=t.originalEvent||t,g(i)){if("click"===e)return i(r,o,n)}else if(i[e])return i[e](r,o,n);t.preventDefault()},Ya.prototype.open=function(e,t){!t&&this.isOpen(e)||(this.close(),this._updateAndOpen(e))},Ya.prototype._getProviders=function(){var e=this._eventBus.createEvent({type:"contextPad.getProviders",providers:[]});return this._eventBus.fire(e),e.providers},Ya.prototype._updateAndOpen=function(e){var t=this.getEntries(e),n=this.getPad(e),i=n.html;b(t,(function(e,t){var n,r=e.group||"default",o=he(e.html||'<div class="entry" draggable="true"></div>');V(o,"data-action",t),(n=ye("[data-group="+r+"]",i))||(n=he('<div class="group" data-group="'+r+'"></div>'),i.appendChild(n)),n.appendChild(o),e.className&&function(e,t){var n=Z(e);(f(t)?t:t.split(/\s+/g)).forEach((function(e){n.add(e)}))}(o,e.className),e.title&&V(o,"title",e.title),e.imageUrl&&o.appendChild(he('<img src="'+e.imageUrl+'">'))})),Z(i).add("open"),this._current={element:e,pad:n,entries:t},this._eventBus.fire("contextPad.open",{current:this._current})},Ya.prototype.getPad=function(e){if(this.isOpen())return this._current.pad;var t=this,n=this._overlays,i=he('<div class="djs-context-pad"></div>'),r=G({html:i},this._overlaysConfig);le(i,qa,"click",(function(e){t.trigger("click",e)})),le(i,qa,"dragstart",(function(e){t.trigger("dragstart",e)})),ce.bind(i,"mousedown",(function(e){e.stopPropagation()})),this._overlayId=n.add(e,"context-pad",r);var o=n.get(this._overlayId);return this._eventBus.fire("contextPad.create",{element:e,pad:o}),o},Ya.prototype.close=function(){this.isOpen()&&(this._overlays.remove(this._overlayId),this._overlayId=null,this._eventBus.fire("contextPad.close",{current:this._current}),this._current=null)},Ya.prototype.isOpen=function(e){return!(!this._current||e&&this._current.element!==e)};const Xa={__depends__:[pr,Cr],contextPad:["type",Ya]};var Ka=["marker-start","marker-mid","marker-end"],Za=["circle","ellipse","line","path","polygon","polyline","rect"];function Ja(e,t,n,i){this._elementRegistry=e,this._canvas=n,this._styles=i,this._clonedMarkers={};var r=this;t.on("drag.cleanup",(function(){b(r._clonedMarkers,(function(e){Pe(e)})),r._clonedMarkers={}}))}Ja.$inject=["elementRegistry","eventBus","canvas","styles"],Ja.prototype.getGfx=function(e){return this._elementRegistry.getGraphics(e)},Ja.prototype.addDragger=function(e,t,n){var i=Be(n=n||this.getGfx(e)),r=n.getBoundingClientRect();return this._cloneMarkers(Vt(i)),be(i,this._styles.cls("djs-dragger",[],{x:r.top,y:r.left})),xe(t,i),i},Ja.prototype.addFrame=function(e,t){var n=Ne("rect",{class:"djs-resize-overlay",width:e.width,height:e.height,x:e.x,y:e.y});return xe(t,n),n},Ja.prototype._cloneMarkers=function(e){var t=this;if(e.childNodes)for(var n=0;n<e.childNodes.length;n++)t._cloneMarkers(e.childNodes[n]);(function(e){return-1!==Za.indexOf(e.nodeName)})(e)&&Ka.forEach((function(n){if(be(e,n)){var i=function(e,t,n){return ye("marker#"+be(e,t).match(/url\(['"]?#([^'"]*)['"]?\)/)[1],n||document)}(e,n,t._canvas.getContainer());t._cloneMarker(e,i,n)}}))},Ja.prototype._cloneMarker=function(e,t,n){var i=t.id,r=this._clonedMarkers[i];if(!r){var o=i+"-clone";(r=Be(t)).id=o,Ce(r).add("djs-dragger").add("djs-dragger-marker"),this._clonedMarkers[i]=r;var a=ye("defs",this._canvas._svg);a||(a=Ne("defs"),xe(this._canvas._svg,a)),xe(a,r)}be(e,n,"url(#"+this._clonedMarkers[i].id+")")};const Qa={__init__:["previewSupport"],previewSupport:["type",Ja]};var es="drop-ok",ts="drop-not-ok",ns="attach-ok",is="new-parent",rs="create";function os(e,t,n,i,r){function o(t,n){[ns,es,ts,is].forEach((function(i){i===n?e.addMarker(t,i):e.removeMarker(t,i)}))}function a(){var e=t.context();e&&e.prefix===rs&&t.cancel()}n.on(["create.move","create.hover"],(function(e){var t=e.context,n=t.elements,i=e.hover,a=t.source,s=t.hints||{};if(!i)return t.canExecute=!1,void(t.target=null);as(e);var c={x:e.x,y:e.y},u=t.canExecute=i&&function(e,t,n,i,o){if(!t)return!1;var a=_(e=w(e,(function(t){var n=t.labelTarget;return!(t.parent||function(e){return!!e.labelTarget}(t)&&-1!==e.indexOf(n))})),(function(e){return!ss(e)})),s=!1,c=!1,u=!1;cs(e)&&(s=r.allowed("shape.attach",{position:n,shape:a,target:t})),s||(u=cs(e)?r.allowed("shape.create",{position:n,shape:a,source:i,target:t}):r.allowed("elements.create",{elements:e,position:n,target:t}));var l=o.connectionTarget;return u||s?(a&&i&&(c=r.allowed("connection.create",{source:l===i?a:i,target:l===i?i:a,hints:{targetParent:t,targetAttach:s}})),{attach:s,connect:c}):(null===u||null===s)&&null}(n,i,c,a,s);i&&null!==u&&(t.target=i,u&&u.attach?o(i,ns):o(i,u?is:ts))})),n.on(["create.end","create.out","create.cleanup"],(function(e){var t=e.hover;t&&o(t,null)})),n.on("create.end",(function(e){var t=e.context,n=t.source,r=t.shape,o=t.elements,a=t.target,s=t.canExecute,c=s&&s.attach,u=s&&s.connect,l=t.hints||{};if(!1===s||!a)return!1;as(e);var p={x:e.x,y:e.y};r=u?i.appendShape(n,r,p,a,{attach:c,connection:!0===u?{}:u,connectionTarget:l.connectionTarget}):_(o=i.createElements(o,p,a,G({},l,{attach:c})),(function(e){return!ss(e)})),G(t,{elements:o,shape:r}),G(e,{elements:o,shape:r})})),n.on("create.init",(function(){n.on("elements.changed",a),n.once(["create.cancel","create.end"],2e3,(function(){n.off("elements.changed",a)}))})),this.start=function(e,n,i){f(n)||(n=[n]);var r=_(n,(function(e){return!ss(e)}));if(r){i=G({elements:n,hints:{},shape:r},i||{}),b(n,(function(e){v(e.x)||(e.x=0),v(e.y)||(e.y=0)}));var o=ht(n);b(n,(function(e){ss(e)&&(e.waypoints=k(e.waypoints,(function(e){return{x:e.x-o.x-o.width/2,y:e.y-o.y-o.height/2}}))),G(e,{x:e.x-o.x-o.width/2,y:e.y-o.y-o.height/2})})),t.init(e,rs,{cursor:"grabbing",autoActivate:!0,data:{shape:r,elements:n,context:i}})}}}function as(e){var t=e.context.createConstraints;t&&(t.left&&(e.x=Math.max(e.x,t.left)),t.right&&(e.x=Math.min(e.x,t.right)),t.top&&(e.y=Math.max(e.y,t.top)),t.bottom&&(e.y=Math.min(e.y,t.bottom)))}function ss(e){return!!e.waypoints}function cs(e){return e&&1===e.length&&!ss(e[0])}function us(e,t,n,i,r){t.on("create.move",750,(function(t){var o=t.hover,a=t.context,s=a.elements,c=a.dragGroup;c||(c=a.dragGroup=function(e){var t=Ne("g");be(t,r.cls("djs-drag-group",["no-events"]));var o=Ne("g");return e.forEach((function(e){var r;e.hidden||(e.waypoints?(r=n._createContainer("connection",o),n.drawConnection(Vt(r),e)):(r=n._createContainer("shape",o),n.drawShape(Vt(r),e),qt(r,e.x,e.y)),i.addDragger(e,t,r))})),t}(s)),o?(c.parentNode||xe(e.getDefaultLayer(),c),qt(c,t.x,t.y)):Pe(c)})),t.on("create.cleanup",(function(e){var t=e.context.dragGroup;t&&Pe(t)}))}os.$inject=["canvas","dragging","eventBus","modeling","rules"],us.$inject=["canvas","eventBus","graphicsFactory","previewSupport","styles"];const ls={__depends__:[ko,Qa,jo,_r],__init__:["create","createPreview"],create:["type",os],createPreview:["type",us]};var ps="data-id",hs=["contextPad.close","canvas.viewbox.changing","commandStack.changed"];function ds(e,t,n){var i=h(e&&e.scale)?e.scale:{min:1,max:1.5};this._config={scale:i},this._eventBus=t,this._canvas=n,this._providers={},this._current={}}ds.$inject=["config.popupMenu","eventBus","canvas"],ds.prototype.registerProvider=function(e,t,n){n||(n=t,t=1e3),this._eventBus.on("popupMenu.getProviders."+e,t,(function(e){e.providers.push(n)}))},ds.prototype.isEmpty=function(e,t){if(!e)throw new Error("element parameter is missing");if(!t)throw new Error("providerId parameter is missing");var n=this._getProviders(t);if(!n)return!0;var i=this._getEntries(e,n),r=this._getHeaderEntries(e,n),o=M(i)>0,a=r&&M(r)>0;return!o&&!a},ds.prototype.open=function(e,t,n){var i=this._getProviders(t);if(!e)throw new Error("Element is missing");if(!i||!i.length)throw new Error("No registered providers for: "+t);if(!n)throw new Error("the position argument is missing");this.isOpen()&&this.close(),this._emit("open");var r=this._current={className:t,element:e,position:n},o=this._getEntries(e,i),a=this._getHeaderEntries(e,i);r.entries=G({},o,a),r.container=this._createContainer(),M(a)&&r.container.appendChild(this._createEntries(a,"djs-popup-header")),M(o)&&r.container.appendChild(this._createEntries(o,"djs-popup-body"));var s=this._canvas.getContainer();this._attachContainer(r.container,s,n.cursor),this._bindAutoClose()},ds.prototype.close=function(){this.isOpen()&&(this._emit("close"),this._unbindAutoClose(),ge(this._current.container),this._current.container=null)},ds.prototype.isOpen=function(){return!!this._current.container},ds.prototype.trigger=function(e){e.preventDefault();var t=V(e.delegateTarget||e.target,ps),n=this._getEntry(t);if(n.action)return n.action.call(null,e,n)},ds.prototype._getProviders=function(e){var t=this._eventBus.createEvent({type:"popupMenu.getProviders."+e,providers:[]});return this._eventBus.fire(t),t.providers},ds.prototype._getEntries=function(e,t){var n={};return b(t,(function(t){if(t.getPopupMenuEntries){var i=t.getPopupMenuEntries(e);g(i)?n=i(n):b(i,(function(e,t){n[t]=e}))}else b(t.getEntries(e),(function(e){var t=e.id;if(!t)throw new Error("every entry must have the id property set");n[t]=W(e,["id"])}))})),n},ds.prototype._getHeaderEntries=function(e,t){var n={};return b(t,(function(t){if(t.getPopupMenuHeaderEntries){var i=t.getPopupMenuHeaderEntries(e);g(i)?n=i(n):b(i,(function(e,t){n[t]=e}))}else{if(!t.getHeaderEntries)return;b(t.getHeaderEntries(e),(function(e){var t=e.id;if(!t)throw new Error("every entry must have the id property set");n[t]=W(e,["id"])}))}})),n},ds.prototype._getEntry=function(e){var t=this._current.entries[e];if(!t)throw new Error("entry not found");return t},ds.prototype._emit=function(e){this._eventBus.fire("popupMenu."+e)},ds.prototype._createContainer=function(){var e=he('<div class="djs-popup">'),t=this._current.position,n=this._current.className;return G(e.style,{position:"absolute",left:t.x+"px",top:t.y+"px",visibility:"hidden"}),Z(e).add(n),e},ds.prototype._attachContainer=function(e,t,n){var i=this;le(e,".entry","click",(function(e){i.trigger(e)})),this._updateScale(e),t.appendChild(e),n&&this._assureIsInbounds(e,n)},ds.prototype._updateScale=function(e){var t,n,i,r,o=this._canvas.zoom(),a=this._config.scale,s=o;!0!==a&&(!1===a?(t=1,n=1):(t=a.min,n=a.max),h(t)&&o<t&&(s=t),h(n)&&o>n&&(s=n)),r="scale("+s+")",(i=e).style["transform-origin"]="top left",["","-ms-","-webkit-"].forEach((function(e){i.style[e+"transform"]=r}))},ds.prototype._assureIsInbounds=function(e,t){var n,i,r=this._canvas._container.getBoundingClientRect(),o=e.offsetLeft,a=e.offsetTop,s=e.scrollWidth,c=e.scrollHeight,u={},l=t.x-r.left,p=t.y-r.top;o+s>r.width&&(u.x=!0),a+c>r.height&&(u.y=!0),u.x&&u.y?(n=l-s+"px",i=p-c+"px"):u.x?(n=l-s+"px",i=p+"px"):u.y&&p<c?(n=l+"px",i="10px"):u.y&&(n=l+"px",i=p-c+"px"),G(e.style,{left:n,top:i},{visibility:"visible","z-index":1e3})},ds.prototype._createEntries=function(e,t){var n=he("<div>"),i=this;return Z(n).add(t),b(e,(function(e,t){var r=i._createEntry(e,t);n.appendChild(r)})),n},ds.prototype._createEntry=function(e,t){var n=he("<div>"),i=Z(n);if(i.add("entry"),e.className&&e.className.split(" ").forEach((function(e){i.add(e)})),V(n,ps,t),e.label){var r=he("<span>");r.textContent=e.label,n.appendChild(r)}return e.imageUrl&&n.appendChild(he('<img src="'+e.imageUrl+'" />')),!0===e.active&&i.add("active"),!0===e.disabled&&i.add("disabled"),e.title&&(n.title=e.title),n},ds.prototype._bindAutoClose=function(){this._eventBus.once(hs,this.close,this)},ds.prototype._unbindAutoClose=function(){this._eventBus.off(hs,this.close,this)};const fs={__init__:["popupMenu"],popupMenu:["type",ds]};function ys(){}ys.prototype.get=function(){return this._data},ys.prototype.set=function(e){this._data=e},ys.prototype.clear=function(){var e=this._data;return delete this._data,e},ys.prototype.isEmpty=function(){return!this._data};const vs={clipboard:["type",ys]};function gs(e){var t=this;function n(e){t._lastMoveEvent=e}this._lastMoveEvent=null,e.on("canvas.init",(function(e){(t._svg=e.svg).addEventListener("mousemove",n)})),e.on("canvas.destroy",(function(){t._lastMouseEvent=null,t._svg.removeEventListener("mousemove",n)}))}gs.$inject=["eventBus"],gs.prototype.getLastMoveEvent=function(){return this._lastMoveEvent||function(e,t){var n=document.createEvent("MouseEvent");return n.initMouseEvent&&n.initMouseEvent("mousemove",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n}()};const ms={__init__:["mouse"],mouse:["type",gs]};function xs(e,t,n,i,r,o,a,s){this._canvas=e,this._create=t,this._clipboard=n,this._elementFactory=i,this._eventBus=r,this._modeling=o,this._mouse=a,this._rules=s,r.on("copyPaste.copyElement",(function(e){var t=e.descriptor,n=e.element,i=e.elements;t.priority=1,t.id=n.id,_(i,(function(e){return e===n.parent}))&&(t.parent=n.parent.id),function(e){return!!e.host}(n)&&(t.priority=2,t.host=n.host.id),_s(n)&&(t.priority=3,t.source=n.source.id,t.target=n.target.id,t.waypoints=function(e){return k(e.waypoints,(function(e){return(e=bs(e)).original&&(e.original=bs(e.original)),e}))}(n)),ws(n)&&(t.priority=4,t.labelTarget=n.labelTarget.id),b(["x","y","width","height"],(function(e){v(n[e])&&(t[e]=n[e])})),t.hidden=n.hidden,t.collapsed=n.collapsed})),r.on("copyPaste.pasteElements",(function(e){G(e.hints,{createElementsBehavior:!1})}))}function _s(e){return!!e.waypoints}function ws(e){return!!e.labelTarget}function bs(e){return G({},e)}function Es(e,t){var n=t.indexOf(e);return-1===n?t:t.splice(n,1)}xs.$inject=["canvas","create","clipboard","elementFactory","eventBus","modeling","mouse","rules"],xs.prototype.copy=function(e){var t,n;return f(e)||(e=e?[e]:[]),n=!1===(t=this._eventBus.fire("copyPaste.canCopyElements",{elements:e}))?{}:this.createTree(f(t)?t:e),this._clipboard.set(n),this._eventBus.fire("copyPaste.elementsCopied",{elements:e,tree:n}),n},xs.prototype.paste=function(e){var t=this._clipboard.get();if(!this._clipboard.isEmpty()){var n=e&&e.hints||{};this._eventBus.fire("copyPaste.pasteElements",{hints:n});var i=this._createElements(t);if(e&&e.element&&e.point)return this._paste(i,e.element,e.point,n);this._create.start(this._mouse.getLastMoveEvent(),i,{hints:n||{}})}},xs.prototype._paste=function(e,t,n,i){b(e,(function(e){v(e.x)||(e.x=0),v(e.y)||(e.y=0)}));var r=ht(e);return b(e,(function(e){_s(e)&&(e.waypoints=k(e.waypoints,(function(e){return{x:e.x-r.x-r.width/2,y:e.y-r.y-r.height/2}}))),G(e,{x:e.x-r.x-r.width/2,y:e.y-r.y-r.height/2})})),this._modeling.createElements(e,n,t,G({},i))},xs.prototype._createElements=function(e){var t=this,n=this._eventBus,i={},r=[];return b(e,(function(e,o){o=parseInt(o,10),b(e=R(e,"priority"),(function(e){var o,a=G({},W(e,["priority"]));return i[e.parent]?a.parent=i[e.parent]:delete a.parent,n.fire("copyPaste.pasteElement",{cache:i,descriptor:a}),_s(a)?(a.source=i[e.source],a.target=i[e.target],o=i[e.id]=t.createConnection(a),void r.push(o)):ws(a)?(a.labelTarget=i[a.labelTarget],o=i[e.id]=t.createLabel(a),void r.push(o)):(a.host&&(a.host=i[a.host]),o=i[e.id]=t.createShape(a),void r.push(o))}))})),r},xs.prototype.createConnection=function(e){return this._elementFactory.createConnection(W(e,["id"]))},xs.prototype.createLabel=function(e){return this._elementFactory.createLabel(W(e,["id"]))},xs.prototype.createShape=function(e){return this._elementFactory.createShape(W(e,["id"]))},xs.prototype.hasRelations=function(e,t){var n,i;return!(_s(e)&&(n=_(t,O({id:e.source.id})),i=_(t,O({id:e.target.id})),!n||!i)||ws(e)&&!_(t,O({id:e.labelTarget.id})))},xs.prototype.createTree=function(e){var t=this._rules,n=this,i={},r=[];function o(e,t){var n=_(r,(function(t){return e===t.element}));n?n.depth<t&&(r=function(e,t){var n=t.indexOf(e);return-1!==n&&t.splice(n,1),t}(n,r)).push({element:n.element,depth:t}):r.push({element:e,depth:t})}return lt(st(e),(function(e,t,n){if(!ws(e))return b(e.labels,(function(e){o(e,n)})),b([e.attachers,e.incoming,e.outgoing],(function(e){e&&e.length&&b(e,(function(e){b(e.labels,(function(e){o(e,n)})),o(e,n)}))})),o(e,n),e.children})),e=k(r,(function(e){return e.element})),r=R(r=k(r,(function(t){return t.descriptor={},n._eventBus.fire("copyPaste.copyElement",{descriptor:t.descriptor,element:t.element,elements:e}),t})),(function(e){return e.descriptor.priority})),e=k(r,(function(e){return e.element})),b(r,(function(r){var o=r.depth;n.hasRelations(r.element,e)&&function(e,n){return t.allowed("element.copy",{element:e,elements:n})}(r.element,e)?(i[o]||(i[o]=[]),i[o].push(r.descriptor)):Es(r.element,e)})),i};const Ss={__depends__:[vs,ls,ms,jo],__init__:["copyPaste"],copyPaste:["type",xs]};function Ts(e,t,n){f(n)||(n=[n]),b(n,(function(n){p(e[n])||(t[n]=e[n])}))}function ks(e,t,n){var i;t.on("copyPaste.copyElement",750,(function(e){var t=e.descriptor,n=e.element,i=t.oldBusinessObject=Ei(n);if(t.type=n.type,Ts(i,t,"name"),t.di={},Ts(i.di,t.di,["fill","stroke"]),Cs(t))return t})),t.on("copyPaste.pasteElements",(function(){i={}})),t.on("copyPaste.pasteElement",(function(t){var r,o,a,s=t.cache,c=t.descriptor,u=c.oldBusinessObject;Cs(c)?c.businessObject=Ei(s[c.labelTarget]):(r=e.create(u.$type),c.businessObject=n.copyElement(u,r),function(e,t){var n=Ei(e);e.default&&(i[e.default]={element:n,property:"default"}),i=W(i,E(i,(function(t,i,r){var o=i.element,a=i.property;return r===e.id&&(o[a]=n,t.push(e.id)),t}),[]))}(c),Ts(c,r,["color","name"]),o=c,f(a="oldBusinessObject")||(a=[a]),b(a,(function(e){o[e]&&delete o[e]})))}))}function Cs(e){return!!e.labelTarget}ks.$inject=["postitFactory","eventBus","moddleCopy"];var Ms=["boardElements"];function Ps(e,t,n){this._postitFactory=t,this._eventBus=e,this._moddle=n,e.on("moddleCopy.canCopyProperties",(function(e){var t=e.propertyNames;if(t&&t.length)return R(t,(function(e){return"extensionElements"===e}))})),e.on("moddleCopy.canCopyProperty",(function(e){var t=e.parent,n=y(t)&&t.$descriptor,i=e.propertyName;return(!i||-1===Ms.indexOf(i))&&!(i&&n&&!_(n.properties,O({name:i})))&&void 0}))}function js(e,t){return E(e.properties,(function(e,n){return t&&n.default?e:e.concat(n.name)}),[])}Ps.$inject=["eventBus","postitFactory","moddle"],Ps.prototype.copyElement=function(e,t,n){var i=this;n&&!f(n)&&(n=[n]),n=n||js(e.$descriptor);var r=this._eventBus.fire("moddleCopy.canCopyProperties",{propertyNames:n,sourceElement:e,targetElement:t});return!1===r||(f(r)&&(n=r),b(n,(function(n){var r;x(e,n)&&(r=e.get(n));var o=i.copyProperty(r,t,n);!1!==i._eventBus.fire("moddleCopy.canSetCopiedProperty",{parent:t,property:o,propertyName:n})&&h(o)&&t.set(n,o)}))),t},Ps.prototype.copyProperty=function(e,t,n){var i=this,r=this._eventBus.fire("moddleCopy.canCopyProperty",{parent:t,property:e,propertyName:n});if(!1!==r){if(r)return y(r)&&r.$type&&!r.$parent&&(r.$parent=t),r;var o=this._moddle.getPropertyDescriptor(t,n);if(!o.isId&&!o.isReference){if(f(e))return E(e,(function(e,o){return(r=i.copyProperty(o,t,n))?(r.$parent=t,e.concat(r)):e}),[]);if(y(e)&&e.$type){if(this._moddle.getElementDescriptor(e).isGeneric)return;return(r=i._postitFactory.create(e.$type)).$parent=t,r=i.copyElement(e,r)}return e}}};const Bs={__depends__:[Ss],__init__:["postitCopyPaste","moddleCopy"],postitCopyPaste:["type",ks],moddleCopy:["type",Ps]};var As=Math.round;function Rs(e){this._modeling=e}Rs.$inject=["modeling"],Rs.prototype.replaceElement=function(e,t,n){if(e.waypoints)return null;var i=this._modeling,r=t.width||e.width,o=t.height||e.height,a=t.x||e.x,s=t.y||e.y,c=As(a+r/2),u=As(s+o/2);return i.replaceShape(e,G({},t,{x:c,y:u,width:r,height:o}),n)};const Os={__init__:["replace"],replace:["type",Rs]};var Ns=["cancelActivity","instantiate","eventGatewayType","triggeredByEvent","isInterrupting"];function Ls(e,t,n,i,r,o){this.replaceElement=function(t,i,a){a=a||{};var s,c=i.type,u=t.businessObject,l=e.create(c),h={type:c,businessObject:l},d=js(u.$descriptor),y=js(l.$descriptor,!0),v=(s=y,d.filter((function(e){return-1!==s.indexOf(e)})));G(l,U(i,Ns));var g=v;return(l=n.copyElement(u,l,g)).name=u.name,h.di={},function(e,t,n){f(n)||(n=[n]),b(n,(function(n){p(e[n])||(t[n]=e[n])}))}(u.di,h.di,["fill","stroke"]),h=r.replaceElement(t,h,a),!1!==a.select&&o.select(h),h}}Ls.$inject=["postitFactory","elementFactory","moddleCopy","modeling","replace","selection"];const zs={__depends__:[Bs,Os,_r],postitReplace:["type",Ls]};function Ds(e,t,n,i,r,o){this._popupMenu=e,this._modeling=t,this._moddle=n,this._postitReplace=i,this._rules=r,this._translate=o,this.register()}Ds.$inject=["popupMenu","modeling","moddle","postitReplace","rules","translate"],Ds.prototype.register=function(){this._popupMenu.registerProvider("postit-replace",this)},Ds.prototype.getEntries=function(e){return this._rules.allowed("shape.replace",{element:e}),[]},Ds.prototype.getHeaderEntries=function(e){return[]},Ds.prototype._createEntries=function(e,t){var n=[],i=this;return b(t,(function(t){var r=i._createMenuEntry(t,e);n.push(r)})),n},Ds.prototype._createMenuEntry=function(e,t,n){var i=this._translate,r=this._postitReplace.replaceElement;return n=n||function(){return r(t,e.target)},{label:i(e.label),className:e.className,id:e.actionName,action:n}};const Is={__depends__:[fs,zs],__init__:["replaceMenuProvider"],replaceMenuProvider:["type",Ds]};function $s(e,t,n,i,r,o,a,s){e=e||{},i.registerProvider(this),this._contextPad=i,this._modeling=r,this._rules=o,this._imageSelection=a,this._translate=s,!1!==e.autoPlace&&(this._autoPlace=t.get("autoPlace",!1)),n.on("create.end",250,(function(e){var t=e.context.shape;if(ar(e)&&i.isOpen(t)){var n=i.getEntries(t);n.replace&&n.replace.action.click(e,t)}}))}$s.$inject=["config.contextPad","injector","eventBus","contextPad","modeling","rules","imageSelection","translate"],$s.prototype.getContextPadEntries=function(e){const{_rules:t,_modeling:n,_imageSelection:i,_translate:r}=this;let o={};function a(t){var i=new URLSearchParams(window.location.search).get("s_key");null===i?shepherdAlert("Script Required","You must open a script to update it's notes."):$.ajax({type:"DELETE",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",$('meta[name="csrf-token"]').attr("content"))},url:"/scripts/"+i+"/destroy_image/"+e.businessObject.$attrs.key,responseType:"application/json",dataType:"json",failure:function(e){}}),n.removeElements([e])}function s(t){"postit:Image"===e.type&&void 0!==e.businessObject.$attrs.key?shepherdConfirm("Confirm Delete?","Are you sure you want to delete this element?",a,[t]):n.removeElements([e])}return"label"===e.type||(bi(e,"postit:Postit")&&function(t){b(C(Ma),(i=>{var o,a=Ma[i];G(t,{["color-"+i]:{group:"color",className:(o=[],a===function(e){return Ei(e).color||e.color}(e)&&o.push("pjs-color-entry-disabled"),o.push("pjs-color-entry-"+i),o),title:r("Set Color"),action:{click:t=>function(t){n.setColor(e,t)}(a)}}})}))}(o),bi(e,"postit:Image")&&G(o,{"replace.image":{group:"replace",className:"bpmn-icon-screw-wrench",title:r("Change image source"),action:{click:t=>i.select(e)}}}),function(n){let i=t.allowed("elements.delete",{elements:[e]});f(i)&&(i=i[0]===e),i&&G(n,{delete:{group:"edit",className:"bpmn-icon-trash",title:r("Remove"),action:{click:s}}})}(o)),o};const Fs={__depends__:[za,Xa,_r,Ua,ls,Is],__init__:["contextPadProvider"],contextPadProvider:["type",$s]};var Hs="is not a registered action";function Gs(e,t){this._actions={};var n=this;e.on("diagram.init",(function(){n._registerDefaultActions(t),e.fire("editorActions.init",{editorActions:n})}))}function Us(e,t){return new Error(e+" "+t)}Gs.$inject=["eventBus","injector"],Gs.prototype._registerDefaultActions=function(e){var t=e.get("commandStack",!1),n=e.get("modeling",!1),i=e.get("selection",!1),r=e.get("zoomScroll",!1),o=e.get("copyPaste",!1),a=e.get("canvas",!1),s=e.get("rules",!1),c=e.get("keyboardMove",!1),u=e.get("keyboardMoveSelection",!1);t&&(this.register("undo",(function(){t.undo()})),this.register("redo",(function(){t.redo()}))),o&&i&&this.register("copy",(function(){var e=i.get();o.copy(e)})),o&&this.register("paste",(function(){o.paste()})),r&&this.register("stepZoom",(function(e){r.stepZoom(e.value)})),a&&this.register("zoom",(function(e){a.zoom(e.value)})),n&&i&&s&&this.register("removeSelection",(function(){var e=i.get();if(e.length){var t,r=s.allowed("elements.delete",{elements:e});!1!==r&&(t=f(r)?r:e).length&&n.removeElements(t.slice())}})),c&&this.register("moveCanvas",(function(e){c.moveCanvas(e)})),u&&this.register("moveSelection",(function(e){u.moveSelection(e.direction,e.accelerated)}))},Gs.prototype.trigger=function(e,t){if(!this._actions[e])throw Us(e,Hs);return this._actions[e](t)},Gs.prototype.register=function(e,t){var n=this;if("string"==typeof e)return this._registerAction(e,t);b(e,(function(e,t){n._registerAction(t,e)}))},Gs.prototype._registerAction=function(e,t){if(this.isRegistered(e))throw Us(e,"is already registered");this._actions[e]=t},Gs.prototype.unregister=function(e){if(!this.isRegistered(e))throw Us(e,Hs);this._actions[e]=void 0},Gs.prototype.getActions=function(){return Object.keys(this._actions)},Gs.prototype.isRegistered=function(e){return!!this._actions[e]};const Ws={__init__:["editorActions"],editorActions:["type",Gs]};function Vs(e){e.invoke(Gs,this)}r()(Vs,Gs),Vs.$inject=["injector"],Vs.prototype._registerDefaultActions=function(e){Gs.prototype._registerDefaultActions.call(this,e);var t=e.get("canvas",!1),n=e.get("elementRegistry",!1),i=e.get("selection",!1),r=e.get("spaceTool",!1),o=e.get("lassoTool",!1),a=e.get("handTool",!1),s=e.get("distributeElements",!1),c=e.get("alignElements",!1),u=e.get("directEditing",!1),l=e.get("searchPad",!1),p=e.get("modeling",!1);t&&n&&i&&this._registerAction("selectElements",(function(){var e=t.getRootElement(),r=n.filter((function(t){return t!==e}));return i.select(r),r})),r&&this._registerAction("spaceTool",(function(){r.toggle()})),o&&this._registerAction("lassoTool",(function(){o.toggle()})),a&&this._registerAction("handTool",(function(){a.toggle()})),i&&s&&this._registerAction("distributeElements",(function(e){var t=i.get(),n=e.type;t.length&&s.trigger(t,n)})),i&&c&&this._registerAction("alignElements",(function(e){var t=i.get(),n=e.type;t.length&&c.trigger(t,n)})),i&&p&&this._registerAction("setColor",(function(e){var t=i.get();t.length&&p.setColor(t,e)})),i&&u&&this._registerAction("directEditing",(function(){var e=i.get();e.length&&u.activate(e[0])})),l&&this._registerAction("find",(function(){l.toggle()})),t&&p&&this._registerAction("moveToOrigin",(function(){var e,i=t.getRootElement(),r=n.filter((function(e){return e!==i}));e=ht(r),p.moveElements(r,{x:-e.x,y:-e.y},i)}))};const qs={__depends__:[Ws],editorActions:["type",Vs]};async function Ys(e,t){return await function(e){return new Promise(((t,n)=>{try{var i=new FileReader;i.onloadend=function(){t(i.result)},i.readAsDataURL(e)}catch(e){n(e)}}))}(t)}function Xs(e){var t=(e=e||window.event).pageX,n=e.pageY;return void 0===t&&(t=e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,n=e.clientY+document.body.scrollTop+document.documentElement.scrollTop),{pageX:t,pageY:n}}var Ks;function Zs(e,t,n,i){this._canvas=e,this._eventBus=t,this._modeling=n,this._translate=i;var r=this;t.on("create.end",500,(function(e){var t=e.context,n=t.shape;t.hints.selectImage&&r.select(n)})),Ks={URL:this._translate("URL"),"An error occured during the file upload":this._translate("An error occured during the file upload"),"Upload files here":this._translate("Upload files here"),Upload:this._translate("Upload"),file:this._translate("file"),files:this._translate("files"),selected:this._translate("selected"),"Upload again":this._translate("Upload again")},Zs.IMAGE_SELECTION_MARKUP='<div id="pjs-image-selection-modal" class="pjs-io-dialog-local"><div class="pjs-io-dialog-section pjs-first"><div id="pjs-image-selection-input-wrapper"><input id="pjs-image-selection-input" class="pjs-ui-element-bordered"></input></div><div class="pjs-labeled-input"><label for="pjs-image-selection-input" class="pjs-input-text-static">\x3c!--Search / --\x3e'+Ks.URL+':</label></div></div"><div class="pjs-io-dialog-section"><div class="pjs-section-spacer"></div><label for="pjs-image-upload"><div class="pjs-io-dialog-text-hint"><a style="display:block"><ul id="pjs-image-dialog-text-hint-list" class="pjs-horizontal"><li><div class="pjs-general-icon pjs-image-dialog-upload-icon"></div></li><li id="pjs-image-selection-files-text-error">'+Ks["An error occured during the file upload"]+'</li><li id="pjs-image-selection-files-text-upload">'+Ks["Upload files here"]+'</li></ul></a></div></label><input type="file" id="pjs-image-upload" style="display:none" multiple/><div class="pjs-io-dialog-section"><div class="pjs-buttons pjs-image-selection-submit-wrapper"><button id="pjs-image-selection-submit">'+Ks.Upload+"</button></div></div></div></div>"}Zs.prototype._getParentContainer=function(){return this._canvas.getContainer()},Zs.prototype.select=function(e,t){const n=this,i=this._container=he(Zs.IMAGE_SELECTION_MARKUP),r=this._canvas._container.parentElement.parentElement;r.insertBefore(i,r.firstChild);const o=Xs(null);i.style.left=o.pageX-m(i)+"px",i.style.top=o.pageY-x(i)+"px";const a=document.getElementById("pjs-image-selection-input"),s=document.getElementById("pjs-image-selection-submit"),c=document.getElementById("pjs-image-selection-files-text-error"),u=document.getElementById("pjs-image-selection-files-text-upload"),l=document.getElementById("pjs-image-dialog-text-hint-list"),p=document.getElementById("pjs-image-upload"),h=document.getElementById("pjs-image-selection-modal");var d,f,y=l.style.height;a.focus();const v=ce.bind(r,"click",(function(e){if(h){var t=!1;document.querySelectorAll(".djs-context-pad .entry").forEach((function(e){e==event.target&&(t=!0)}));const i=Xs(e);var n=document.defaultView.getComputedStyle(h)["font-size"];n=parseInt(n.substring(0,n.indexOf("px"))),!t&&(i.pageX>h.offsetLeft+m(r)+h.clientWidth||i.pageX<h.offsetLeft+m(r)-n||i.pageY>h.offsetTop+x(r)+h.clientHeight||i.pageY<h.offsetTop+x(r)-n)&&w()}}));for(var g=0;g<p.labels.length;g++)ce.bind(p.labels[g],"click",(function(e){e.preventDefault(),e.stopPropagation(),p.dispatchEvent(new MouseEvent(e.type,e))}));function m(e){var t=0;do{isNaN(e.offsetLeft)||(t+=e.offsetLeft)}while(e=e.offsetParent);return t}function x(e){var t=0;do{isNaN(e.offsetTop)||(t+=e.offsetTop)}while(e=e.offsetParent);return t}async function _(t,n){var i=new URLSearchParams(window.location.search).get("s_key");if(null===i)shepherdAlert("Script Required","You must open a script before you can take notes!");else{let r;"data"!==n.substring(0,4)?(r=await fetch("https://cors-anywhere-dot-indieskedge-production.wl.r.appspot.com/"+n).then((e=>e.blob())),r.name="Remote File"):r=p.files[0],new ActiveStorage.DirectUpload(r,direct_upload_url).create((function(n,r){n?n.search("Status: 403")>=0?shepherdAlert("Subscription Needed!",'You must have an active subscription to save images! You can sign up <button data-toggle="modal" href="#subscriptionModal" onclick="Shepherd.activeTour.complete(); $(\'#ideatorNotesModal\').modal(\'hide\');" data-description="Sign up for image uploading and other great featuers!" data-reset="$(\'#ideatorNotesModal\').modal(\'show\');" style="color: blue; margin-left: -6px; text-decoration: underline;">here!</button>'):(shepherdAlert("Unknown Error","We've logged this issue.  If it continues, please reach out to support."),Bugsnag.notify("Unknown upload response: "+n.toString())):r.key&&$.ajax({type:"GET",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",$('meta[name="csrf-token"]').attr("content"))},url:"/scripts/"+i+"/image_url/"+r.key,responseType:"application/json",dataType:"json",success:function(n){t._modeling.updateProperties(e,{source:n.url,key:n.key})}})}))}}function w(){h&&h.parentNode&&(h.parentNode.removeChild(h),v&&r.removeEventListener("click",v))}ce.bind(p,"change",(async function(){let e;a.disabled="true";let t=await async function(e,t){let n,i=[],r=t;try{if(r)for(var o=0;o<r.length;o++){i.push(await Ys(0,r[o]))}}catch(e){n=e,i=null}return{uploadResult:i,errors:n}}(0,p.files),n=t.uploadResult;if(t.errors)y=l.style.height,l.style.height="auto",c.style.display="block",u.innerHTML=Ks["Upload again"],document.getElementsByClassName("pjs-image-dialog-upload-icon")[0].classList.add("pjs-image-dialog-upload-icon-error");else{let t=n.length?n.length:0;e=t,!1===isNaN(t)&&(e+=" "+(+(1==n.length)?Ks.file:Ks.files)+" "+Ks.selected,f=n),i=e,l.style.height=y,c.style.display="none",u.innerHTML=i,document.getElementsByClassName("pjs-image-dialog-upload-icon").length>0&&document.getElementsByClassName("pjs-image-dialog-upload-icon")[0].classList.remove("pjs-image-dialog-upload-icon-error")}var i})),ce.bind(s,"click",(async function(){if(d=f,null!==e){if(d)for(const e in f)_(n,f[e]);else d=a.value,_(n,d);n._eventBus.fire("imageSelection.complete",{element:e})}else d||(d=a.value),t(d);w()})),ce.bind(a,"keyup",(function(e){13===event.keyCode&&(event.preventDefault(),s.click())}))},Zs.prototype.$inject=["canvas","eventBus","modelng","translate"];const Js={__init__:["imageSelection"],imageSelection:["type",Zs]};function Qs(e){e.invoke(Dr,this)}r()(Qs,Dr),Qs.$inject=["injector"],Qs.prototype.registerBindings=function(e,t){function n(n,i){t.isRegistered(n)&&e.addListener(i)}Dr.prototype.registerBindings.call(this,e,t),n("selectElements",(function(n){var i=n.keyEvent;if(e.isKey(["a","A"],i)&&e.isCmd(i))return t.trigger("selectElements"),!0})),n("find",(function(n){var i=n.keyEvent;if(e.isKey(["f","F"],i)&&e.isCmd(i))return t.trigger("find"),!0})),n("spaceTool",(function(n){var i=n.keyEvent;if(!e.hasModifier(i))return e.isKey(["s","S"],i)?(t.trigger("spaceTool"),!0):void 0})),n("lassoTool",(function(n){var i=n.keyEvent;if(!e.hasModifier(i))return e.isKey(["l","L"],i)?(t.trigger("lassoTool"),!0):void 0})),n("handTool",(function(n){var i=n.keyEvent;if(!e.hasModifier(i))return e.isKey(["h","H"],i)?(t.trigger("handTool"),!0):void 0})),n("directEditing",(function(n){var i=n.keyEvent;if(!e.hasModifier(i))return e.isKey(["e","E"],i)?(t.trigger("directEditing"),!0):void 0}))};const ec={__depends__:[Ir],__init__:["keyboardBindings"],keyboardBindings:["type",Qs]};var tc={moveSpeed:1,moveSpeedAccelerated:10},nc="left",ic="right",rc="down",oc={ArrowLeft:nc,Left:nc,ArrowUp:"up",Up:"up",ArrowRight:ic,Right:ic,ArrowDown:rc,Down:rc},ac={left:function(e){return{x:-e,y:0}},up:function(e){return{x:0,y:-e}},right:function(e){return{x:e,y:0}},down:function(e){return{x:0,y:e}}};function sc(e,t,n,i,r){var o=this;this._config=G({},tc,e||{}),t.addListener(1500,(function(e){var n=e.keyEvent,i=oc[n.key];if(i&&!t.isCmd(n)){var r=t.isShift(n);return o.moveSelection(i,r),!0}})),this.moveSelection=function(e,t){var o=r.get();if(o.length){var a=this._config[t?"moveSpeedAccelerated":"moveSpeed"],s=ac[e](a);i.allowed("elements.move",{shapes:o})&&n.moveElements(o,s)}}}sc.$inject=["config.keyboardMoveSelection","keyboard","modeling","rules","selection"];const cc={__depends__:[Ir,_r],__init__:["keyboardMoveSelection"],keyboardMoveSelection:["type",sc]};function uc(e,t,n,i){e.on("element.changed",(function(i){var r=i.element;(r.parent||r===t.getRootElement())&&(i.gfx=n.getGraphics(r)),i.gfx&&e.fire(dt(r)+".changed",i)})),e.on("elements.changed",(function(t){var n=t.elements;n.forEach((function(t){e.fire("element.changed",{element:t})})),i.updateContainments(n)})),e.on("shape.changed",(function(e){i.update("shape",e.element,e.gfx)})),e.on("connection.changed",(function(e){i.update("connection",e.element,e.gfx)}))}uc.$inject=["eventBus","canvas","elementRegistry","graphicsFactory"];const lc={__init__:["changeSupport"],changeSupport:["type",uc]};var pc=Math.max,hc=Math.min;function dc(e,t,n){var i=t[e],r=n.min&&n.min[e],o=n.max&&n.max[e];return v(r)&&(i=(/top|left/.test(e)?hc:pc)(i,r)),v(o)&&(i=(/top|left/.test(e)?pc:hc)(i,o)),i}function fc(e,t){return void 0!==e?e:20}function yc(e){return!e.waypoints&&"label"!==e.type}function vc(e,t,n,i){this._dragging=i,this._rules=t;var r=this;e.on("resize.start",(function(e){var t,n,i;n=(t=e.context).resizeConstraints,i=t.minBounds,void 0===n&&(void 0===i&&(i=r.computeMinResizeBox(t)),t.resizeConstraints={min:qo(i)})})),e.on("resize.move",(function(e){var t={x:e.dx,y:e.dy};!function(e,t){var n,i=e.shape,o=e.direction,a=e.resizeConstraints;e.delta=t,n=function(e,t,n){var i=n.x,r=n.y,o={x:e.x,y:e.y,width:e.width,height:e.height};return-1!==t.indexOf("n")?(o.y=e.y+r,o.height=e.height-r):-1!==t.indexOf("s")&&(o.height=e.height+r),-1!==t.indexOf("e")?o.width=e.width+i:-1!==t.indexOf("w")&&(o.x=e.x+i,o.width=e.width-i),o}(i,o,t),e.newBounds=function(e,t){if(!t)return e;var n=qo(e);return Yo({top:dc("top",n,t),right:dc("right",n,t),bottom:dc("bottom",n,t),left:dc("left",n,t)})}(n,a),e.canExecute=r.canResize(e)}(e.context,t)})),e.on("resize.end",(function(e){!function(e){var t,i=e.shape,r=e.canExecute,o=e.newBounds;if(r){if(t=o,!function(e,t){return e.x!==t.x||e.y!==t.y||e.width!==t.width||e.height!==t.height}(i,o={x:Math.round(t.x),y:Math.round(t.y),width:Math.round(t.width),height:Math.round(t.height)}))return;n.resizeShape(i,o)}}(e.context)}))}function gc(e,t){var n=Xo(e),i=qo(e),r={x:n.x,y:n.y};return-1!==t.indexOf("n")?r.y=i.top:-1!==t.indexOf("s")&&(r.y=i.bottom),-1!==t.indexOf("e")?r.x=i.right:-1!==t.indexOf("w")&&(r.x=i.left),r}function mc(e){return"n"===e||"s"===e?"resize-ns":"e"===e||"w"===e?"resize-ew":"nw"===e||"se"===e?"resize-nwse":"resize-nesw"}vc.prototype.canResize=function(e){var t=this._rules,n=U(e,["newBounds","shape","delta","direction"]);return t.allowed("shape.resize",n)},vc.prototype.activate=function(e,t,n){var i,r,o=this._dragging;if("string"==typeof n&&(n={direction:n}),!(r=(i=G({shape:t},n)).direction))throw new Error("must provide a direction (n|w|s|e|nw|se|ne|sw)");o.init(e,gc(t,r),"resize",{autoActivate:!0,cursor:mc(r),data:{shape:t,context:i}})},vc.prototype.computeMinResizeBox=function(e){var t,n,i,r,o,a,s,c=e.shape;return t=e.direction,n=c,i=e.minDimensions||{width:10,height:10},r=function(e,t){var n;if((n=void 0===e.length?w(e.children,yc):e).length)return function(e,t){var n,i,r,o;return"object"==typeof t?(n=fc(t.left),i=fc(t.right),r=fc(t.top),o=fc(t.bottom)):n=i=r=o=fc(t),{x:e.x-n,y:e.y-r,width:e.width+n+i,height:e.height+r+o}}(ht(n),t)}(c,e.childrenBoxPadding),o=qo(n),a={top:/n/.test(t)?o.bottom-i.height:o.top,left:/w/.test(t)?o.right-i.width:o.left,bottom:/s/.test(t)?o.top+i.height:o.bottom,right:/e/.test(t)?o.left+i.width:o.right},s=r?qo(r):a,Yo({top:hc(a.top,s.top),left:hc(a.left,s.left),bottom:pc(a.bottom,s.bottom),right:pc(a.right,s.right)})},vc.$inject=["eventBus","rules","modeling","dragging"];var xc="djs-resizing",_c="resize-not-ok";function wc(e,t,n){e.on("resize.move",500,(function(e){var i,r,o,a;r=(i=e.context).shape,o=i.newBounds,(a=i.frame)||(a=i.frame=n.addFrame(r,t.getDefaultLayer()),t.addMarker(r,xc)),o.width>5&&be(a,{x:o.x,width:o.width}),o.height>5&&be(a,{y:o.y,height:o.height}),i.canExecute?Ce(a).remove(_c):Ce(a).add(_c)})),e.on("resize.cleanup",(function(e){var n,i;i=(n=e.context).shape,n.frame&&Pe(n.frame),t.removeMarker(i,xc)}))}wc.$inject=["eventBus","canvas","previewSupport"];var bc=["n","w","s","e","nw","ne","se","sw"];function Ec(e,t,n,i){this._resize=i,this._canvas=t;var r=this;e.on("selection.changed",(function(e){var t=e.newSelection;r.removeResizers(),1===t.length&&b(t,F(r.addResizer,r))})),e.on("shape.changed",(function(e){var t=e.element;n.isSelected(t)&&(r.removeResizers(),r.addResizer(t))}))}Ec.prototype.makeDraggable=function(e,t,n){var i=this._resize;function r(t){or(t)&&i.activate(t,e,n)}ce.bind(t,"mousedown",r),ce.bind(t,"touchstart",r)},Ec.prototype._createResizer=function(e,t,n,i){var r=this._getResizersParent(),o=function(e){var t={x:0,y:0};return-1!==e.indexOf("e")?t.x=6:-1!==e.indexOf("w")&&(t.x=-6),-1!==e.indexOf("s")?t.y=6:-1!==e.indexOf("n")&&(t.y=-6),t}(i),a=Ne("g");Ce(a).add("djs-resizer"),Ce(a).add("djs-resizer-"+e.id),Ce(a).add("djs-resizer-"+i),xe(r,a);var s=Ne("rect");be(s,{x:-2+o.x,y:-2+o.y,width:4,height:4}),Ce(s).add("djs-resizer-visual"),xe(a,s);var c=Ne("rect");return be(c,{x:-10+o.x,y:-10+o.y,width:20,height:20}),Ce(c).add("djs-resizer-hit"),xe(a,c),function(e,t,n,i,r){var o=De();o.setTranslate(t,n);var a=De();a.setRotate(0,0,0);var s=De();s.setScale(1,1),Ve(e,[o,a,s])}(a,t,n),a},Ec.prototype.createResizer=function(e,t){var n=gc(e,t),i=this._createResizer(e,n.x,n.y,t);this.makeDraggable(e,i,t)},Ec.prototype.addResizer=function(e){var t=this;this._resize.canResize({shape:e})&&b(bc,(function(n){t.createResizer(e,n)}))},Ec.prototype.removeResizers=function(){je(this._getResizersParent())},Ec.prototype._getResizersParent=function(){return this._canvas.getLayer("resizers")},Ec.$inject=["eventBus","canvas","selection","resize"];const Sc={__depends__:[jo,ko,Qa],__init__:["resize","resizePreview","resizeHandles"],resize:["type",vc],resizePreview:["type",wc],resizeHandles:["type",Ec]};function Tc(e,t,n,i,r,o,a){function s(e,t){(t||Si(e,["postit:Postit","postit:Group","postit:TextBox"]))&&i.activate(e)}this._postitFactory=t,this._canvas=n,this._modeling=r,this._textRenderer=a,i.registerProvider(this),e.on("element.dblclick",(function(e){s(e.element,!0)})),e.on(["autoPlace.start","canvas.viewbox.changing","drag.init","element.mousedown","popupMenu.open"],(function(e){i.isActive()&&i.complete()})),e.on(["commandStack.changed"],(function(e){i.isActive()&&i.cancel()})),e.on("directEditing.activate",(function(e){o.removeResizers()})),e.on("create.end",500,(function(e){var t=e.context,n=t.shape,i=e.context.canExecute;e.isTouch||i&&(t.hints&&!1===t.hints.createElementsBehavior||s(n))})),e.on("autoPlace.end",500,(function(e){s(e.shape)}))}Tc.$inject=["eventBus","postitFactory","canvas","directEditing","modeling","resizeHandles","textRenderer"],Tc.prototype.activate=function(e){var t=ki(e);if(void 0!==t){var n={text:t};G(n,this.getEditingBBox(e));var i={};return Si(e,["postit:Postit","postit:TextBox"])&&G(i,{centerVertically:!0}),Vi(e)&&G(i,{autoResize:!0}),G(n,{options:i}),n}},Tc.prototype.getEditingBBox=function(e){var t=this._canvas,n=e.label||e,i=t.getAbsoluteBBox(n),r=i.x+i.width/2,o=(i.y,i.height,{x:i.x,y:i.y}),a=t.zoom(),s=this._textRenderer.getDefaultStyle(),c=this._textRenderer.getExternalStyle(),u=c.fontSize*a,l=c.lineHeight,p=s.fontSize*a,h=s.lineHeight,d={fontFamily:this._textRenderer.getDefaultStyle().fontFamily,fontWeight:this._textRenderer.getDefaultStyle().fontWeight};Si(e,["postit:Postit","postit:TextBox","postit:Group"])&&(G(o,{width:i.width,height:i.height}),G(d,{fontSize:p+"px",lineHeight:h,paddingTop:7*a+"px",paddingBottom:7*a+"px",paddingLeft:5*a+"px",paddingRight:5*a+"px"}));var f=90*a,y=7*a,v=4*a;if(n.labelTarget&&(G(o,{width:f,height:i.height+y+v,x:r-f/2,y:i.y-y}),G(d,{fontSize:u+"px",lineHeight:l,paddingTop:y+"px",paddingBottom:v+"px"})),Vi(n)&&!qi(n)&&!Xi(n)){var g=Yi(e),m=t.getAbsoluteBBox({x:g.x,y:g.y,width:0,height:0}),x=u+y+v;G(o,{width:f,height:x,x:m.x-f/2,y:m.y-x/2}),G(d,{fontSize:u+"px",lineHeight:l,paddingTop:y+"px",paddingBottom:v+"px"})}return Si(e,["postit:Postit"])&&G(d,{backgroundColor:"transparent"}),{bounds:o,style:d}},Tc.prototype.update=function(e,t){var n;(n=t)&&n.trim()||(t=null),this._modeling.updateLabel(e,t)};var kc="djs-element-hidden",Cc="djs-label-hidden";function Mc(e,t,n,i){var r,o;e.on("directEditing.activate",(function(e){var n=e.active;(r=n.element.label||n.element).labelTarget?t.addMarker(r,kc):bi(r,"postit:Postit")&&t.addMarker(r,Cc)})),e.on(["directEditing.complete","directEditing.cancel"],(function(e){var n=e.active;n&&(t.removeMarker(n.element.label||n.element,kc),t.removeMarker(r,Cc)),r=void 0,o&&(Pe(o),o=void 0)}))}Mc.$inject=["eventBus","canvas","elementRegistry","pathMap"];const Pc={__depends__:[lc,Sc,za],__init__:["labelEditingProvider","labelEditingPreview"],labelEditingProvider:["type",Tc],labelEditingPreview:["type",Mc]};function jc(e){this._eventBus=e}jc.$inject=["eventBus"],jc.prototype.on=function(e,t,n,i,r,o){if((g(t)||v(t))&&(o=r,r=i,i=n,n=t,t=null),g(n)&&(o=r,r=i,i=n,n=1e3),y(r)&&(o=r,r=!1),!g(i))throw new Error("handlerFn must be a function");f(e)||(e=[e]);var a=this._eventBus;b(e,(function(e){var s=["commandStack",e,t].filter((function(e){return e})).join(".");a.on(s,n,r?function(e,t){return function(n){return e.call(t||null,n.context,n.command,n)}}(i,o):i,o)}))},b(["canExecute","preExecute","preExecuted","execute","executed","postExecute","postExecuted","revert","reverted"],(function(e){jc.prototype[e]=function(t,n,i,r,o){(g(t)||v(t))&&(o=r,r=i,i=n,n=t,t=null),this.on(t,e,n,i,r,o)}}));var Bc=["top","bottom","left","right"];function Ac(e,t){function n(e){if(qi(e)){var n=function(e){var t=Xo(e.label),n=Rc(Xo(e),t);if(i=n,-1!==Bc.indexOf(i)){var i,r=function(e){var t=Xo(e);return[].concat(e.incoming.map((function(e){return e.waypoints[e.waypoints.length-2]})),e.outgoing.map((function(e){return e.waypoints[1]}))).map((function(e){return Rc(t,e)}))}(e);if(e.host){var o=function(e){var t,n=e.host,i=Ko(Xo(e),n);return t=i.indexOf("-")>=0?i.split("-"):[i],Bc.filter((function(e){return-1===t.indexOf(e)}))}(e);r=r.concat(o)}var a=Bc.filter((function(e){return-1===r.indexOf(e)}));if(-1===a.indexOf(n))return a[0]}}(e);n&&function(e,n){var i=Xo(e),r=e.label,o=Xo(r);if(r.parent){var a,s=qo(e);switch(n){case"top":a={x:i.x,y:s.top-10-r.height/2};break;case"left":a={x:s.left-10-r.width/2,y:i.y};break;case"bottom":a={x:i.x,y:s.bottom+10+r.height/2};break;case"right":a={x:s.right+10+r.width/2,y:i.y}}var c=Yr(a,o);t.moveShape(r,c)}}(e,n)}}jc.call(this,e),this.postExecuted(["connection.create","connection.layout","connection.updateWaypoints"],(function(e){var t=e.context,i=t.connection,r=i.source,o=i.target;!1!==(t.hints||{}).createElementsBehavior&&(n(r),n(o))})),this.postExecuted(["label.create"],(function(e){var t=e.context,i=t.shape;!1!==(t.hints||{}).createElementsBehavior&&n(i.labelTarget)})),this.postExecuted(["elements.create"],(function(e){var t=e.context,i=t.elements;!1!==(t.hints||{}).createElementsBehavior&&i.forEach((function(e){n(e)}))}))}function Rc(e,t){return Ko(t,e,5)}function Oc(e){jc.call(this,e),this.preExecute("shape.append",(function(e){var t=e.source,n=e.shape;e.position||(e.position={x:t.x+t.width+80+n.width/2,y:t.y+t.height/2})}),!0)}function Nc(e,t,n){t.on(["create.hover","create.move","create.end","shape.move.hover","shape.move.move","shape.move.end"],1500,(function(t){var i=t.context.shape||t.shape,r=t.hover,o=n.getRootElement();r!==o&&(i.labelTarget||bi(i,"postit:Group"))&&(t.hover=o,t.hoverGfx=e.getGraphics(t.hover))}))}function Lc(e,t,n,i){var r,o,a,s;return 0==(r=(i.y-n.y)*(t.x-e.x)-(i.x-n.x)*(t.y-e.y))?null:(o=e.y-n.y,a=e.x-n.x,s=((i.x-n.x)*o-(i.y-n.y)*a)/r,{x:Math.round(e.x+s*(t.x-e.x)),y:Math.round(e.y+s*(t.y-e.y))})}function zc(e){function t(e,t,n){var i,r={x:n.x,y:n.y-50},o={x:n.x-50,y:n.y},a=Lc(e,t,n,r),s=Lc(e,t,n,o);i=a&&s?Dc(a,n)>Dc(s,n)?s:a:a||s,e.original=i}e.on("boardElement.added",(function(e){var n,i,r=e.element;r.waypoints&&(t((i=(n=r).waypoints)[0],i[1],Xo(n.source)),t(i[i.length-1],i[i.length-2],Xo(n.target)))}))}function Dc(e,t){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Ic(e){return Math.sqrt(Math.pow(e.x,2)+Math.pow(e.y,2))}function $c(e){return Math.atan((e[1].y-e[0].y)/(e[1].x-e[0].x))}function Fc(e,t){var n=t[0],i=t[1],r={x:i.x-n.x,y:i.y-n.y},o=function(e,t,n){var i=[{n:e[0]-n[0],lambda:t[0]},{n:e[1]-n[1],lambda:t[1]}];return-(i[0].n*t[0]+i[1].n*t[1])/(i[0].lambda*t[0]+i[1].lambda*t[1])}([n.x,n.y],[r.x,r.y],[e.x,e.y]);return{x:n.x+o*r.x,y:n.y+o*r.y}}function Hc(e,t){var n=Fc(e,t);return Ic({x:n.x-e.x,y:n.y-e.y})}function Gc(e,t){return Ic({x:e.x-t.x,y:e.y-t.y})}r()(Ac,jc),Ac.$inject=["eventBus","modeling"],r()(Oc,jc),Oc.$inject=["eventBus"],Nc.$inject=["elementRegistry","eventBus","canvas"],zc.$inject=["eventBus"];var Uc=Math.sqrt,Wc=Math.min,Vc=Math.max,qc=Math.abs;function Yc(e){return Math.pow(e,2)}function Xc(e,t){return Uc(Yc(e.x-t.x)+Yc(e.y-t.y))}function Kc(e,t,n,i){var r=t.x-e.x,o=t.y-e.y,a=n.x-e.x,s=n.y-e.y,c=r*r+o*o,u=(r*a+o*s)/c,l=u*u-(a*a+s*s-i*i)/c;if(l<0&&l>-1e-6&&(l=0),l<0)return[];var p=Uc(l),h=-u+p,d=-u-p,f={x:e.x-r*h,y:e.y-o*h};return 0===l?[f]:[f,{x:e.x-r*d,y:e.y-o*d}].filter((function(n){return function(e,t,n){return Zc(e.x,t.x,n.x)&&Zc(e.y,t.y,n.y)}(n,e,t)}))}function Zc(e,t,n){return e>=Wc(t,n)-Jc&&e<=Vc(t,n)+Jc}var Jc=.1;function Qc(e,t){return qc(e.x-t.x)<=Jc&&qc(e.y-t.y)<=Jc}function eu(e,t){var n=Gc(e[t-1],e[t]);return n/(n+Gc(e[t],e[t+1]))}function tu(e,t){return[e[t],e[t+1]]}function nu(e,t,n){var i=qr(t),r=qr(n),o=Yr(e,i),a=o.x*(n.width/t.width),s=o.y*(n.height/t.height);return Vo({x:r.x+a,y:r.y+s})}function iu(e,t,n){var i=qr(e),r=qr(t),o=qr(n),a=Yr(e,i),s=Yr(i,r),c=function(e,t,n){var i=qo(t),r=qo(n);if(function(e,t){return function(e,t){return e.right!==t.right&&e.left!==t.left}(e,t)||function(e,t){return e.top!==t.top&&e.bottom!==t.bottom}(e,t)}(i,r))return null;var o,a=Ko(t,e);if("top"===a)o={x:0,y:r.bottom-i.bottom};else if("bottom"===a)o={x:0,y:r.top-i.top};else if("right"===a)o={x:r.left-i.left,y:0};else{if("left"!==a)return null;o={x:r.right-i.right,y:0}}return Ko(n,{x:e.x+o.x,y:e.y+o.y})!==a?null:o}(i,t,n);if(c)return c;var u=s.x*(n.width/t.width),l=s.y*(n.height/t.height),p=o.x+u,h=o.y+l;return Vo({x:p+a.x-e.x,y:h+a.y-e.y})}var ru={width:90,height:20};function ou(e,t,n,i){jc.call(this,e),this.postExecute("element.updateProperties",(function(e){var n=e.context,i=n.element,r=n.properties;"name"in r&&t.updateLabel(i,r.name)})),this.postExecute(["shape.create","connection.create"],(function(e){var n=e.context;if(!1!==(n.hints||{}).createElementsBehavior){var r=n.shape||n.connection,o=r.businessObject;if(!Xi(r)&&Vi(r)&&ki(r)){var a=Yi(r),s=i.getExternalLabelBounds(ru,ki(r));t.createLabel(r,a,{id:o.id+"_label",businessObject:o,width:s.width,height:s.height})}}})),this.postExecute("shape.delete",(function(e){var n=e.context,i=n.labelTarget,r=n.hints||{};i&&!1!==r.unsetLabel&&t.updateLabel(i,null,null,{removeShape:!1})})),this.postExecute(["label.create"],(function(e){var t,i=e.context.shape;i.labelTarget&&bi(i.labelTarget||i,"postit:BoardElement")&&((t=i.businessObject.di).label||(t.label=n.create("postitDi:PostitLabel",{bounds:n.create("dc:Bounds")})),G(t.label.bounds,{x:i.x,y:i.y,width:i.width,height:i.height}))})),this.postExecute(["connection.layout","connection.updateWaypoints"],(function(e){var n=e.context;if(!1!==(n.hints||{}).labelBehavior){var i,r=n.connection.label;r&&r.parent&&(i=function(e){var t=e.context,n=t.connection,i=n.label,r=G({},t.hints),o=t.newWaypoints||n.waypoints,a=t.oldWaypoints;return void 0===r.startChanged&&(r.startChanged=!!r.connectionStart),void 0===r.endChanged&&(r.endChanged=!!r.connectionEnd),function(e,t,n,i){var r=0,o=0,a=function(e){return{x:e.x+e.width/2,y:e.y+e.height/2}}(e),s=function(e,t){var n,i,r,o,a,s,c,u,l,p,h,d,f=0;for(f=0;f<t.length-1;f++){if(Qc(n=t[f],i=t[f+1])?s=[n]:(r=Xc(e,n),o=Xc(e,i),s=Kc(n,i,e,Wc(r,o))),s.length<1)throw new Error("expected between [1, 2] circle -> line intersections");1===s.length&&(c={type:"bendpoint",position:s[0],segmentIndex:f,bendpointIndex:Qc(n,s[0])?f:f+1}),2===s.length&&(h=s[0],d=s[1],c={type:"segment",position:a={x:(h.x+d.x)/2,y:(h.y+d.y)/2},segmentIndex:f,relativeLocation:Xc(n,a)/Xc(n,i)}),u=Xc(c.position,e),(!p||l>u)&&(p=c,l=u)}return p}(a,n),c=s.segmentIndex,u=function(e,t,n,i){var r=n.segmentIndex,o=t.length-e.length;if(i.segmentMove){var a=i.segmentMove.segmentStartIndex,s=i.segmentMove.newSegmentStartIndex;return r===a?s:r>=s?r+o<s?s:r+o:r}if(i.bendpointMove){var c,u=i.bendpointMove.insert,l=i.bendpointMove.bendpointIndex;return 0===o?r:(r>=l&&(c=u?r+1:r-1),r<l&&(c=r,u&&"bendpoint"!==n.type&&l-1===r&&eu(t,l)<n.relativeLocation&&c++),c)}return 0===o?r:i.connectionStart?0===r?0:null:i.connectionEnd&&r===e.length-2?t.length-2:null}(n,t,s,i);if(null===u)return{x:r,y:o};if(u<0||u>t.length-2)return{x:r,y:o};var l,p,h,d,f,y,v=tu(n,c),g=tu(t,u),m=s.position,x=(d=m,f=Gc((h=v)[0],h[1]),y=Gc(h[0],d),0===f?0:y/f),_=(l=g,p=$c(v),$c(l)-p);if("bendpoint"===s.type){var w=t.length-n.length,b=s.bendpointIndex,E=n[b];if(-1!==t.indexOf(E))return{x:r,y:o};if(0===w){var S=t[b];return{x:S.x-s.position.x,y:S.y-s.position.y}}w<0&&0!==b&&b<n.length-1&&(x=eu(n,b))}var T,k,C=(g[1].x-g[0].x)*x+g[0].x,M=(g[1].y-g[0].y)*x+g[0].y,P=(T={x:a.x-m.x,y:a.y-m.y},(k=_)?{x:Math.cos(k)*T.x-Math.sin(k)*T.y,y:Math.sin(k)*T.x+Math.cos(k)*T.y}:T);return Vo({x:r=C+P.x-a.x,y:o=M+P.y-a.y})}(i,o,a,r)}(e),t.moveShape(r,i))}})),this.postExecute(["shape.replace"],(function(e){var t=e.context,n=t.newShape,i=t.oldShape,r=Ei(n);r&&Vi(r)&&i.label&&n.label&&(n.label.x=i.label.x,n.label.y=i.label.y)})),this.postExecute("shape.resize",(function(e){var n,i=e.context,r=i.shape,o=i.newBounds,a=i.oldBounds;if(qi(r)){var s=r.label,c=function(e,t,n){return Vo(Yr(nu(e,t,n),e))}(function(e,t){if(t.length)return Fc(e,function(e,t){return R(t.map((function(t){return{line:t,distance:Hc(e,t)}})),"distance")[0].line}(e,t))}(Xo(s),[[{x:(n=a).x,y:n.y},{x:n.x+(n.width||0),y:n.y}],[{x:n.x+(n.width||0),y:n.y},{x:n.x+(n.width||0),y:n.y+(n.height||0)}],[{x:n.x,y:n.y+(n.height||0)},{x:n.x+(n.width||0),y:n.y+(n.height||0)}],[{x:n.x,y:n.y},{x:n.x,y:n.y+(n.height||0)}]]),a,o);t.moveShape(s,c)}}))}function au(e,t,n,i,r,o){i.invoke(jc,this),this._postitReplace=e,this._elementRegistry=n,this._selection=o,this.postExecuted(["elements.move"],500,(function(e){var n=e.context,i=n.newParent,r=n.newHost,o=[];b(n.closure.topLevel,(function(e){o=o.concat(e)})),1===o.length&&r&&(i=r);var a=t.canReplace(o,i);a&&this.replaceElements(o,a.replacements,r)}),this),this.postExecute(["shape.replace"],1500,(function(e){var n,i=e.context,r=i.oldShape,o=i.newShape,a=r.attachers;a&&a.length&&(n=t.canReplace(a,o),this.replaceElements(a,n.replacements))}),this),this.postExecuted(["shape.replace"],1500,(function(e){var t=e.context,n=t.oldShape,i=t.newShape;r.unclaimId(n.businessObject.id,n.businessObject),r.updateProperties(i,{id:n.id})}))}function su(e,t,n,i){t.invoke(jc,this),this.preExecute("shape.delete",(function(e){var t=e.context.shape,n=t.businessObject;Xi(t)||i.unclaimId(n.id,n)})),this.preExecute("canvas.updateRoot",(function(){var t=e.getRootElement().businessObject;n.ids.unclaim(t.id)}))}function cu(e){jc.call(this,e),this.execute("shape.create",(function(e){var t=e.context.shape;if(bi(t,"postit:Postit")){const e=Ei(t);!e.color&&G(e,{color:t.color})}if(bi(t,"postit:Image")){const e=Ei(t);!e.source&&G(e,{source:t.source})}}))}function uu(e,t,n){jc.call(this,e),this.postExecute("element.updateLabel",(function(e){var n=e.element,i=e.newLabel;bi(n,"postit:TextBox")&&lu(i)&&t.removeElements([n])}),!0),e.on("directEditing.cancel",1001,(function(e){var i=e.active.element;bi(i,"postit:TextBox")&&lu(Ei(i).name)&&(n._active=!1,t.removeElements([i]))}))}function lu(e){return!e||""===e}r()(ou,jc),ou.$inject=["eventBus","modeling","postitFactory","textRenderer"],r()(au,jc),au.prototype.replaceElements=function(e,t){var n=this._elementRegistry,i=this._postitReplace,r=this._selection;b(t,(function(t){var r={type:t.newElementType},o=n.get(t.oldElementId),a=e.indexOf(o);e[a]=i.replaceElement(o,r,{select:!1})})),t&&r.select(e)},au.$inject=["postitReplace","postitRules","elementRegistry","injector","modeling","selection"],r()(su,jc),su.$inject=["canvas","injector","moddle","modeling"],r()(cu,jc),cu.$inject=["eventBus"],r()(uu,jc),uu.$inject=["eventBus","modeling","directEditing"];const pu={__init__:["adaptiveLabelPositioningBehavior","appendBehavior","fixHoverBehavior","importDockingFix","labelBehavior","replaceElementBehaviour","unclaimIdBehavior","createBoardElementBehavior","emptyTextBoxBehavior"],adaptiveLabelPositioningBehavior:["type",Ac],appendBehavior:["type",Oc],fixHoverBehavior:["type",Nc],importDockingFix:["type",zc],labelBehavior:["type",ou],replaceElementBehaviour:["type",au],unclaimIdBehavior:["type",su],createBoardElementBehavior:["type",cu],emptyTextBoxBehavior:["type",uu]};function hu(e){jc.call(this,e),this.init()}function du(e){hu.call(this,e)}function fu(e){return bi(e,"postit:Group")&&!e.labelTarget}function yu(e,t){return!!(Xi(e)||fu(e)||bi(e,"postit:BoardElement")&&bi(t,"postit:PostitBoard"))}function vu(e,t){return Array.isArray(e)||(e=[e]),1===e.length&&!Xi(e[0])&&!bi(t,"postit:BoardElement")&&"attach"}function gu(e,t){return!t||e.every((function(e){return yu(e,t)}))}function mu(e,t,n,i){return!!t&&(!(!Xi(e)&&!fu(e))||n!==t&&(!n||(r=n,-1===function(e){for(var t=[];e;)(e=e.parent)&&t.push(e);return t}(t).indexOf(r)))&&yu(e,t));var r}function xu(e,t){return Si(e,["postit:Postit","postit:TextBox"])?!t||t.width>=50&&t.height>=50:!!bi(e,"postit:Group")||!!bi(e,"postit:Image")}hu.$inject=["eventBus"],r()(hu,jc),hu.prototype.addRule=function(e,t,n){var i=this;"string"==typeof e&&(e=[e]),e.forEach((function(e){i.canExecute(e,t,(function(e,t,i){return n(e)}),!0)}))},hu.prototype.init=function(){},r()(du,hu),du.$inject=["eventBus"],du.prototype.init=function(){this.addRule("shape.resize",(function(e){return xu(e.shape,e.newBounds)})),this.addRule("elements.create",(function(e){var t=e.elements,n=(e.position,e.target);return S(t,(function(e){return e.host?vu(e,e.host):mu(e,n,null)}))})),this.addRule("elements.move",(function(e){var t=e.target,n=e.shapes;return e.position,vu(n,t)||gu(n,t)})),this.addRule("shape.create",(function(e){return mu(e.shape,e.target,e.source,e.position)})),this.addRule("shape.attach",(function(e){return vu(e.shape,e.target,e.position)})),this.addRule("element.copy",(function(e){return e.element,e.elements,!0}))},du.prototype.canMove=gu,du.prototype.canAttach=vu,du.prototype.canDrop=yu,du.prototype.canCreate=mu,du.prototype.canReplace=function(e,t){return!!t},du.prototype.canResize=xu,du.prototype.canCopy=function(e,t){return!0};const _u={__depends__:[jo],__init__:["postitRules"],postitRules:["type",du]};function wu(e,t){e.on("saveXML.start",2e3,(function(){var e,n=t.getRootElement(),i=Ei(n).di;e=k(w(pt([n],!1),(function(e){return e!==n&&!e.labelTarget})),Ci),i.set("planeElement",e)}))}wu.$inject=["eventBus","canvas"];const bu={__init__:["postitDiOrdering"],postitDiOrdering:["type",wu]};function Eu(e){jc.call(this,e);var t=this;this.preExecute(["shape.create","connection.create"],(function(e){var n=e.context,i=n.shape||n.connection,r=n.parent,o=t.getOrdering(i,r);o&&(void 0!==o.parent&&(n.parent=o.parent),n.parentIndex=o.index)})),this.preExecute(["shape.move","connection.move"],(function(e){var n=e.context,i=n.shape||n.connection,r=n.newParent||i.parent,o=t.getOrdering(i,r);o&&(void 0!==o.parent&&(n.newParent=o.parent),n.newParentIndex=o.index)}))}function Su(e,t,n){Eu.call(this,e);var i=[{type:"postit:BoardElement",order:{level:5}}];function r(e){var t=e.order;return t||(e.order=t=function(e){if(e.labelTarget)return{level:10};var t=_(i,(function(t){return Si(e,[t.type])}));return t&&t.order||{level:1}}(e)),t}this.getOrdering=function(e,i){if(e.labelTarget)return{parent:t.getRootElement(),index:-1};var o=r(e);o.containers&&(i=function(e,t,i){for(var r=t;r&&!Si(r,i);)r=r.parent;if(!r)throw new Error(n("no parent for {element} in {parent}",{element:e.id,parent:t.id}));return r}(e,i,o.containers));var a=i.children.indexOf(e),s=function(e,t){t=L(t);var n=f(e)?-1:void 0;return b(e,(function(e,i){if(t(e,i))return n=i,!1})),n}(i.children,(function(t){return!(!e.labelTarget&&t.labelTarget)&&o.level<r(t).level}));return-1!==s&&-1!==a&&a<s&&(s-=1),{index:s,parent:i}}}Eu.prototype.getOrdering=function(e,t){return null},r()(Eu,jc),Su.$inject=["eventBus","canvas","translate"],r()(Su,Eu);const Tu={__depends__:[Ui],__init__:["postitOrderingProvider"],postitOrderingProvider:["type",Su]};function ku(e,t){this._handlerMap={},this._stack=[],this._stackIdx=-1,this._currentExecution={actions:[],dirty:[],trigger:null},this._injector=t,this._eventBus=e,this._uid=1,e.on(["diagram.destroy","diagram.clear"],(function(){this.clear(!1)}),this)}ku.$inject=["eventBus","injector"],ku.prototype.execute=function(e,t){if(!e)throw new Error("command required");this._currentExecution.trigger="execute";var n={command:e,context:t};this._pushAction(n),this._internalExecute(n),this._popAction(n)},ku.prototype.canExecute=function(e,t){var n={command:e,context:t},i=this._getHandler(e),r=this._fire(e,"canExecute",n);if(void 0===r){if(!i)return!1;i.canExecute&&(r=i.canExecute(t))}return r},ku.prototype.clear=function(e){this._stack.length=0,this._stackIdx=-1,!1!==e&&this._fire("changed",{trigger:"clear"})},ku.prototype.undo=function(){var e,t=this._getUndoAction();if(t){for(this._currentExecution.trigger="undo",this._pushAction(t);t&&(this._internalUndo(t),(e=this._getUndoAction())&&e.id===t.id);)t=e;this._popAction()}},ku.prototype.redo=function(){var e,t=this._getRedoAction();if(t){for(this._currentExecution.trigger="redo",this._pushAction(t);t&&(this._internalExecute(t,!0),(e=this._getRedoAction())&&e.id===t.id);)t=e;this._popAction()}},ku.prototype.register=function(e,t){this._setHandler(e,t)},ku.prototype.registerHandler=function(e,t){if(!e||!t)throw new Error("command and handlerCls must be defined");var n=this._injector.instantiate(t);this.register(e,n)},ku.prototype.canUndo=function(){return!!this._getUndoAction()},ku.prototype.canRedo=function(){return!!this._getRedoAction()},ku.prototype._getRedoAction=function(){return this._stack[this._stackIdx+1]},ku.prototype._getUndoAction=function(){return this._stack[this._stackIdx]},ku.prototype._internalUndo=function(e){var t=this,n=e.command,i=e.context,r=this._getHandler(n);this._atomicDo((function(){t._fire(n,"revert",e),r.revert&&t._markDirty(r.revert(i)),t._revertedAction(e),t._fire(n,"reverted",e)}))},ku.prototype._fire=function(e,t,n){arguments.length<3&&(n=t,t=null);var i,r,o,a=t?[e+"."+t,t]:[e];for(n=this._eventBus.createEvent(n),i=0;(r=a[i])&&(o=this._eventBus.fire("commandStack."+r,n),!n.cancelBubble);i++);return o},ku.prototype._createId=function(){return this._uid++},ku.prototype._atomicDo=function(e){var t=this._currentExecution;t.atomic=!0;try{e()}finally{t.atomic=!1}},ku.prototype._internalExecute=function(e,t){var n=this,i=e.command,r=e.context,o=this._getHandler(i);if(!o)throw new Error("no command handler registered for <"+i+">");this._pushAction(e),t||(this._fire(i,"preExecute",e),o.preExecute&&o.preExecute(r),this._fire(i,"preExecuted",e)),this._atomicDo((function(){n._fire(i,"execute",e),o.execute&&n._markDirty(o.execute(r)),n._executedAction(e,t),n._fire(i,"executed",e)})),t||(this._fire(i,"postExecute",e),o.postExecute&&o.postExecute(r),this._fire(i,"postExecuted",e)),this._popAction(e)},ku.prototype._pushAction=function(e){var t=this._currentExecution,n=t.actions,i=n[0];if(t.atomic)throw new Error("illegal invocation in <execute> or <revert> phase (action: "+e.command+")");e.id||(e.id=i&&i.id||this._createId()),n.push(e)},ku.prototype._popAction=function(){var e=this._currentExecution,t=e.trigger,n=e.actions,i=e.dirty;n.pop(),n.length||(this._eventBus.fire("elements.changed",{elements:B("id",i.reverse())}),i.length=0,this._fire("changed",{trigger:t}),e.trigger=null)},ku.prototype._markDirty=function(e){var t=this._currentExecution;e&&(e=f(e)?e:[e],t.dirty=t.dirty.concat(e))},ku.prototype._executedAction=function(e,t){var n=++this._stackIdx;t||this._stack.splice(n,this._stack.length,e)},ku.prototype._revertedAction=function(e){this._stackIdx--},ku.prototype._getHandler=function(e){return this._handlerMap[e]},ku.prototype._setHandler=function(e,t){if(!e||!t)throw new Error("command and handler required");if(this._handlerMap[e])throw new Error("overriding handler for command <"+e+">");this._handlerMap[e]=t};const Cu={commandStack:["type",ku]};var Mu=new wr("tt");function Pu(e,t){e.style.display=!1===t?"none":""}var ju=".djs-tooltip";function Bu(e,t){var n,i;this._eventBus=e,this._canvas=t,this._ids=Mu,this._tooltipDefaults={show:{minZoom:.7,maxZoom:5}},this._tooltips={},this._tooltipRoot=(n=t.getContainer(),i=he('<div class="djs-tooltip-container" style="position: absolute; width: 0; height: 0;" />'),n.insertBefore(i,n.firstChild),i);var r=this;le(this._tooltipRoot,ju,"mousedown",(function(e){e.stopPropagation()})),le(this._tooltipRoot,ju,"mouseover",(function(e){r.trigger("mouseover",e)})),le(this._tooltipRoot,ju,"mouseout",(function(e){r.trigger("mouseout",e)})),this._init()}Bu.$inject=["eventBus","canvas"],Bu.prototype.add=function(e){if(!e.position)throw new Error("must specifiy tooltip position");if(!e.html)throw new Error("must specifiy tooltip html");var t=this._ids.next();return e=G({},this._tooltipDefaults,e,{id:t}),this._addTooltip(e),e.timeout&&this.setTimeout(e),t},Bu.prototype.trigger=function(e,t){var n=t.delegateTarget||t.target,i=this.get(V(n,"data-tooltip-id"));i&&("mouseover"===e&&i.timeout&&this.clearTimeout(i),"mouseout"===e&&i.timeout&&(i.timeout=1e3,this.setTimeout(i)))},Bu.prototype.get=function(e){return"string"!=typeof e&&(e=e.id),this._tooltips[e]},Bu.prototype.clearTimeout=function(e){if(e=this.get(e)){var t=e.removeTimer;t&&(clearTimeout(t),e.removeTimer=null)}},Bu.prototype.setTimeout=function(e){if(e=this.get(e)){this.clearTimeout(e);var t=this;e.removeTimer=setTimeout((function(){t.remove(e)}),e.timeout)}},Bu.prototype.remove=function(e){var t=this.get(e);t&&(ge(t.html),ge(t.htmlContainer),delete t.htmlContainer,delete this._tooltips[t.id])},Bu.prototype.show=function(){Pu(this._tooltipRoot)},Bu.prototype.hide=function(){Pu(this._tooltipRoot,!1)},Bu.prototype._updateRoot=function(e){var t=e.scale||1,n=e.scale||1,i="matrix("+t+",0,0,"+n+","+-1*e.x*t+","+-1*e.y*n+")";this._tooltipRoot.style.transform=i,this._tooltipRoot.style["-ms-transform"]=i},Bu.prototype._addTooltip=function(e){var t,n=e.id,i=e.html,r=this._tooltipRoot;i.get&&i.constructor.prototype.jquery&&(i=i.get(0)),m(i)&&(i=he(i)),(t=he('<div data-tooltip-id="'+n+'" class="djs-tooltip" style="position: absolute">')).appendChild(i),e.type&&Z(t).add("djs-tooltip-"+e.type),e.className&&Z(t).add(e.className),e.htmlContainer=t,r.appendChild(t),this._tooltips[n]=e,this._updateTooltip(e)},Bu.prototype._updateTooltip=function(e){var t,n,i,r=e.position;t=e.htmlContainer,n=r.x,i=r.y,G(t.style,{left:n+"px",top:i+"px"})},Bu.prototype._updateTooltipVisibilty=function(e){b(this._tooltips,(function(t){var n=t.show,i=t.htmlContainer,r=!0;n&&((n.minZoom>e.scale||n.maxZoom<e.scale)&&(r=!1),Pu(i,r))}))},Bu.prototype._init=function(){var e=this;this._eventBus.on("canvas.viewbox.changing",(function(t){e.hide()})),this._eventBus.on("canvas.viewbox.changed",(function(t){var n;n=t.viewbox,e._updateRoot(n),e._updateTooltipVisibilty(n),e.show()}))};const Au={__init__:["tooltips"],tooltips:["type",Bu]};function Ru(e,t){if("function"!=typeof t)throw new Error("removeFn iterator must be a function");if(e){for(var n;n=e[0];)t(n);return e}}function Ou(e,t,n){jc.call(this,t);var i=e.get("movePreview",!1);t.on("shape.move.start",1400,(function(e){var t=e.context,n=t.shapes,i=t.validatedShapes;t.shapes=Nu(n),t.validatedShapes=Nu(i)})),i&&t.on("shape.move.start",250,(function(e){var t=e.context,n=t.shapes,r=[];b(n,(function(e){b(e.labels,(function(n){n.hidden||-1!==t.shapes.indexOf(n)||r.push(n),e.labelTarget&&r.push(e)}))})),b(r,(function(e){i.makeDraggable(t,e,!0)}))})),this.preExecuted("elements.move",1400,(function(e){var t=e.context.closure,n=t.enclosedElements,i=[];b(n,(function(e){b(e.labels,(function(e){n[e.id]||i.push(e)}))})),t.addAll(i)})),this.preExecute(["connection.delete","shape.delete"],(function(e){var t=e.context;Ru((t.connection||t.shape).labels,(function(e){n.removeShape(e,{nested:!0})}))})),this.execute("shape.delete",(function(e){var t=e.context,n=t.shape,i=n.labelTarget;i&&(t.labelTargetIndex=_t(i.labels,n),t.labelTarget=i,n.labelTarget=null)})),this.revert("shape.delete",(function(e){var t=e.context,n=t.shape,i=t.labelTarget,r=t.labelTargetIndex;i&&(xt(i.labels,n,r),n.labelTarget=i)}))}function Nu(e){return w(e,(function(t){return-1===e.indexOf(t.labelTarget)}))}r()(Ou,jc),Ou.$inject=["injector","eventBus","modeling"];const Lu={__init__:["labelSupport"],labelSupport:["type",Ou]};var zu="attach-ok";function Du(e,t,n,i,r){jc.call(this,t);var o=e.get("movePreview",!1);t.on("shape.move.start",1401,(function(e){var t,n,i=e.context,r=i.shapes,o=i.validatedShapes;i.shapes=(n=Iu(t=r),A("id",t,n)),i.validatedShapes=function(e){var t=j(e,"id");return w(e,(function(e){for(;e;){if(e.host&&t[e.host.id])return!1;e=e.parent}return!0}))}(o)})),o&&t.on("shape.move.start",251,(function(e){var t=e.context;b(Iu(t.shapes),(function(e){o.makeDraggable(t,e,!0),b(e.labels,(function(e){o.makeDraggable(t,e,!0)}))}))})),o&&t.on("shape.move.start",(function(e){var i=e.context.shapes;if(1===i.length){var r=i[0].host;r&&(n.addMarker(r,zu),t.once(["shape.move.out","shape.move.cleanup"],(function(){n.removeMarker(r,zu)})))}})),this.preExecuted("elements.move",1401,(function(e){var t=e.context,n=t.closure;b(Iu(t.shapes),(function(e){n.add(e,n.topLevel[e.host.id])}))})),this.postExecuted("elements.move",(function(e){var t=e.context,n=t.shapes,i=t.newHost;i&&1!==n.length||b(i?n:w(n,(function(e){var t,i=e.host;return function(e){return!!e.host}(e)&&(t=i,!(-1!==n.indexOf(t)))})),(function(e){r.updateAttachment(e,i)}))})),this.postExecuted("elements.move",(function(e){b(e.context.shapes,(function(e){b(e.attachers,(function(e){b(e.outgoing.slice(),(function(e){i.allowed("connection.reconnect",{connection:e,source:e.source,target:e.target})||r.removeConnection(e)})),b(e.incoming.slice(),(function(e){i.allowed("connection.reconnect",{connection:e,source:e.source,target:e.target})||r.removeConnection(e)}))}))}))})),this.postExecute("shape.create",(function(e){var t=e.context,n=t.shape,i=t.host;i&&r.updateAttachment(n,i)})),this.postExecute("shape.replace",(function(e){var t=e.context,n=t.oldShape,o=t.newShape;Ru(n.attachers,(function(e){"attach"===i.allowed("elements.move",{target:o,shapes:[e]})?r.updateAttachment(e,o):r.removeShape(e)})),o.attachers.length&&b(o.attachers,(function(e){var t=iu(e,n,o);r.moveShape(e,t,e.parent)}))})),this.postExecute("shape.resize",(function(e){var t=e.context,n=t.shape,i=t.oldBounds,o=t.newBounds,a=n.attachers;!1!==(t.hints||{}).attachSupport&&b(a,(function(e){var t=iu(e,i,o);r.moveShape(e,t,e.parent),b(e.labels,(function(e){r.moveShape(e,t,e.parent)}))}))})),this.preExecute("shape.delete",(function(e){var t=e.context.shape;Ru(t.attachers,(function(e){r.removeShape(e)})),t.host&&r.updateAttachment(t,null)}))}function Iu(e){return c(k(e,(function(e){return e.attachers||[]})))}r()(Du,jc),Du.$inject=["injector","eventBus","canvas","rules","modeling"];const $u={__depends__:[jo],__init__:["attachSupport"],attachSupport:["type",Du]};function Fu(e,t){this._eventBus=e,this._dragging=t,this._tools=[],this._active=null}Fu.$inject=["eventBus","dragging"],Fu.prototype.registerTool=function(e,t){var n=this._tools;if(!t)throw new Error('A tool has to be registered with it\'s "events"');n.push(e),this.bindEvents(e,t)},Fu.prototype.isActive=function(e){return e&&this._active===e},Fu.prototype.length=function(e){return this._tools.length},Fu.prototype.setActive=function(e){var t=this._eventBus;this._active!==e&&(this._active=e,t.fire("tool-manager.update",{tool:e}))},Fu.prototype.bindEvents=function(e,t){var n=this._eventBus,i=this._dragging,r=[];n.on(t.tool+".init",(function(t){if(!t.context.reactivate&&this.isActive(e))return this.setActive(null),void i.cancel();this.setActive(e)}),this),b(t,(function(e){r.push(e+".ended"),r.push(e+".canceled")})),n.on(r,250,(function(e){this._active&&(function(e){var t=e.originalEvent&&e.originalEvent.target;return t&&ie(t,'.group[data-group="tools"]')}(e)||this.setActive(null))}),this)};const Hu={__depends__:[ko],__init__:["toolManager"],toolManager:["type",Fu]};function Gu(e,t){return-1!==e.indexOf(t)}var Uu=Math.abs,Wu=Math.round,Vu={x:"width",y:"height"},qu="crosshair",Yu={n:"top",w:"left",s:"bottom",e:"right"},Xu={n:"s",w:"e",s:"n",e:"w"};function Ku(e,t,n,i,r,o,a){this._canvas=e,this._dragging=t,this._eventBus=n,this._modeling=i,this._rules=r,this._toolManager=o,this._mouse=a;var s=this;o.registerTool("space",{tool:"spaceTool.selection",dragging:"spaceTool"}),n.on("spaceTool.selection.end",(function(e){n.once("spaceTool.selection.ended",(function(){s.activateMakeSpace(e.originalEvent)}))})),n.on("spaceTool.move",1500,(function(e){var t=e.context,n=t.initialized;n||(n=t.initialized=s.init(e,t)),n&&Ju(e)})),n.on("spaceTool.end",(function(e){var t=e.context,i=t.axis,r=t.direction,o=t.movingShapes,a=t.resizingShapes,c=t.start;if(t.initialized){Ju(e);var u={x:0,y:0};u[i]=Wu(e["d"+i]),s.makeSpace(o,a,u,r,c),n.once("spaceTool.ended",(function(e){s.activateSelection(e.originalEvent,!0,!0)}))}}))}function Zu(e){return{top:e.top-20,right:e.right+20,bottom:e.bottom+20,left:e.left-20}}function Ju(e){var t,n,i=e.context.spaceToolConstraints;i&&(v(i.left)&&(t=Math.max(e.x,i.left),e.dx=e.dx+t-e.x,e.x=t),v(i.right)&&(t=Math.min(e.x,i.right),e.dx=e.dx+t-e.x,e.x=t),v(i.top)&&(n=Math.max(e.y,i.top),e.dy=e.dy+n-e.y,e.y=n),v(i.bottom)&&(n=Math.min(e.y,i.bottom),e.dy=e.dy+n-e.y,e.y=n))}function Qu(e,t){return-1!==e.indexOf(t)}function el(e){return!!e.waypoints}function tl(e){return!!e.labelTarget}Ku.$inject=["canvas","dragging","eventBus","modeling","rules","toolManager","mouse"],Ku.prototype.activateSelection=function(e,t,n){this._dragging.init(e,"spaceTool.selection",{autoActivate:t,cursor:qu,data:{context:{reactivate:n}},trapClick:!1})},Ku.prototype.activateMakeSpace=function(e){this._dragging.init(e,"spaceTool",{autoActivate:!0,cursor:qu,data:{context:{}}})},Ku.prototype.makeSpace=function(e,t,n,i,r){return this._modeling.createSpace(e,t,n,i,r)},Ku.prototype.init=function(e,t){var n=Uu(e.dx)>Uu(e.dy)?"x":"y",i=e["d"+n],r=e[n]-i;if(Uu(i)<5)return!1;i<0&&(i*=-1),ar(e)&&(i*=-1);var o=function(e,t){if("x"===e){if(t>0)return"e";if(t<0)return"w"}if("y"===e){if(t>0)return"s";if(t<0)return"n"}return null}(n,i),a=pt(this._canvas.getRootElement(),!0),s=this.calculateAdjustments(a,n,i,r);return G(t,s,{axis:n,direction:o,spaceToolConstraints:function(e,t,n,i,r){var o=e.movingShapes,a=e.resizingShapes;if(a.length){var s,c,u={};return b(a,(function(e){var l,p,h,d=qo(e),f=w(e.children,(function(e){return!(el(e)||tl(e)||Qu(o,e)||Qu(a,e))})),y=w(e.children,(function(e){return!el(e)&&!tl(e)&&Qu(o,e)}));f.length&&(p=Zu(qo(ht(f))),l=i-d[Yu[n]]+p[Yu[n]],"n"===n?u.bottom=c=v(c)?Math.min(c,l):l:"w"===n?u.right=c=v(c)?Math.min(c,l):l:"s"===n?u.top=s=v(s)?Math.max(s,l):l:"e"===n&&(u.left=s=v(s)?Math.max(s,l):l)),y.length&&(h=Zu(qo(ht(y))),l=i-h[Yu[Xu[n]]]+d[Yu[Xu[n]]],"n"===n?u.bottom=c=v(c)?Math.min(c,l):l:"w"===n?u.right=c=v(c)?Math.min(c,l):l:"s"===n?u.top=s=v(s)?Math.max(s,l):l:"e"===n&&(u.left=s=v(s)?Math.max(s,l):l));var g=r&&r[e.id];g&&("n"===n?(l=i+e[Vu[t]]-g[Vu[t]],u.bottom=c=v(c)?Math.min(c,l):l):"w"===n?(l=i+e[Vu[t]]-g[Vu[t]],u.right=c=v(c)?Math.min(c,l):l):"s"===n?(l=i-e[Vu[t]]+g[Vu[t]],u.top=s=v(s)?Math.max(s,l):l):"e"===n&&(l=i-e[Vu[t]]+g[Vu[t]],u.left=s=v(s)?Math.max(s,l):l))})),u}}(s,n,o,r,this._eventBus.fire("spaceTool.getMinDimensions",{axis:n,direction:o,shapes:s.resizingShapes,start:r})),start:r}),Ur("resize-"+("x"===n?"ew":"ns")),!0},Ku.prototype.calculateAdjustments=function(e,t,n,i){var r=this._rules,o=[],a=[];return b(e,(function(e){if(e.parent&&!el(e)){var s=e[t],c=s+e[Vu[t]];return n>0&&s>i||n<0&&c<i?o.push(e):s<i&&c>i&&r.allowed("shape.resize",{shape:e})?a.push(e):void 0}})),{movingShapes:o,resizingShapes:a}},Ku.prototype.toggle=function(){if(this.isActive())return this._dragging.cancel();var e=this._mouse.getLastMoveEvent();this.activateSelection(e,!!e)},Ku.prototype.isActive=function(){var e=this._dragging.context();return e&&/^spaceTool/.test(e.prefix)};var nl="djs-dragging",il="djs-resizing",rl=Math.max;function ol(e,t,n,i,r){function o(e,t){b(e,(function(e){r.addDragger(e,t),n.addMarker(e,nl)}))}e.on("spaceTool.selection.start",(function(e){var t=n.getLayer("space"),r=e.context,o=Ne("g");be(o,i.cls("djs-crosshair-group",["no-events"])),xe(t,o);var a=Ne("path");be(a,"d","M 0,-10000 L 0,10000"),Ce(a).add("djs-crosshair"),xe(o,a);var s=Ne("path");be(s,"d","M -10000,0 L 10000,0"),Ce(s).add("djs-crosshair"),xe(o,s),r.crosshairGroup=o})),e.on("spaceTool.selection.move",(function(e){qt(e.context.crosshairGroup,e.x,e.y)})),e.on("spaceTool.selection.cleanup",(function(e){var t=e.context.crosshairGroup;t&&Pe(t)})),e.on("spaceTool.move",250,(function(e){var a=e.context,s=a.line,c=a.axis,u=a.movingShapes,l=a.resizingShapes;if(a.initialized){if(!a.dragGroup){var p=n.getLayer("space");be(s=Ne("path"),"d","M0,0 L0,0"),Ce(s).add("djs-crosshair"),xe(p,s),a.line=s;var h=Ne("g");be(h,i.cls("djs-drag-group",["no-events"])),xe(n.getDefaultLayer(),h),o(u,h),o(a.movingConnections=t.filter((function(e){var t=!1;b(u,(function(n){b(n.outgoing,(function(n){e===n&&(t=!0)}))}));var n=!1;b(u,(function(t){b(t.incoming,(function(t){e===t&&(n=!0)}))}));var i=!1;b(l,(function(t){b(t.outgoing,(function(t){e===t&&(i=!0)}))}));var r=!1;return b(l,(function(t){b(t.incoming,(function(t){e===t&&(r=!0)}))})),function(e){return e.waypoints}(e)&&(t||i)&&(n||r)})),h),a.dragGroup=h}if(!a.frameGroup){var d=Ne("g");be(d,i.cls("djs-frame-group",["no-events"])),xe(n.getDefaultLayer(),d);var f=[];b(l,(function(e){var t=r.addFrame(e,d),i=t.getBBox();f.push({element:t,initialBounds:i}),n.addMarker(e,il)})),a.frameGroup=d,a.frames=f}be(s,{d:{x:"M"+e.x+", -10000 L"+e.x+", 10000",y:"M -10000, "+e.y+" L 10000, "+e.y}[c]});var y={x:e.dx,y:e.dy};y[{x:"y",y:"x"}[a.axis]]=0,qt(a.dragGroup,y.x,y.y),b(a.frames,(function(e){var t,n,i=e.element,r=e.initialBounds;"e"===a.direction?be(i,{width:rl(r.width+y.x,5)}):be(i,{width:t=rl(r.width-y.x,5),x:r.x+r.width-t}),"s"===a.direction?be(i,{height:rl(r.height+y.y,5)}):be(i,{height:n=rl(r.height-y.y,5),y:r.y+r.height-n})}))}})),e.on("spaceTool.cleanup",(function(e){var t=e.context,i=t.movingShapes,r=t.movingConnections,o=t.resizingShapes,a=t.line,s=t.dragGroup,c=t.frameGroup;b(i,(function(e){n.removeMarker(e,nl)})),b(r,(function(e){n.removeMarker(e,nl)})),s&&(Pe(a),Pe(s)),b(o,(function(e){n.removeMarker(e,il)})),c&&Pe(c)}))}ol.$inject=["eventBus","elementRegistry","canvas","styles","previewSupport"];const al={__init__:["spaceToolPreview"],__depends__:[ko,jo,Hu,Qa,ms],spaceTool:["type",Ku],spaceToolPreview:["type",ol]};function sl(e){this._model=e}function cl(e,t,n,i){jc.call(this,e),this._postitFactory=t,this._translate=i;var r=this;function o(e){b(e.context.oldRoot.children,(function(e){bi(e,"postit:BoardElement")&&r.updateParent(e)}))}function a(e){var t=e.context.shape;bi(t,"postit:BoardElement")&&r.updateBounds(t)}this.executed(["shape.move","shape.create","shape.delete"],ul((function(e){var t=e.context;r.updateParent(t.shape||t.connection,t.oldParent)}))),this.reverted(["shape.move","shape.create","shape.delete"],ul((function(e){var t=e.context,n=t.shape||t.connection,i=t.parent||t.newParent;r.updateParent(n,i)}))),this.executed(["canvas.updateRoot"],o),this.reverted(["canvas.updateRoot"],o),this.executed(["shape.move","shape.create","shape.resize"],ul((function(e){"label"!==e.context.shape.type&&a(e)}))),this.reverted(["shape.move","shape.create","shape.resize"],ul((function(e){"label"!==e.context.shape.type&&a(e)}))),e.on("shape.changed",(function(e){"label"===e.element.type&&a({context:{shape:e.element}})}))}function ul(e){return function(t){var n=t.context;bi(n.shape||n.connection,"postit:BoardElement")&&e(t)}}function ll(e,t,n){Ht.call(this),this._postitFactory=e,this._moddle=t,this._translate=n}function pl(e,t){this._modeling=e,this._canvas=t}function hl(e){this._modeling=e}function dl(e,t){this._canvas=e,this._layouter=t}sl.$inject=["moddle"],sl.prototype._needsId=function(e){return Si(e,["postit:BoardElement"])},sl.prototype._ensureId=function(e){var t;t=bi(e,"postit:Postit")?"Postit":(e.$type||"").replace(/^[^:]*:/g,""),t+="_",!e.id&&this._needsId(e)&&(e.id=this._model.ids.nextPrefixed(t,e))},sl.prototype.create=function(e,t){var n=this._model.create(e,t||{});return this._ensureId(n),n},sl.prototype.createDiLabel=function(){return this.create("postitDi:PostitLabel",{bounds:this.createDiBounds()})},sl.prototype.createDiShape=function(e,t,n){return this.create("postitDi:PostitShape",G({boardElement:e,bounds:this.createDiBounds(t)},n))},sl.prototype.createDiBounds=function(e){return this.create("dc:Bounds",e)},sl.prototype.createDiPlane=function(e){return this.create("postitDi:PostitPlane",{boardElement:e})},r()(cl,jc),cl.$inject=["eventBus","postitFactory","connectionDocking","translate"],cl.prototype.updateAttachment=function(e){var t=e.shape,n=t.businessObject,i=t.host;n.attachedToRef=i&&i.businessObject},cl.prototype.updateParent=function(e,t){if(!(e instanceof It)){var n=e.parent,i=e.businessObject,r=n&&n.businessObject,o=r&&r.di;this.updateSemanticParent(i,r),this.updateDiParent(i.di,o)}},cl.prototype.updateBounds=function(e){var t=e.businessObject.di,n=e instanceof It?this._getLabel(t):t,i=n.bounds;i||(i=this._postitFactory.createDiBounds(),n.set("bounds",i)),G(i,{x:e.x,y:e.y,width:e.width,height:e.height})},cl.prototype.updateDiParent=function(e,t){if(t&&!bi(t,"postitDi:PostitPlane")&&(t=t.$parent),e.$parent!==t){var n=(t||e.$parent).get("planeElement");t?(n.push(e),e.$parent=t):(mt(n,e),e.$parent=null)}},cl.prototype.updateSemanticParent=function(e,t,n){var i,r=this._translate;if(e.$parent!==t){if(bi(e,"postit:BoardElement")&&(i="boardElements"),!i)throw new Error(r("no parent for {element} in {parent}",{element:e.id,parent:t.id}));var o;if(e.$parent&&mt(o=e.$parent.get(i),e),t?((o=t.get(i)).push(e),e.$parent=t):e.$parent=null,n){var a=n.get(i);mt(o,e),t&&(a||(a=[],t.set(i,a)),a.push(e))}}},cl.prototype._getLabel=function(e){return e.label||(e.label=this._postitFactory.createDiLabel()),e.label},r()(ll,Ht),ll.$inject=["postitFactory","moddle","translate"],ll.prototype.baseCreate=Ht.prototype.create,ll.prototype.create=function(e,t){return"label"===e?this.baseCreate(e,G({type:"label"},Wi,t)):this.createPostitElement(e,t)},ll.prototype.createPostitElement=function(e,t){var n,i=this._translate,r=(t=t||{}).businessObject;if(!r){if(!t.type)throw new Error(i("no shape type specified"));r=this._postitFactory.create(t.type)}return r.di||(r.di="root"===e?this._postitFactory.createDiPlane(r,[],{id:r.id+"_di"}):this._postitFactory.createDiShape(r,{},{id:r.id+"_di"})),bi(r,"postit:Group")&&(t=G({isFrame:!0},t)),t.di&&(G(r.di,t.di),delete t.di),function(e,t,n){b(["processRef","isInterrupting","associationDirection","isForCompensation"],(function(n){void 0!==t[n]&&function(e,t,n){e[n]=t[n],delete t[n]}(e,t,n)}))}(r,t),n=this._getDefaultSize(r),t=G({businessObject:r,id:r.id},n,t),this.baseCreate(e,t)},ll.prototype._getDefaultSize=function(e){return bi(e,"postit:Postit")?{width:150,height:150}:bi(e,"postit:Group")||bi(e,"postit:Image")?{width:300,height:300}:{width:100,height:80}},pl.$inject=["modeling","canvas"],pl.prototype.preExecute=function(e){var t=this._modeling,n=e.elements,i=e.alignment;b(n,(function(e){var n={x:0,y:0};i.left?n.x=i.left-e.x:i.right?n.x=i.right-e.width-e.x:i.center?n.x=i.center-Math.round(e.width/2)-e.x:i.top?n.y=i.top-e.y:i.bottom?n.y=i.bottom-e.height-e.y:i.middle&&(n.y=i.middle-Math.round(e.height/2)-e.y),t.moveElements([e],n,e.parent)}))},pl.prototype.postExecute=function(e){},hl.$inject=["modeling"],hl.prototype.preExecute=function(e){var t=e.source;if(!t)throw new Error("source required");var n=e.target||t.parent,i=e.shape,r=e.hints||{};i=e.shape=this._modeling.createShape(i,e.position,n,{attach:r.attach}),e.shape=i},hl.prototype.postExecute=function(e){var t,n,i=e.hints||{};t=e.source,n=e.shape,T(t.outgoing,(function(e){return e.target===n}))||(i.connectionTarget===e.source?this._modeling.connect(e.shape,e.source,e.connection):this._modeling.connect(e.source,e.shape,e.connection))},dl.$inject=["canvas","layouter"],dl.prototype.execute=function(e){var t=e.connection,n=e.source,i=e.target,r=e.parent,o=e.parentIndex,a=e.hints;if(!n||!i)throw new Error("source and target required");if(!r)throw new Error("parent required");return t.source=n,t.target=i,t.waypoints||(t.waypoints=this._layouter.layoutConnection(t,a)),this._canvas.addConnection(t,r,o),t},dl.prototype.revert=function(e){var t=e.connection;return this._canvas.removeConnection(t),t.source=null,t.target=null,t};var fl=Math.round;function yl(e){this._modeling=e}function vl(e){return!!e.waypoints}yl.$inject=["modeling"],yl.prototype.preExecute=function(e){var t=e.elements,n=e.parent,i=e.parentIndex,r=e.position,o=e.hints,a=this._modeling;b(t,(function(e){v(e.x)||(e.x=0),v(e.y)||(e.y=0)}));var s=ht(t);b(t,(function(e){vl(e)&&(e.waypoints=k(e.waypoints,(function(e){return{x:fl(e.x-s.x-s.width/2+r.x),y:fl(e.y-s.y-s.height/2+r.y)}}))),G(e,{x:fl(e.x-s.x-s.width/2+r.x),y:fl(e.y-s.y-s.height/2+r.y)})}));var c=st(t),u={};b(t,(function(e){if(vl(e))u[e.id]=v(i)?a.createConnection(u[e.source.id],u[e.target.id],i,e,e.parent||n,o):a.createConnection(u[e.source.id],u[e.target.id],e,e.parent||n,o);else{var t=G({},o);-1===c.indexOf(e)&&(t.autoResize=!1),u[e.id]=v(i)?a.createShape(e,U(e,["x","y","width","height"]),e.parent||n,i,t):a.createShape(e,U(e,["x","y","width","height"]),e.parent||n,t)}})),e.elements=P(u)};var gl=Math.round;function ml(e){this._canvas=e}function xl(e){ml.call(this,e)}ml.$inject=["canvas"],ml.prototype.execute=function(e){var t=e.shape,n=e.position,i=e.parent,r=e.parentIndex;if(!i)throw new Error("parent required");if(!n)throw new Error("position required");return void 0!==n.width?G(t,n):G(t,{x:n.x-gl(t.width/2),y:n.y-gl(t.height/2)}),this._canvas.addShape(t,i,r),t},ml.prototype.revert=function(e){var t=e.shape;return this._canvas.removeShape(t),t},r()(xl,ml),xl.$inject=["canvas"];var _l=ml.prototype.execute;xl.prototype.execute=function(e){var t=e.shape;return function(e){["width","height"].forEach((function(t){void 0===e[t]&&(e[t]=0)}))}(t),t.labelTarget=e.labelTarget,_l.call(this,e)};var wl=ml.prototype.revert;function bl(e,t){this._canvas=e,this._modeling=t}function El(e,t){this._modeling=e,this._elementRegistry=t}function Sl(e,t){this._canvas=e,this._modeling=t}function Tl(e){this._modeling=e}xl.prototype.revert=function(e){return e.shape.labelTarget=null,wl.call(this,e)},bl.$inject=["canvas","modeling"],bl.prototype.execute=function(e){var t=e.connection,n=t.parent;return e.parent=n,e.parentIndex=_t(n.children,t),e.source=t.source,e.target=t.target,this._canvas.removeConnection(t),t.source=null,t.target=null,t},bl.prototype.revert=function(e){var t=e.connection,n=e.parent,i=e.parentIndex;return t.source=e.source,t.target=e.target,xt(n.children,t,i),this._canvas.addConnection(t,n),t},El.$inject=["modeling","elementRegistry"],El.prototype.postExecute=function(e){var t=this._modeling,n=this._elementRegistry;b(e.elements,(function(e){n.get(e.id)&&(e.waypoints?t.removeConnection(e):t.removeShape(e))}))},Sl.$inject=["canvas","modeling"],Sl.prototype.preExecute=function(e){var t=this._modeling,n=e.shape;Ru(n.incoming,(function(e){t.removeConnection(e,{nested:!0})})),Ru(n.outgoing,(function(e){t.removeConnection(e,{nested:!0})})),Ru(n.children,(function(e){e.waypoints?t.removeConnection(e,{nested:!0}):t.removeShape(e,{nested:!0})}))},Sl.prototype.execute=function(e){var t=this._canvas,n=e.shape,i=n.parent;return e.oldParent=i,e.oldParentIndex=_t(i.children,n),t.removeShape(n),n},Sl.prototype.revert=function(e){var t=this._canvas,n=e.shape,i=e.oldParent,r=e.oldParentIndex;return xt(i.children,n,r),t.addShape(n,i),n},Tl.$inject=["modeling"];var kl={x:"y",y:"x"};function Cl(e,t){this._layouter=e,this._canvas=t}function Ml(){}function Pl(e,t,n){var i=Ol(e),r=Nl(i,t),o=i[0];return r.length?r[r.length-1]:nu(o.original||o,n,t)}function jl(e,t,n){var i=Ol(e),r=Nl(i,t),o=i[i.length-1];return r.length?r[0]:nu(o.original||o,n,t)}function Bl(e,t,n){var i=Ol(e),r=Rl(t,n),o=i[0];return nu(o.original||o,r,t)}function Al(e,t,n){var i=Ol(e),r=Rl(t,n),o=i[i.length-1];return nu(o.original||o,r,t)}function Rl(e,t){return{x:e.x-t.x,y:e.y-t.y,width:e.width,height:e.height}}function Ol(e){var t=e.waypoints;if(!t.length)throw new Error("connection#"+e.id+": no waypoints");return t}function Nl(e,t){return w(k(e,Ll),(function(e){return function(e,t){return"intersect"===Ko(t,e,1)}(e,t)}))}function Ll(e){return e.original||e}function zl(){this.allShapes={},this.allConnections={},this.enclosedElements={},this.enclosedConnections={},this.topLevel={}}function Dl(e){this._modeling=e}function Il(e){this._helper=new Dl(e)}function $l(e){this._modeling=e,this._helper=new Dl(e)}function Fl(e){this._modeling=e}function Hl(e){return e.original||e}function Gl(e,t){this._modeling=e,this._rules=t}function Ul(e){this._modeling=e}function Wl(e){this._modeling=e}function Vl(e){return G({},e)}function ql(e){switch(e){case"n":return"y";case"w":return"x";case"s":return"y";case"e":return"x"}}function Yl(e,t,n){var i=ql(n);return/e|s/.test(n)?e[i]>t:/n|w/.test(n)?e[i]<t:void 0}function Xl(e,t){return-1!==e.indexOf(t)}function Kl(e){this._modeling=e}function Zl(e){var t={};return b(e,(function(e){t[e.id]=e.hidden,e.children&&(t=G({},t,Zl(e.children)))})),t}function Jl(e,t){var n=[];return b(e,(function(e){e.hidden=t,n=n.concat(e),e.children&&(n=n.concat(Jl(e.children,e.collapsed||t)))})),n}function Ql(e,t){var n=[];return b(e,(function(e){e.hidden=t[e.id],n=n.concat(e),e.children&&(n=n.concat(Ql(e.children,t)))})),n}function ep(e){this._modeling=e}function tp(e,t){return mt(e&&e.attachers,t)}function np(e,t,n){if(e){var i=e.attachers;i||(e.attachers=i=[]),xt(i,t,n)}}function ip(){}function rp(e,t,n){this._eventBus=e,this._elementFactory=t,this._commandStack=n;var i=this;e.on("diagram.init",(function(){i.registerHandlers(n)}))}Tl.prototype.preExecute=function(e){var t=this._modeling,n=e.groups,i=e.axis,r=e.dimension;function o(e,t){e.range.min=Math.min(t[i],e.range.min),e.range.max=Math.max(t[i]+t[r],e.range.max)}function a(e){return e[i]+e[r]/2}function s(e){return e.length-1}function c(e){return e.max-e.min}var u,l,p=n[0],h=s(n),d=n[h],f=0;b(n,(function(e,u){var l,p,d;e.elements.length<2?u&&u!==n.length-1&&(o(e,e.elements[0]),f+=c(e.range)):(p=(l=R(e.elements,i))[0],u===h&&(p=l[s(l)]),d=a(p),e.range=null,b(l,(function(n){!function(e,n){var r={y:0};r[i]=e-a(n),r[i]&&(r[kl[i]]=0,t.moveElements([n],r,n.parent))}(d,n),null!==e.range?o(e,n):e.range={min:n[i],max:n[i]+n[r]}})),u&&u!==n.length-1&&(f+=c(e.range)))})),l=Math.abs(d.range.min-p.range.max),(u=Math.round((l-f)/(n.length-1)))<n.length-1||b(n,(function(e,o){var a,s={};e!==p&&e!==d&&(a=n[o-1],e.range.max=0,b(e.elements,(function(n,o){s[kl[i]]=0,s[i]=a.range.max-n[i]+u,e.range.min!==n[i]&&(s[i]+=n[i]-e.range.min),s[i]&&t.moveElements([n],s,n.parent),e.range.max=Math.max(n[i]+n[r],o?e.range.max:0)})))}))},Tl.prototype.postExecute=function(e){},Cl.$inject=["layouter","canvas"],Cl.prototype.execute=function(e){var t=e.connection;return G(e,{oldWaypoints:t.waypoints}),t.waypoints=this._layouter.layoutConnection(t,e.hints),t},Cl.prototype.revert=function(e){var t=e.connection;return t.waypoints=e.oldWaypoints,t},Ml.prototype.execute=function(e){var t=e.connection,n=e.delta,i=e.newParent||t.parent,r=e.newParentIndex,o=t.parent;return e.oldParent=o,e.oldParentIndex=mt(o.children,t),xt(i.children,t,r),t.parent=i,b(t.waypoints,(function(e){e.x+=n.x,e.y+=n.y,e.original&&(e.original.x+=n.x,e.original.y+=n.y)})),t},Ml.prototype.revert=function(e){var t=e.connection,n=t.parent,i=e.oldParent,r=e.oldParentIndex,o=e.delta;return mt(n.children,t),xt(i.children,t,r),t.parent=i,b(t.waypoints,(function(e){e.x-=o.x,e.y-=o.y,e.original&&(e.original.x-=o.x,e.original.y-=o.y)})),t},zl.prototype.add=function(e,t){return this.addAll([e],t)},zl.prototype.addAll=function(e,t){return G(this,function(e,t,n){p(t)&&(t=!0),y(t)&&(n=t,t=!0);var i=yt((n=n||{}).allShapes),r=yt(n.allConnections),o=yt(n.enclosedElements),a=yt(n.enclosedConnections),s=yt(n.topLevel,t&&j(e,(function(e){return e.id})));function c(e){s[e.source.id]&&s[e.target.id]&&(s[e.id]=[e]),i[e.source.id]&&i[e.target.id]&&(a[e.id]=o[e.id]=e),r[e.id]=e}return lt(e,(function(e){if(o[e.id]=e,!e.waypoints)return i[e.id]=e,b(e.incoming,c),b(e.outgoing,c),e.children;a[e.id]=r[e.id]=e})),{allShapes:i,allConnections:r,topLevel:s,enclosedConnections:a,enclosedElements:o}}(e,!!t,this)),this},Dl.prototype.moveRecursive=function(e,t,n){return e?this.moveClosure(this.getClosure(e),t,n):[]},Dl.prototype.moveClosure=function(e,t,n,i,r){var o=this._modeling,a=e.allShapes,s=e.allConnections,c=e.enclosedConnections,u=e.topLevel,l=!1;r&&r.parent===n&&(l=!0),b(a,(function(e){o.moveShape(e,t,u[e.id]&&!l&&n,{recurse:!1,layout:!1})})),b(s,(function(e){var i=!!a[e.source.id],r=!!a[e.target.id];c[e.id]&&i&&r?o.moveConnection(e,t,u[e.id]&&!l&&n):o.layoutConnection(e,{connectionStart:i&&Bl(e,e.source,t),connectionEnd:r&&Al(e,e.target,t)})}))},Dl.prototype.getClosure=function(e){return(new zl).addAll(e,!0)},Il.$inject=["modeling"],Il.prototype.preExecute=function(e){e.closure=this._helper.getClosure(e.shapes)},Il.prototype.postExecute=function(e){var t,n=e.hints;n&&n.primaryShape&&(t=n.primaryShape,n.oldParent=t.parent),this._helper.moveClosure(e.closure,e.delta,e.newParent,e.newHost,t)},$l.$inject=["modeling"],$l.prototype.execute=function(e){var t=e.shape,n=e.delta,i=e.newParent||t.parent,r=e.newParentIndex,o=t.parent;return e.oldBounds=U(t,["x","y","width","height"]),e.oldParent=o,e.oldParentIndex=mt(o.children,t),xt(i.children,t,r),G(t,{parent:i,x:t.x+n.x,y:t.y+n.y}),t},$l.prototype.postExecute=function(e){var t=e.shape,n=e.delta,i=e.hints,r=this._modeling;!1!==i.layout&&(b(t.incoming,(function(e){r.layoutConnection(e,{connectionEnd:Al(e,t,n)})})),b(t.outgoing,(function(e){r.layoutConnection(e,{connectionStart:Bl(e,t,n)})}))),!1!==i.recurse&&this.moveChildren(e)},$l.prototype.revert=function(e){var t=e.shape,n=e.oldParent,i=e.oldParentIndex,r=e.delta;return xt(n.children,t,i),G(t,{parent:n,x:t.x-r.x,y:t.y-r.y}),t},$l.prototype.moveChildren=function(e){var t=e.delta,n=e.shape;this._helper.moveRecursive(n.children,t,null)},$l.prototype.getNewParent=function(e){return e.newParent||e.shape.parent},Fl.$inject=["modeling"],Fl.prototype.execute=function(e){var t=e.newSource,n=e.newTarget,i=e.connection,r=e.dockingOrPoints;if(!t&&!n)throw new Error("newSource or newTarget required");return f(r)&&(e.oldWaypoints=i.waypoints,i.waypoints=r),t&&(e.oldSource=i.source,i.source=t),n&&(e.oldTarget=i.target,i.target=n),i},Fl.prototype.postExecute=function(e){var t=e.connection,n=e.newSource,i=e.newTarget,r=e.dockingOrPoints,o=e.hints||{},a={};o.connectionStart&&(a.connectionStart=o.connectionStart),o.connectionEnd&&(a.connectionEnd=o.connectionEnd),!1!==o.layoutConnection&&(!n||i&&"source"!==o.docking||(a.connectionStart=a.connectionStart||Hl(f(r)?r[0]:r)),!i||n&&"target"!==o.docking||(a.connectionEnd=a.connectionEnd||Hl(f(r)?r[r.length-1]:r)),o.newWaypoints&&(a.waypoints=o.newWaypoints),this._modeling.layoutConnection(t,a))},Fl.prototype.revert=function(e){var t=e.oldSource,n=e.oldTarget,i=e.oldWaypoints,r=e.connection;return t&&(r.source=t),n&&(r.target=n),i&&(r.waypoints=i),r},Gl.$inject=["modeling","rules"],Gl.prototype.preExecute=function(e){var t,n=this,i=this._modeling,r=this._rules,o=e.oldShape,a=e.newData,s=e.hints||{};function c(e,t,n){return r.allowed("connection.reconnect",{connection:n,source:e,target:t})}var u,l={x:a.x,y:a.y},p={x:o.x,y:o.y,width:o.width,height:o.height};t=e.newShape=e.newShape||n.createShape(a,l,o.parent,s),o.host&&i.updateAttachment(t,o.host),!1!==s.moveChildren&&(u=o.children.slice(),i.moveElements(u,{x:0,y:0},t,s));var h=o.incoming.slice(),d=o.outgoing.slice();b(h,(function(e){c(e.source,t,e)&&n.reconnectEnd(e,t,jl(e,t,p),s)})),b(d,(function(e){var i=e.target;c(t,i,e)&&n.reconnectStart(e,t,Pl(e,t,p),s)}))},Gl.prototype.postExecute=function(e){var t=e.oldShape;this._modeling.removeShape(t)},Gl.prototype.execute=function(e){},Gl.prototype.revert=function(e){},Gl.prototype.createShape=function(e,t,n,i){return this._modeling.createShape(e,t,n,i)},Gl.prototype.reconnectStart=function(e,t,n,i){this._modeling.reconnectStart(e,t,n,i)},Gl.prototype.reconnectEnd=function(e,t,n,i){this._modeling.reconnectEnd(e,t,n,i)},Ul.$inject=["modeling"],Ul.prototype.execute=function(e){var t=e.shape,n=e.newBounds,i=e.minBounds;if(void 0===n.x||void 0===n.y||void 0===n.width||void 0===n.height)throw new Error("newBounds must have {x, y, width, height} properties");if(i&&(n.width<i.width||n.height<i.height))throw new Error("width and height cannot be less than minimum height and width");if(!i&&n.width<10||n.height<10)throw new Error("width and height cannot be less than 10px");return e.oldBounds={width:t.width,height:t.height,x:t.x,y:t.y},G(t,{width:n.width,height:n.height,x:n.x,y:n.y}),t},Ul.prototype.postExecute=function(e){var t=this._modeling,n=e.shape,i=e.oldBounds;!1!==(e.hints||{}).layout&&(b(n.incoming,(function(e){t.layoutConnection(e,{connectionEnd:jl(e,n,i)})})),b(n.outgoing,(function(e){t.layoutConnection(e,{connectionStart:Pl(e,n,i)})})))},Ul.prototype.revert=function(e){var t=e.shape,n=e.oldBounds;return G(t,{width:n.width,height:n.height,x:n.x,y:n.y}),t},Wl.$inject=["modeling"],Wl.prototype.preExecute=function(e){var t=e.delta,n=e.direction,i=e.movingShapes,r=e.resizingShapes,o=e.start,a={};this.moveShapes(i,t),b(r,(function(e){a[e.id]=function(e){return{x:e.x,y:e.y,height:e.height,width:e.width}}(e)})),this.resizeShapes(r,t,n),this.updateConnectionWaypoints(function(e,t){var n=[];return b(e.concat(t),(function(i){var r=i.incoming,o=i.outgoing;b(r.concat(o),(function(i){var r=i.source,o=i.target;(Gu(e,r)||Gu(e,o)||Gu(t,r)||Gu(t,o))&&(Gu(n,i)||n.push(i))}))})),n}(i,r),t,n,o,i,r,a)},Wl.prototype.execute=function(){},Wl.prototype.revert=function(){},Wl.prototype.moveShapes=function(e,t){var n=this;b(e,(function(e){n._modeling.moveShape(e,t,null,{autoResize:!1,layout:!1,recurse:!1})}))},Wl.prototype.resizeShapes=function(e,t,n){var i=this;b(e,(function(e){var r=function(e,t,n){var i=e.x,r=e.y,o=e.width,a=e.height,s=n.x,c=n.y;switch(t){case"n":return{x:i,y:r+c,width:o,height:a-c};case"s":return{x:i,y:r,width:o,height:a+c};case"w":return{x:i+s,y:r,width:o-s,height:a};case"e":return{x:i,y:r,width:o+s,height:a};default:throw new Error("unknown direction: "+t)}}(e,n,t);i._modeling.resizeShape(e,r,null,{attachSupport:!1,autoResize:!1,layout:!1})}))},Wl.prototype.updateConnectionWaypoints=function(e,t,n,i,r,o,a){var s=this,c=r.concat(o);b(e,(function(e){var u=e.source,l=e.target,p=function(e){return k(e.waypoints,(function(e){return(e=Vl(e)).original&&(e.original=Vl(e.original)),e}))}(e),h=ql(n),d={labelBehavior:!1};Xl(c,u)&&Xl(c,l)?(p=k(p,(function(e){return Yl(e,i,n)&&(e[h]=e[h]+t[h]),e.original&&Yl(e.original,i,n)&&(e.original[h]=e.original[h]+t[h]),e})),s._modeling.updateWaypoints(e,p,{labelBehavior:!1})):(Xl(c,u)||Xl(c,l))&&(Xl(r,u)?d.connectionStart=Bl(e,u,t):Xl(r,l)?d.connectionEnd=Al(e,l,t):Xl(o,u)?d.connectionStart=Pl(e,u,a[u.id]):Xl(o,l)&&(d.connectionEnd=jl(e,l,a[l.id])),s._modeling.layoutConnection(e,d))}))},Kl.$inject=["modeling"],Kl.prototype.execute=function(e){var t=e.shape,n=t.children;e.oldChildrenVisibility=Zl(n),t.collapsed=!t.collapsed;var i=Jl(n,t.collapsed);return[t].concat(i)},Kl.prototype.revert=function(e){var t=e.shape,n=e.oldChildrenVisibility,i=Ql(t.children,n);return t.collapsed=!t.collapsed,[t].concat(i)},ep.$inject=["modeling"],ep.prototype.execute=function(e){var t=e.shape,n=e.newHost,i=t.host;return e.oldHost=i,e.attacherIdx=tp(i,t),np(n,t),t.host=n,t},ep.prototype.revert=function(e){var t=e.shape,n=e.newHost,i=e.oldHost,r=e.attacherIdx;return t.host=i,tp(n,t),np(i,t,r),t},ip.prototype.execute=function(e){var t=e.connection,n=e.newWaypoints;return e.oldWaypoints=t.waypoints,t.waypoints=n,t},ip.prototype.revert=function(e){var t=e.connection,n=e.oldWaypoints;return t.waypoints=n,t},rp.$inject=["eventBus","elementFactory","commandStack"],rp.prototype.getHandlers=function(){return{"shape.append":hl,"shape.create":ml,"shape.delete":Sl,"shape.move":$l,"shape.resize":Ul,"shape.replace":Gl,"shape.toggleCollapse":Kl,spaceTool:Wl,"label.create":xl,"connection.create":dl,"connection.delete":bl,"connection.move":Ml,"connection.layout":Cl,"connection.updateWaypoints":ip,"connection.reconnect":Fl,"elements.create":yl,"elements.move":Il,"elements.delete":El,"elements.distribute":Tl,"elements.align":pl,"element.updateAttachment":ep}},rp.prototype.registerHandlers=function(e){b(this.getHandlers(),(function(t,n){e.registerHandler(n,t)}))},rp.prototype.moveShape=function(e,t,n,i,r){"object"==typeof i&&(r=i,i=null);var o={shape:e,delta:t,newParent:n,newParentIndex:i,hints:r||{}};this._commandStack.execute("shape.move",o)},rp.prototype.updateAttachment=function(e,t){var n={shape:e,newHost:t};this._commandStack.execute("element.updateAttachment",n)},rp.prototype.moveElements=function(e,t,n,i){var r,o=(i=i||{}).attach,a=n;!0===o?(r=n,a=n.parent):!1===o&&(r=null);var s={shapes:e,delta:t,newParent:a,newHost:r,hints:i};this._commandStack.execute("elements.move",s)},rp.prototype.moveConnection=function(e,t,n,i,r){"object"==typeof i&&(r=i,i=void 0);var o={connection:e,delta:t,newParent:n,newParentIndex:i,hints:r||{}};this._commandStack.execute("connection.move",o)},rp.prototype.layoutConnection=function(e,t){var n={connection:e,hints:t||{}};this._commandStack.execute("connection.layout",n)},rp.prototype.createConnection=function(e,t,n,i,r,o){"object"==typeof n&&(o=r,r=i,i=n,n=void 0);var a={source:e,target:t,parent:r,parentIndex:n,connection:i=this._create("connection",i),hints:o};return this._commandStack.execute("connection.create",a),a.connection},rp.prototype.createShape=function(e,t,n,i,r){"number"!=typeof i&&(r=i,i=void 0);var o,a,s=(r=r||{}).attach;e=this._create("shape",e),s?(o=n.parent,a=n):o=n;var c={position:t,shape:e,parent:o,parentIndex:i,host:a,hints:r};return this._commandStack.execute("shape.create",c),c.shape},rp.prototype.createElements=function(e,t,n,i,r){f(e)||(e=[e]),"number"!=typeof i&&(r=i,i=void 0);var o={position:t,elements:e,parent:n,parentIndex:i,hints:r=r||{}};return this._commandStack.execute("elements.create",o),o.elements},rp.prototype.createLabel=function(e,t,n,i){n=this._create("label",n);var r={labelTarget:e,position:t,parent:i||e.parent,shape:n};return this._commandStack.execute("label.create",r),r.shape},rp.prototype.appendShape=function(e,t,n,i,r){r=r||{};var o={source:e,position:n,target:i,shape:t=this._create("shape",t),connection:r.connection,connectionParent:r.connectionParent,hints:r};return this._commandStack.execute("shape.append",o),o.shape},rp.prototype.removeElements=function(e){var t={elements:e};this._commandStack.execute("elements.delete",t)},rp.prototype.distributeElements=function(e,t,n){var i={groups:e,axis:t,dimension:n};this._commandStack.execute("elements.distribute",i)},rp.prototype.removeShape=function(e,t){var n={shape:e,hints:t||{}};this._commandStack.execute("shape.delete",n)},rp.prototype.removeConnection=function(e,t){var n={connection:e,hints:t||{}};this._commandStack.execute("connection.delete",n)},rp.prototype.replaceShape=function(e,t,n){var i={oldShape:e,newData:t,hints:n||{}};return this._commandStack.execute("shape.replace",i),i.newShape},rp.prototype.alignElements=function(e,t){var n={elements:e,alignment:t};this._commandStack.execute("elements.align",n)},rp.prototype.resizeShape=function(e,t,n,i){var r={shape:e,newBounds:t,minBounds:n,hints:i};this._commandStack.execute("shape.resize",r)},rp.prototype.createSpace=function(e,t,n,i,r){var o={delta:n,direction:i,movingShapes:e,resizingShapes:t,start:r};this._commandStack.execute("spaceTool",o)},rp.prototype.updateWaypoints=function(e,t,n){var i={connection:e,newWaypoints:t,hints:n||{}};this._commandStack.execute("connection.updateWaypoints",i)},rp.prototype.reconnect=function(e,t,n,i,r){var o={connection:e,newSource:t,newTarget:n,dockingOrPoints:i,hints:r||{}};this._commandStack.execute("connection.reconnect",o)},rp.prototype.reconnectStart=function(e,t,n,i){i||(i={}),this.reconnect(e,t,e.target,n,G(i,{docking:"source"}))},rp.prototype.reconnectEnd=function(e,t,n,i){i||(i={}),this.reconnect(e,e.source,t,n,G(i,{docking:"target"}))},rp.prototype.connect=function(e,t,n,i){return this.createConnection(e,t,n||{},e.parent,i)},rp.prototype._create=function(e,t){return t instanceof Lt?t:this._elementFactory.create(e,t)},rp.prototype.toggleCollapse=function(e,t){var n={shape:e,hints:t||{}};this._commandStack.execute("shape.toggleCollapse",n)};var op={width:0,height:0};function ap(e,t,n,i,r){this._elementRegistry=e,this._moddle=t,this._translate=n,this._modeling=i,this._textRenderer=r}function sp(e,t){return"id"in e&&e.id!==t.id}function cp(e,t){b(t,(function(t,n){"di"!==n?e.set(n,t):e.di&&function(e,t){b(t,(function(t,n){e.set(n,t)}))}(e.di,t)}))}ap.$inject=["elementRegistry","moddle","translate","modeling","textRenderer"],ap.prototype.execute=function(e){var t=e.element,n=[t],i=this._translate;if(!t)throw new Error(i("element required"));var r=this._elementRegistry,o=this._moddle.ids,a=t.businessObject,s=function(e){var t=G({},e);return up.forEach((function(n){n in e&&(t[n]=Ei(t[n]))})),t}(e.properties),c=e.oldProperties||function(e,t){return E(C(t),(function(n,i){return n[i]="di"!==i?e.get(i):(r=e.di,E(C(t.di),(function(e,t){return e[t]=r.get(t),e}),{})),n;var r}),{})}(a,s);return sp(s,a)&&(o.unclaim(a.id),r.updateId(t,s.id),o.claim(s.id,a)),cp(a,s),e.oldProperties=c,e.changed=n,n},ap.prototype.postExecute=function(e){var t=e.element.label,n=t&&Ei(t).name;if(n){var i=this._textRenderer.getExternalLabelBounds(t,n);this._modeling.resizeShape(t,i,op)}},ap.prototype.revert=function(e){var t=e.element,n=e.properties,i=e.oldProperties,r=t.businessObject,o=this._elementRegistry,a=this._moddle.ids;return cp(r,i),sp(n,r)&&(a.unclaim(n.id),o.updateId(t,i.id),a.claim(i.id,r)),e.changed};var up=["default"];function lp(e,t){this._canvas=e,this._modeling=t}function pp(e){this._moddle=e}lp.$inject=["canvas","modeling"],lp.prototype.execute=function(e){var t=this._canvas,n=e.newRoot,i=n.businessObject,r=t.getRootElement(),o=r.businessObject,a=o.$parent,s=o.di;t.setRootElement(n,!0),xt(a.rootElements,i),i.$parent=a,mt(a.rootElements,o),o.$parent=null,o.di=null,s.boardElement=i,i.di=s,e.oldRoot=r},lp.prototype.revert=function(e){var t=this._canvas,n=e.newRoot.businessObject,i=e.oldRoot,r=i.businessObject,o=n.$parent,a=n.di;t.setRootElement(i,!0),mt(o.rootElements,n),n.$parent=null,xt(o.rootElements,r),r.$parent=o,n.di=null,a.boardElement=r,r.di=a},pp.$inject=["moddle"],pp.prototype.execute=function(e){var t=this._moddle.ids,n=e.id,i=e.element;e.claiming?t.claim(n,i):t.unclaim(n)},pp.prototype.revert=function(e){var t=this._moddle.ids,n=e.id,i=e.element;e.claiming?t.unclaim(n):t.claim(n,i)};var hp=Ma.YELLOW;function dp(e){this._commandStack=e}dp.$inject=["commandStack"],dp.prototype.postExecute=function(e){var t=e.elements,n=e.color||hp,i=this;b(t,(function(e){i._commandStack.execute("element.updateProperties",{element:e,properties:{color:n}})}))};var fp={width:0,height:0};function yp(e,t){function n(e,t){var n=e.label||e,i=e.labelTarget||e;return function(e,t){var n=e.businessObject,i=Ti(n);i&&(n[i]=t)}(n,t),[n,i]}this.preExecute=function(t){var n=t.element,i=n.businessObject,r=t.newLabel;if(!Xi(n)&&Vi(n)&&!qi(n)&&!vp(r)){var o=Yi(n);o={x:o.x,y:o.y+7},e.createLabel(n,o,{id:i.id+"_label",businessObject:i})}},this.execute=function(e){return e.oldLabel=ki(e.element),n(e.element,e.newLabel)},this.revert=function(e){return n(e.element,e.oldLabel)},this.postExecute=function(n){var i=n.element,r=i.label||i,o=n.newLabel,a=n.newBounds,s=n.hints||{};if(Xi(r))if(Xi(r)&&vp(o))!1!==s.removeShape&&e.removeShape(r,{unsetLabel:!1});else{var c=ki(r);void 0===a&&(a=t.getExternalLabelBounds(r,c)),a&&e.resizeShape(r,a,fp)}}}function vp(e){return!e||!e.trim()}function gp(e,t,n,i){rp.call(this,e,t,n),this._postitRules=i}function mp(){}function xp(e){return G({original:e.point.original||e.point},e.actual)}function _p(e,t){this._elementRegistry=e,this._graphicsFactory=t}yp.$inject=["modeling","textRenderer"],r()(gp,rp),gp.$inject=["eventBus","elementFactory","commandStack","postitRules"],gp.prototype.getHandlers=function(){var e=rp.prototype.getHandlers.call(this);return e["element.updateProperties"]=ap,e["canvas.updateRoot"]=lp,e["id.updateClaim"]=pp,e["element.setColor"]=dp,e["element.updateLabel"]=yp,e},gp.prototype.updateLabel=function(e,t,n,i){this._commandStack.execute("element.updateLabel",{element:e,newLabel:t,newBounds:n,hints:i||{}})},gp.prototype.updateProperties=function(e,t){this._commandStack.execute("element.updateProperties",{element:e,properties:t})},gp.prototype.claimId=function(e,t){this._commandStack.execute("id.updateClaim",{id:e,element:t,claiming:!0})},gp.prototype.unclaimId=function(e,t){this._commandStack.execute("id.updateClaim",{id:e,element:t})},gp.prototype.setColor=function(e,t){e.length||(e=[e]),this._commandStack.execute("element.setColor",{elements:e,color:t})},mp.prototype.layoutConnection=function(e,t){return[(t=t||{}).connectionStart||Xo(t.source||e.source),t.connectionEnd||Xo(t.target||e.target)]},_p.$inject=["elementRegistry","graphicsFactory"],_p.prototype.getCroppedWaypoints=function(e,t,n){t=t||e.source,n=n||e.target;var i=this.getDockingPoint(e,t,!0),r=this.getDockingPoint(e,n),o=e.waypoints.slice(i.idx+1,r.idx);return o.unshift(xp(i)),o.push(xp(r)),o},_p.prototype.getDockingPoint=function(e,t,n){var i,r,o=e.waypoints;return{point:r=o[i=n?0:o.length-1],actual:this._getIntersection(t,e,n)||r,idx:i}},_p.prototype._getIntersection=function(e,t,n){return Zo(this._getShapePath(e),this._getConnectionPath(t),n)},_p.prototype._getConnectionPath=function(e){return this._graphicsFactory.getConnectionPath(e)},_p.prototype._getShapePath=function(e){return this._graphicsFactory.getShapePath(e)},_p.prototype._getGfx=function(e){return this._elementRegistry.getGraphics(e)};const wp={__init__:["modeling","postitUpdater"],__depends__:[pu,_u,bu,Tu,zs,Cu,Au,Lu,$u,_r,lc,al],postitFactory:["type",sl],postitUpdater:["type",cl],elementFactory:["type",ll],modeling:["type",gp],layouter:["type",mp],connectionDocking:["type",_p]};var bp=Math.round;function Ep(e,t,n,i,r){function o(e,t,n,i){return r.allowed("elements.move",{shapes:e,delta:t,position:n,target:i})}function a(e,n,i,r){if(y(i)&&(r=i,i=!1),!n.waypoints&&n.parent){var o=function(e){return{x:e.x+bp(e.width/2),y:e.y+bp(e.height/2)}}(n);return t.init(e,o,"shape.move",{cursor:"grabbing",autoActivate:i,data:{shape:n,context:r||{}}}),!0}}e.on("shape.move.start",1500,(function(e){var t=e.context,n=e.shape,r=i.get().slice();-1===r.indexOf(n)&&(r=[n]),G(t,{shapes:r=function(e){var t=j(e,"id");return w(e,(function(e){for(;e=e.parent;)if(t[e.id])return!1;return!0}))}(r),validatedShapes:r,shape:n})})),e.on("shape.move.start",1250,(function(e){var t=e.context,n=t.validatedShapes;if(!(t.canExecute=o(n)))return!1})),e.on("shape.move.move",500,(function(e){var t,n=e.context,i=n.validatedShapes,r=e.hover,a={x:e.dx,y:e.dy};t=o(i,a,{x:e.x,y:e.y},r),n.delta=a,n.canExecute=t,n.target=null!==t?r:null})),e.on("shape.move.end",(function(e){var t=e.context,i=t.delta,r=t.canExecute,o="attach"===r,a=t.shapes;if(!1===r)return!1;i.x=bp(i.x),i.y=bp(i.y),0===i.x&&0===i.y||n.moveElements(a,i,t.target,{primaryShape:t.shape,attach:o})})),e.on("element.mousedown",(function(e){if(or(e)){var t=tr(e);if(!t)throw new Error("must supply DOM mousedown event");return a(t,e.element)}})),this.start=a}Ep.$inject=["eventBus","dragging","modeling","selection","rules"];var Sp="djs-dragging",Tp="drop-ok",kp="drop-not-ok",Cp="new-parent",Mp="attach-ok";function Pp(e,t,n,i){function r(e){var t=pt(e,!0),n=k(t,(function(e){return(e.incoming||[]).concat(e.outgoing||[])}));return c(t.concat(n))}function o(e,n){[Mp,Tp,kp,Cp].forEach((function(i){i===n?t.addMarker(e,i):t.removeMarker(e,i)}))}e.on("shape.move.start",499,(function(e){var o,a=e.context,s=a.shapes,u=a.allDraggedElements,l=w(o=r(s),(function(e){return!function(e){return e.waypoints}(e)||_(o,O({id:e.source.id}))&&_(o,O({id:e.target.id}))}));if(!a.dragGroup){var p=Ne("g");be(p,n.cls("djs-drag-group",["no-events"])),xe(t.getDefaultLayer(),p),a.dragGroup=p}l.forEach((function(e){i.addDragger(e,a.dragGroup)})),b(u=u?c([u,r(s)]):r(s),(function(e){t.addMarker(e,Sp)})),a.allDraggedElements=u,a.differentParents=1!==M(j(s,(function(e){return e.parent&&e.parent.id})))})),e.on("shape.move.move",499,(function(e){var t=e.context,n=t.dragGroup,i=t.target,r=t.shape.parent,a=t.canExecute;i&&("attach"===a?o(i,Mp):t.canExecute&&i&&i.id!==r.id?o(i,Cp):o(i,t.canExecute?Tp:kp)),qt(n,e.dx,e.dy)})),e.on(["shape.move.out","shape.move.cleanup"],(function(e){var t=e.context.target;t&&o(t,null)})),e.on("shape.move.cleanup",(function(e){var n=e.context,i=n.allDraggedElements,r=n.dragGroup;b(i,(function(e){t.removeMarker(e,Sp)})),r&&Pe(r)})),this.makeDraggable=function(e,n,r){i.addDragger(n,e.dragGroup),r&&t.addMarker(n,Sp),e.allDraggedElements?e.allDraggedElements.push(n):e.allDraggedElements=[n]}}Pp.$inject=["eventBus","canvas","styles","previewSupport"];const jp={__depends__:[pr,_r,dr,jo,ko,Qa],__init__:["move","movePreview"],move:["type",Ep],movePreview:["type",Pp]};var Bp="open";function Ap(e,t){this._eventBus=e,this._canvas=t;var n=this;e.on("tool-manager.update",(function(e){var t=e.tool;n.updateToolHighlight(t)})),e.on("i18n.changed",(function(){n._update()})),e.on("diagram.init",(function(){n._diagramInitialized=!0,n._rebuild()}))}function Rp(e,t){var n=t.getPaletteEntries();return g(n)?n(e):(b(n,(function(t,n){e[n]=t})),e)}Ap.$inject=["eventBus","canvas"],Ap.prototype.registerProvider=function(e,t){t||(t=e,e=1e3),this._eventBus.on("palette.getProviders",e,(function(e){e.providers.push(t)})),this._rebuild()},Ap.prototype.getEntries=function(){return this._getProviders().reduce(Rp,{})},Ap.prototype._rebuild=function(){this._diagramInitialized&&this._getProviders().length&&(this._container||this._init(),this._update())},Ap.prototype._init=function(){var e=this,t=this._eventBus,n=this._getParentContainer(),i=this._container=he(Ap.HTML_MARKUP);n.appendChild(i),le(i,".djs-palette-toggle, .entry","click",(function(t){var n=t.delegateTarget;if(ne(n,".djs-palette-toggle"))return e.toggle();e.trigger("click",t)})),ce.bind(i,"mousedown",(function(e){e.stopPropagation()})),le(i,".entry","dragstart",(function(t){e.trigger("dragstart",t)})),t.on("canvas.resized",this._layoutChanged,this),t.fire("palette.create",{container:i})},Ap.prototype._getProviders=function(e){var t=this._eventBus.createEvent({type:"palette.getProviders",providers:[]});return this._eventBus.fire(t),t.providers},Ap.prototype._toggleState=function(e){e=e||{};var t,n=this._getParentContainer(),i=this._container,r=this._eventBus,o=Z(i);t="twoColumn"in e?e.twoColumn:this._needsCollapse(n.clientHeight,this._entries||{}),o.toggle("two-column",t),"open"in e&&o.toggle(Bp,e.open),r.fire("palette.changed",{twoColumn:t,open:this.isOpen()})},Ap.prototype._update=function(){var e=ye(".djs-palette-entries",this._container),t=this._entries=this.getEntries();Q(e),b(t,(function(t,n){var i=t.group||"default",r=ye("[data-group="+i+"]",e);r||(r=he('<div class="group" data-group="'+i+'"></div>'),e.appendChild(r));var o=t.html||(t.separator?'<hr class="separator" />':'<div class="entry" draggable="true"></div>'),a=he(o);r.appendChild(a),t.separator||(V(a,"data-action",n),t.title&&V(a,"title",t.title),t.className&&function(e,t){var n=Z(e);(f(t)?t:t.split(/\s+/g)).forEach((function(e){n.add(e)}))}(a,t.className),t.imageUrl&&a.appendChild(he('<img src="'+t.imageUrl+'">')))})),this.open()},Ap.prototype.trigger=function(e,t,n){var i,r,o,a=this._entries,s=t.delegateTarget||t.target;if(!s)return t.preventDefault();(i=a[V(s,"data-action")])&&(r=i.action,o=t.originalEvent||t,g(r)?"click"===e&&r(o,n):r[e]&&r[e](o,n),t.preventDefault())},Ap.prototype._layoutChanged=function(){this._toggleState({})},Ap.prototype._needsCollapse=function(e,t){return e<46*Object.keys(t).length+50},Ap.prototype.close=function(){this._toggleState({open:!1,twoColumn:!1})},Ap.prototype.open=function(){this._toggleState({open:!0})},Ap.prototype.toggle=function(e){this.isOpen()?this.close():this.open()},Ap.prototype.isActiveTool=function(e){return e&&this._activeTool===e},Ap.prototype.updateToolHighlight=function(e){var t;this._toolsContainer||(t=ye(".djs-palette-entries",this._container),this._toolsContainer=ye("[data-group=tools]",t)),b(this._toolsContainer.children,(function(t){var n=t.getAttribute("data-action");if(n){var i=Z(t);n=n.replace("-tool",""),i.contains("entry")&&n===e?i.add("highlighted-entry"):i.remove("highlighted-entry")}}))},Ap.prototype.isOpen=function(){return Z(this._container).has(Bp)},Ap.prototype._getParentContainer=function(){return this._canvas.getContainer()},Ap.HTML_MARKUP='<div class="djs-palette"><div class="djs-palette-entries"></div><div class="djs-palette-toggle"></div></div>';const Op={__init__:["palette"],palette:["type",Ap]};var Np="crosshair";function Lp(e,t,n,i,r,o,a){this._selection=r,this._dragging=n,this._mouse=a;var s=this;o.registerTool("lasso",{tool:"lasso.selection",dragging:"lasso"}),e.on("lasso.selection.end",(function(t){var n=t.originalEvent.target;(t.hover||n instanceof SVGElement)&&e.once("lasso.selection.ended",(function(){s.activateLasso(t.originalEvent,!0)}))})),e.on("lasso.end",(function(e){var t=zp(e),n=i.filter((function(e){return e}));s.select(n,t)})),e.on("lasso.start",(function(e){var n=e.context;n.bbox=zp(e),function(e){var n,i=t.getDefaultLayer();be(n=e.frame=Ne("rect"),{class:"djs-lasso-overlay",width:1,height:1,x:0,y:0}),xe(i,n)}(n)})),e.on("lasso.move",(function(e){var t=e.context;t.bbox=zp(e),function(e){var t=e.frame,n=e.bbox;be(t,{x:n.x,y:n.y,width:n.width,height:n.height})}(t)})),e.on("lasso.cleanup",(function(e){!function(e){e.frame&&Pe(e.frame)}(e.context)})),e.on("element.mousedown",1500,(function(e){if(sr(e))return s.activateLasso(e.originalEvent),!0}))}function zp(e){var t={x:e.x-e.dx,y:e.y-e.dy},n={x:e.x,y:e.y};return t.x<=n.x&&t.y<n.y||t.x<n.x&&t.y<=n.y?{x:t.x,y:t.y,width:n.x-t.x,height:n.y-t.y}:t.x>=n.x&&t.y<n.y||t.x>n.x&&t.y<=n.y?{x:n.x,y:t.y,width:t.x-n.x,height:n.y-t.y}:t.x<=n.x&&t.y>n.y||t.x<n.x&&t.y>=n.y?{x:t.x,y:n.y,width:n.x-t.x,height:t.y-n.y}:t.x>=n.x&&t.y>n.y||t.x>n.x&&t.y>=n.y?{x:n.x,y:n.y,width:t.x-n.x,height:t.y-n.y}:{x:n.x,y:n.y,width:0,height:0}}Lp.$inject=["eventBus","canvas","dragging","elementRegistry","selection","toolManager","mouse"],Lp.prototype.activateLasso=function(e,t){this._dragging.init(e,"lasso",{autoActivate:t,cursor:Np,data:{context:{}}})},Lp.prototype.activateSelection=function(e,t){this._dragging.init(e,"lasso.selection",{trapClick:!1,autoActivate:t,cursor:Np,data:{context:{}}})},Lp.prototype.select=function(e,t){var n=function(e,t){var n={};return b(e,(function(e){var i=e;i.waypoints&&(i=ht(i)),!v(t.y)&&i.x>t.x&&(n[e.id]=e),!v(t.x)&&i.y>t.y&&(n[e.id]=e),i.x>t.x&&i.y>t.y&&(v(t.width)&&v(t.height)&&i.width+i.x<t.width+t.x&&i.height+i.y<t.height+t.y?n[e.id]=e:v(t.width)&&v(t.height)||(n[e.id]=e))})),n}(e,t);this._selection.select(P(n))},Lp.prototype.toggle=function(){if(this.isActive())return this._dragging.cancel();var e=this._mouse.getLastMoveEvent();this.activateSelection(e,!!e)},Lp.prototype.isActive=function(){var e=this._dragging.context();return e&&/^lasso/.test(e.prefix)};const Dp={__depends__:[Hu,ms],__init__:["lassoTool"],lassoTool:["type",Lp]};var Ip=1500,$p="grab";function Fp(e,t,n,i,r,o){this._dragging=n,this._mouse=o;var a=this,s=i.get("keyboard",!1);r.registerTool("hand",{tool:"hand",dragging:"hand.move"}),e.on("element.mousedown",Ip,(function(e){if(ar(e))return a.activateMove(e.originalEvent,!0),!1})),s&&s.addListener(Ip,(function(e){if(Hp(e.keyEvent)&&!a.isActive()){var t=a._mouse.getLastMoveEvent();a.activateMove(t,!!t)}}),"keyboard.keydown"),s&&s.addListener(Ip,(function(e){Hp(e.keyEvent)&&a.isActive()&&a.toggle()}),"keyboard.keyup"),e.on("hand.end",(function(t){var n=t.originalEvent.target;if(!(t.hover||n instanceof SVGElement))return!1;e.once("hand.ended",(function(){a.activateMove(t.originalEvent,{reactivate:!0})}))})),e.on("hand.move.move",(function(e){var n=t.viewbox().scale;t.scroll({dx:e.dx*n,dy:e.dy*n})})),e.on("hand.move.end",(function(t){var n=t.context.reactivate;return!ar(t)&&n&&e.once("hand.move.ended",(function(e){a.activateHand(e.originalEvent,!0,!0)})),!1}))}function Hp(e){return jr(" ",e)}Fp.$inject=["eventBus","canvas","dragging","injector","toolManager","mouse"],Fp.prototype.activateMove=function(e,t,n){"object"==typeof t&&(n=t,t=!1),this._dragging.init(e,"hand.move",{autoActivate:t,cursor:$p,data:{context:n||{}}})},Fp.prototype.activateHand=function(e,t,n){this._dragging.init(e,"hand",{trapClick:!1,autoActivate:t,cursor:$p,data:{context:{reactivate:n}}})},Fp.prototype.toggle=function(){if(this.isActive())return this._dragging.cancel();var e=this._mouse.getLastMoveEvent();this.activateHand(e,!!e)},Fp.prototype.isActive=function(){var e=this._dragging.context();return!!e&&/^(hand|hand\.move)$/.test(e.prefix)};const Gp={__depends__:[Hu,ms],__init__:["handTool"],handTool:["type",Fp]};function Up(e,t,n,i,r,o,a){this._palette=e,this._create=t,this._elementFactory=n,this._spaceTool=i,this._lassoTool=r,this._handTool=o,this._translate=a,e.registerProvider(this)}Up.$inject=["palette","create","elementFactory","spaceTool","lassoTool","handTool","translate"],Up.prototype.getPaletteEntries=function(e){var t={},n=this._create,i=this._elementFactory,r=this._spaceTool,o=this._lassoTool,a=this._handTool,s=this._translate;function c(e,t,r,o,a){function c(t){var r=i.createShape(G({type:e},a));n.start(t,r)}var u=e.replace(/^postit:/,"");return{group:t,className:r,title:o||s("Create {type}",{type:u}),action:{dragstart:c,click:c}}}function u(e){var t=i.createShape({type:"postit:Image"});n.start(e,t,{hints:{selectImage:!0}})}return G(t,{"hand-tool":{group:"tools",className:"bpmn-icon-hand-tool",title:s("Activate the hand tool"),action:{click:function(e){a.activateHand(e)}}},"lasso-tool":{group:"tools",className:"bpmn-icon-lasso-tool",title:s("Activate the lasso tool"),action:{click:function(e){o.activateSelection(e)}}},"space-tool":{group:"tools",className:"bpmn-icon-space-tool",title:s("Activate the create/remove space tool"),action:{click:function(e){r.activateSelection(e)}}},"tool-separator":{group:"tools",separator:!0},"create.square-postit":c("postit:SquarePostit","postits","pjs-postit-square",s("Create Square Postit"),{color:Ma.YELLOW}),"create.circle-postit":c("postit:CirclePostit","postits","pjs-postit-circle",s("Create Circle Postit"),{color:Ma.PINK}),"postit-separator":{group:"postits",separator:!0},"create.image":{group:"artifact",className:"pjs-image",title:s("Create Image"),action:{click:u,dragstart:u}},"create.text-box":c("postit:TextBox","artifact","pjs-text-box",s("Create Text")),"create.group":c("postit:Group","artifact","pjs-group",s("Create Group"))}),t};const Wp={__depends__:[Op,ls,al,Dp,Gp,Ui],__init__:["paletteProvider"],paletteProvider:["type",Up]};function Vp(e,t,n,i,r){jc.call(this,e),e.on("shape.move.move",250,(function(e){var o=e.context,a=o.canExecute;o.visualReplacements||(o.visualReplacements={}),a&&a.replacements?function(e){b(e.canExecute.replacements,(function(o){var a=o.oldElementId,s={type:o.newElementType};if(!e.visualReplacements[a]){var c=t.get(a);G(s,{x:c.x,y:c.y});var u=n.createShape(s);i.addShape(u,c.parent);var l=ye('[data-element-id="'+Uo()(c.id)+'"]',e.dragGroup);l&&be(l,{display:"none"});var p=r.addDragger(u,e.dragGroup);e.visualReplacements[a]=p,i.removeShape(u)}}))}(o):function(e){var t=e.visualReplacements;b(t,(function(n,i){var r=ye('[data-element-id="'+Uo()(i)+'"]',e.dragGroup);r&&be(r,{display:"inline"}),n.remove(),t[i]&&delete t[i]}))}(o)}))}Vp.$inject=["eventBus","elementRegistry","elementFactory","canvas","previewSupport"],r()(Vp,jc);const qp={__depends__:[Qa],__init__:["postitReplacePreview"],postitReplacePreview:["type",Vp]};function Yp(){this._targets={},this._snapOrigins={},this._snapLocations=[],this._defaultSnaps={}}function Xp(e){this._snapValues={}}function Kp(e,t,n){var i=this;this._elementRegistry=e,t.on(["create.start","shape.move.start"],(function(e){i.initSnap(e)})),t.on(["create.move","create.end","shape.move.move","shape.move.end"],1250,(function(e){var t=e.context,r=t.shape,o=t.snapContext,a=t.target;if((!e.originalEvent||!Pr(e.originalEvent))&&!wa(e)&&a){var s=o.pointsForTarget(a);s.initialized||((s=i.addSnapTargetPoints(s,r,a)).initialized=!0),n.snap(e,s)}})),t.on(["create.cleanup","shape.move.cleanup"],(function(){n.hide()}))}function Zp(e){return!!e.labelTarget}function Jp(e){e.invoke(Kp,this)}function Qp(e,t){var n=this;e.on(["resize.start"],(function(e){n.initSnap(e)})),e.on(["resize.move","resize.end"],1250,(function(e){var i=e.context,r=i.shape,o=r.parent,a=i.direction,s=i.snapContext;if(!(e.originalEvent&&Pr(e.originalEvent)||wa(e))){var c=s.pointsForTarget(o);c.initialized||((c=n.addSnapTargetPoints(c,r,o,a)).initialized=!0),function(e){return"n"===e||"s"===e}(a)&&ba(e,"x",e.x),function(e){return"e"===e||"w"===e}(a)&&ba(e,"y",e.y),t.snap(e,c)}})),e.on(["resize.cleanup"],(function(){t.hide()}))}function eh(e,t){var n=Xo(e),i=qo(e),r={x:n.x,y:n.y};return-1!==t.indexOf("n")?r.y=i.top:-1!==t.indexOf("s")&&(r.y=i.bottom),-1!==t.indexOf("e")?r.x=i.right:-1!==t.indexOf("w")&&(r.x=i.left),r}function th(e){this._canvas=e,this._asyncHide=I(F(this.hide,this),1e3)}Yp.prototype.getSnapOrigin=function(e){return this._snapOrigins[e]},Yp.prototype.setSnapOrigin=function(e,t){this._snapOrigins[e]=t,-1===this._snapLocations.indexOf(e)&&this._snapLocations.push(e)},Yp.prototype.addDefaultSnap=function(e,t){var n=this._defaultSnaps[e];n||(n=this._defaultSnaps[e]=[]),n.push(t)},Yp.prototype.getSnapLocations=function(){return this._snapLocations},Yp.prototype.setSnapLocations=function(e){this._snapLocations=e},Yp.prototype.pointsForTarget=function(e){var t=e.id||e,n=this._targets[t];return n||(n=this._targets[t]=new Xp).initDefaults(this._defaultSnaps),n},Xp.prototype.add=function(e,t){var n=this._snapValues[e];n||(n=this._snapValues[e]={x:[],y:[]}),-1===n.x.indexOf(t.x)&&n.x.push(t.x),-1===n.y.indexOf(t.y)&&n.y.push(t.y)},Xp.prototype.snap=function(e,t,n,i){var r=this._snapValues[t];return r&&function(e,t,n){var i,r;for(n=void 0===n?10:n,i=0;i<t.length;i++)if(r=t[i],ma(r-e)<=n)return r}(e[n],r[n],i)},Xp.prototype.initDefaults=function(e){var t=this;b(e||{},(function(e,n){b(e,(function(e){t.add(n,e)}))}))},Kp.$inject=["elementRegistry","eventBus","snapping"],Kp.prototype.initSnap=function(e){var t,n=this._elementRegistry,i=e.context,r=i.shape,o=i.snapContext;o||(o=i.snapContext=new Yp);var a=(t=n.get(r.id)?_a(r,e):{x:e.x+_a(r).x,y:e.y+_a(r).y}).x-r.width/2,s=t.y-r.height/2,c=t.x+r.width/2,u=t.y+r.height/2;return o.setSnapOrigin("mid",{x:t.x-e.x,y:t.y-e.y}),Zp(r)||(o.setSnapOrigin("top-left",{x:a-e.x,y:s-e.y}),o.setSnapOrigin("bottom-right",{x:c-e.x,y:u-e.y})),o},Kp.prototype.addSnapTargetPoints=function(e,t,n){return b(this.getSnapTargets(t,n),(function(n){if(Zp(n))Zp(t)&&e.add("mid",_a(n));else if(n.waypoints){if(n.waypoints.length<3)return;b(n.waypoints.slice(1,-1),(function(t){e.add("mid",t)}))}else e.add("mid",_a(n))})),v(t.x)&&v(t.y)?(this._elementRegistry.get(t.id)&&e.add("mid",_a(t)),e):e},Kp.prototype.getSnapTargets=function(e,t){return Ea(t).filter((function(e){return!e.hidden}))},r()(Jp,Kp),Jp.$inject=["injector"],Jp.prototype.initSnap=function(e){return Kp.prototype.initSnap.call(this,e)},Jp.prototype.addSnapTargetPoints=function(e,t,n){return Kp.prototype.addSnapTargetPoints.call(this,e,t,n)},Jp.prototype.getSnapTargets=function(e,t){return Kp.prototype.getSnapTargets.call(this,e,t)},Qp.prototype.initSnap=function(e){var t=e.context,n=t.shape,i=t.direction,r=t.snapContext;r||(r=t.snapContext=new Yp);var o=eh(n,i);return r.setSnapOrigin("corner",{x:o.x-e.x,y:o.y-e.y}),r},Qp.prototype.addSnapTargetPoints=function(e,t,n,i){return b(this.getSnapTargets(t,n),(function(t){var n;e.add("corner",{x:(n=t).x+n.width,y:n.y+n.height}),e.add("corner",function(e){return{x:e.x,y:e.y}}(t))})),e.add("corner",eh(t,i)),e},Qp.$inject=["eventBus","snapping"],Qp.prototype.getSnapTargets=function(e,t){return Ea(t).filter((function(t){return n=e,!(t.host===n||function(e){return!!e.waypoints}(t)||function(e){return!!e.hidden}(t)||function(e){return!!e.labelTarget}(t));var n}))},th.$inject=["canvas"],th.prototype.snap=function(e,t){var n=e.context.snapContext,i=n.getSnapLocations(),r={x:wa(e,"x"),y:wa(e,"y")};b(i,(function(i){var o=n.getSnapOrigin(i),a={x:e.x+o.x,y:e.y+o.y};if(b(["x","y"],(function(e){var n;r[e]||void 0!==(n=t.snap(a,i,e,7))&&(r[e]={value:n,originValue:n-o[e]})})),r.x&&r.y)return!1})),this.showSnapLine("vertical",r.x&&r.x.value),this.showSnapLine("horizontal",r.y&&r.y.value),b(["x","y"],(function(t){var n=r[t];y(n)&&ba(e,t,n.originValue)}))},th.prototype._createLine=function(e){var t=this._canvas.getLayer("snap"),n=Ne("path");return be(n,{d:"M0,0 L0,0"}),Ce(n).add("djs-snap-line"),xe(t,n),{update:function(t){v(t)?be(n,"horizontal"===e?{d:"M-100000,"+t+" L+100000,"+t,display:""}:{d:"M "+t+",-100000 L "+t+", +100000",display:""}):be(n,{display:"none"})}}},th.prototype._createSnapLines=function(){this._snapLines={horizontal:this._createLine("horizontal"),vertical:this._createLine("vertical")}},th.prototype.showSnapLine=function(e,t){var n=this.getSnapLine(e);n&&n.update(t),this._asyncHide()},th.prototype.getSnapLine=function(e){return this._snapLines||this._createSnapLines(),this._snapLines[e]},th.prototype.hide=function(){b(this._snapLines,(function(e){e.update()}))};const nh={__depends__:[{__init__:["createMoveSnapping","resizeSnapping","snapping"],createMoveSnapping:["type",Kp],resizeSnapping:["type",Qp],snapping:["type",th]}],__init__:["createMoveSnapping"],createMoveSnapping:["type",Jp]};async function ih(e,t){return await function(e){return new Promise(((t,n)=>{try{var i=new FileReader;i.onloadend=function(){t(i.result)},i.readAsDataURL(e)}catch(e){n(e)}}))}(t)}const rh="postit:Image";function oh(e=5){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",i=n.length,r=0;r<e;r++)t+=n.charAt(Math.floor(Math.random()*i));return t}var ah;function sh(e,t,n,i,r,o){this._eventBus=e,this._canvas=t,this._modeling=n,this._elementFactory=i,this._create=r,this._translate=o;const a=uh.bind(this);ah={URL:this._translate("URL"),"An error occured during the file upload":this._translate("An error occured during the file upload"),"Upload files here":this._translate("Upload files here"),"Upload from local is for demo purposes only. It slows down the page and increases the file size.":this._translate("Upload from local is for demo purposes only. It slows down the page and increases the file size."),uploaded:this._translate("uploaded"),file:this._translate("file"),files:this._translate("files"),selected:this._translate("selected"),"Upload again":this._translate("Upload again"),"Drag here":this._translate("Drag here")},sh.CSS="\n    .pjs-visible {\n      visibility: visible !important;\n      display: block !important;\n    }\n    \n    #pjs-drop-zone {\n      visibility: hidden;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      background-color: #555555;\n      z-index: 1;\n      opacity: 0.9;\n    }\n\n    #pjs-drop-zone-border {\n      border-radius: 10px 10px 10px 10px;\n      -moz-border-radius: 10px 10px 10px 10px;\n      -webkit-border-radius: 10px 10px 10px 10px;\n      border: 5px dashed #000000;\n      z-index: 2;\n      display: table;\n      width: 98.9%;\n      height: 100%; \n    }\n\n    .pjs-drop-zone-text {\n      vertical-align: middle;\n      width: 100%;\n      font-size: 25px;\n      font-weight: bold;\n      margin: 0 auto;\n      text-align: center;\n      display: table-cell;\n  }",sh.HTML_MARKUP='<div id="pjs-drop-zone"><div id="pjs-drop-zone-border"><div class="pjs-drop-zone-text">'+ah["Drag here"]+"</div></div></div>";var s=document.createElement("style");s.type="text/css",s.innerHTML=sh.CSS,document.getElementsByTagName("HEAD")[0].appendChild(s);const c=document.getElementById("noteCanvas"),u=this._container=he(sh.HTML_MARKUP);function l(e){e.preventDefault(),e.stopPropagation()}c.insertBefore(u,t.firstChild),ce.bind(c,"drag",(function(e){}),!1),ce.bind(c,"dragstart",(function(e){}),!1),ce.bind(c,"dragend",(function(e){}),!1),ce.bind(c,"dragover",(function(e){l(e)}),!1),ce.bind(c,"dragenter",(function(e){document.getElementById("pjs-drop-zone").classList.add("pjs-visible")}),!1),ce.bind(c,"dragleave",(function(e){document.getElementById("pjs-drop-zone").classList.remove("pjs-visible")}),!1),ce.bind(c,"drop",(async function(e){l(e),document.getElementById("pjs-drop-zone").classList.remove("pjs-visible"),async function(e){let t,n=await async function(e,t){let n,i=[],r=null;e&&(e.dataTransfer.items||e.dataTransfer.files)&&(r=e.dataTransfer.items||e.dataTransfer.files);try{if(r)for(var o=0;o<r.length;o++)if(e&&e.dataTransfer.items){if("file"===r[o].kind){var a=r[o].getAsFile();i.push(a)}}else i.push(r[o])}catch(e){n=e,i=null}const s=i,c=[];for(var u=0;u<i.length;){s[u].filename=s[u].name;const e=await ih(0,i[u]);c.push(e),u+=1}return{file_results:s,image_results:c,errors:n}}(e),i=n.image_results,r=n.file_results;if(!n.errors){let n=r.length?r.length:null;t=n,!1===isNaN(n)&&(t+=" "+(+(1==r.length)?ah.file:ah.files)+" "+ah.uploaded);let o=r.length;for(;o--;)a(e,ch({source:i[o],file_source:r[o]}));console.log(t)}}(e)}),!1)}const ch=function(e){return{objId:oh(),objType:rh,objTitle:"",objDescription:"",objStarred:!1,objHidden:!1,objUnkeyed:!1,objUnkeyedOriginal:!1,objSrcUnkeyed:"",objCreationDate:"",source:"",objPositionX:null,objPositionY:null,...e}},uh=async function(e,t){t=t||[];const n=this._elementFactory.createShape({type:rh,...t}),i={x:e.x+100*Math.random(),y:e.y+100*Math.random()},r=this._canvas.getRootElement();var o=this._modeling.createElements([n],i,r,G({},{createElementsBehavior:!1},{attach:!1})),a=new URLSearchParams(window.location.search).get("s_key");if(null===a)shepherdAlert("Script Required","You must open a script before you can take notes!");else{let e=t.file_source;var s=new ActiveStorage.DirectUpload(e,direct_upload_url);await s.create(function(e,t,n){null!==t?t.search("Status: 403")>=0?shepherdAlert("Subscription Needed!",'You must have an active subscription to save images! You can sign up <button data-toggle="modal" href="#subscriptionModal" onclick="Shepherd.activeTour.complete(); $(\'#ideatorNotesModal\').modal(\'hide\');" data-description="Sign up for image uploading and other great featuers!" data-reset="$(\'#ideatorNotesModal\').modal(\'show\');" style="color: blue; margin-left: -6px; text-decoration: underline;">here!</button>'):shepherdAlert("Upload Error",t):n.key?$.ajax({type:"GET",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",$('meta[name="csrf-token"]').attr("content"))},url:"/scripts/"+a+"/image_url/"+n.key,responseType:"application/json",dataType:"json",success:function(e,t){for(let n in e)this._modeling.updateProperties(e[n],{source:t.url,key:t.key})}.bind(this,e)}):(shepherdAlert("Unknown Error","We've logged this issue.  If it continues, please reach out to support."),Bugsnag.notify("Unknown upload response: "+n.toString()))}.bind(this,o))}return{id:n.id,x:i.x,y:i.y,shape:n,width:n.width,height:n.height}};sh.prototype.$inject=["eventBus","canvas","modeling","elementFactory","create","translate"];const lh={__init__:["dragDropImages"],dragDropImages:["type",sh]};function ph(e){wi.call(this,e)}r()(ph,wi),ph.Viewer=Mr,ph.NavigatedViewer=io,ph.prototype.createDiagram=function(){return this.importXML('<?xml version="1.0" encoding="UTF-8"?>\n  <postit:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="sample-diagram">\n    <postit:PostitBoard id="Board_1">\n    </postit:PostitBoard>\n    <postitDi:PostitRootBoard id="RootBoard_1">\n      <postitDi:PostitPlane id="PositPlane_1" boardElement="Board_1">\n      </postitDi:PostitPlane>\n    </postitDi:PostitRootBoard>\n  </postit:definitions>')},ph.prototype._interactionModules=[Hr,Kr,ho,no],ph.prototype._modelingModules=[xo,Mo,Ca,Da,Ua,Va,Fs,Bs,ls,qs,Js,ec,cc,Pc,wp,jp,Wp,qp,Sc,nh,lh],ph.prototype._modules=[].concat(Mr.prototype._modules,ph.prototype._interactionModules,ph.prototype._modelingModules)},568:(e,t,n)=>{"use strict";var i=n(803);e.exports=i},269:function(e,t,n){var i;i=void 0!==n.g?n.g:this,e.exports=function(e){if(e.CSS&&e.CSS.escape)return e.CSS.escape;var t=function(e){if(0==arguments.length)throw new TypeError("`CSS.escape` requires an argument.");for(var t,n=String(e),i=n.length,r=-1,o="",a=n.charCodeAt(0);++r<i;)0!=(t=n.charCodeAt(r))?o+=t>=1&&t<=31||127==t||0==r&&t>=48&&t<=57||1==r&&t>=48&&t<=57&&45==a?"\\"+t.toString(16)+" ":0==r&&1==i&&45==t||!(t>=128||45==t||95==t||t>=48&&t<=57||t>=65&&t<=90||t>=97&&t<=122)?"\\"+n.charAt(r):n.charAt(r):o+="�";return o};return e.CSS||(e.CSS={}),e.CSS.escape=t,t}(i)},840:(e,t,n)=>{var i;!function(r,o,a,s){"use strict";var c,u=["","webkit","Moz","MS","ms","o"],l=o.createElement("div"),p=Math.round,h=Math.abs,d=Date.now;function f(e,t,n){return setTimeout(w(e,n),t)}function y(e,t,n){return!!Array.isArray(e)&&(v(e,n[t],n),!0)}function v(e,t,n){var i;if(e)if(e.forEach)e.forEach(t,n);else if(e.length!==s)for(i=0;i<e.length;)t.call(n,e[i],i,e),i++;else for(i in e)e.hasOwnProperty(i)&&t.call(n,e[i],i,e)}function g(e,t,n){var i="DEPRECATED METHOD: "+t+"\n"+n+" AT \n";return function(){var t=new Error("get-stack-trace"),n=t&&t.stack?t.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=r.console&&(r.console.warn||r.console.log);return o&&o.call(r.console,i,n),e.apply(this,arguments)}}c="function"!=typeof Object.assign?function(e){if(e===s||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(i!==s&&null!==i)for(var r in i)i.hasOwnProperty(r)&&(t[r]=i[r])}return t}:Object.assign;var m=g((function(e,t,n){for(var i=Object.keys(t),r=0;r<i.length;)(!n||n&&e[i[r]]===s)&&(e[i[r]]=t[i[r]]),r++;return e}),"extend","Use `assign`."),x=g((function(e,t){return m(e,t,!0)}),"merge","Use `assign`.");function _(e,t,n){var i,r=t.prototype;(i=e.prototype=Object.create(r)).constructor=e,i._super=r,n&&c(i,n)}function w(e,t){return function(){return e.apply(t,arguments)}}function b(e,t){return"function"==typeof e?e.apply(t&&t[0]||s,t):e}function E(e,t){return e===s?t:e}function S(e,t,n){v(M(t),(function(t){e.addEventListener(t,n,!1)}))}function T(e,t,n){v(M(t),(function(t){e.removeEventListener(t,n,!1)}))}function k(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function C(e,t){return e.indexOf(t)>-1}function M(e){return e.trim().split(/\s+/g)}function P(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var i=0;i<e.length;){if(n&&e[i][n]==t||!n&&e[i]===t)return i;i++}return-1}function j(e){return Array.prototype.slice.call(e,0)}function B(e,t,n){for(var i=[],r=[],o=0;o<e.length;){var a=t?e[o][t]:e[o];P(r,a)<0&&i.push(e[o]),r[o]=a,o++}return n&&(i=t?i.sort((function(e,n){return e[t]>n[t]})):i.sort()),i}function A(e,t){for(var n,i,r=t[0].toUpperCase()+t.slice(1),o=0;o<u.length;){if((i=(n=u[o])?n+r:t)in e)return i;o++}return s}var R=1;function O(e){var t=e.ownerDocument||e;return t.defaultView||t.parentWindow||r}var N="ontouchstart"in r,L=A(r,"PointerEvent")!==s,z=N&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),D="touch",I="mouse",$=["x","y"],F=["clientX","clientY"];function H(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){b(e.options.enable,[e])&&n.handler(t)},this.init()}function G(e,t,n){var i=n.pointers.length,r=n.changedPointers.length,o=1&t&&i-r==0,a=12&t&&i-r==0;n.isFirst=!!o,n.isFinal=!!a,o&&(e.session={}),n.eventType=t,function(e,t){var n=e.session,i=t.pointers,r=i.length;n.firstInput||(n.firstInput=U(t)),r>1&&!n.firstMultiple?n.firstMultiple=U(t):1===r&&(n.firstMultiple=!1);var o=n.firstInput,a=n.firstMultiple,c=a?a.center:o.center,u=t.center=W(i);t.timeStamp=d(),t.deltaTime=t.timeStamp-o.timeStamp,t.angle=X(c,u),t.distance=Y(c,u),function(e,t){var n=t.center,i=e.offsetDelta||{},r=e.prevDelta||{},o=e.prevInput||{};1!==t.eventType&&4!==o.eventType||(r=e.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=e.offsetDelta={x:n.x,y:n.y}),t.deltaX=r.x+(n.x-i.x),t.deltaY=r.y+(n.y-i.y)}(n,t),t.offsetDirection=q(t.deltaX,t.deltaY);var l,p,f=V(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=f.x,t.overallVelocityY=f.y,t.overallVelocity=h(f.x)>h(f.y)?f.x:f.y,t.scale=a?(l=a.pointers,Y((p=i)[0],p[1],F)/Y(l[0],l[1],F)):1,t.rotation=a?function(e,t){return X(t[1],t[0],F)+X(e[1],e[0],F)}(a.pointers,i):0,t.maxPointers=n.prevInput?t.pointers.length>n.prevInput.maxPointers?t.pointers.length:n.prevInput.maxPointers:t.pointers.length,function(e,t){var n,i,r,o,a=e.lastInterval||t,c=t.timeStamp-a.timeStamp;if(8!=t.eventType&&(c>25||a.velocity===s)){var u=t.deltaX-a.deltaX,l=t.deltaY-a.deltaY,p=V(c,u,l);i=p.x,r=p.y,n=h(p.x)>h(p.y)?p.x:p.y,o=q(u,l),e.lastInterval=t}else n=a.velocity,i=a.velocityX,r=a.velocityY,o=a.direction;t.velocity=n,t.velocityX=i,t.velocityY=r,t.direction=o}(n,t);var y=e.element;k(t.srcEvent.target,y)&&(y=t.srcEvent.target),t.target=y}(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function U(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:p(e.pointers[n].clientX),clientY:p(e.pointers[n].clientY)},n++;return{timeStamp:d(),pointers:t,center:W(t),deltaX:e.deltaX,deltaY:e.deltaY}}function W(e){var t=e.length;if(1===t)return{x:p(e[0].clientX),y:p(e[0].clientY)};for(var n=0,i=0,r=0;r<t;)n+=e[r].clientX,i+=e[r].clientY,r++;return{x:p(n/t),y:p(i/t)}}function V(e,t,n){return{x:t/e||0,y:n/e||0}}function q(e,t){return e===t?1:h(e)>=h(t)?e<0?2:4:t<0?8:16}function Y(e,t,n){n||(n=$);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return Math.sqrt(i*i+r*r)}function X(e,t,n){n||(n=$);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return 180*Math.atan2(r,i)/Math.PI}H.prototype={handler:function(){},init:function(){this.evEl&&S(this.element,this.evEl,this.domHandler),this.evTarget&&S(this.target,this.evTarget,this.domHandler),this.evWin&&S(O(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&T(this.element,this.evEl,this.domHandler),this.evTarget&&T(this.target,this.evTarget,this.domHandler),this.evWin&&T(O(this.element),this.evWin,this.domHandler)}};var K={mousedown:1,mousemove:2,mouseup:4},Z="mousedown",J="mousemove mouseup";function Q(){this.evEl=Z,this.evWin=J,this.pressed=!1,H.apply(this,arguments)}_(Q,H,{handler:function(e){var t=K[e.type];1&t&&0===e.button&&(this.pressed=!0),2&t&&1!==e.which&&(t=4),this.pressed&&(4&t&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:I,srcEvent:e}))}});var ee={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8},te={2:D,3:"pen",4:I,5:"kinect"},ne="pointerdown",ie="pointermove pointerup pointercancel";function re(){this.evEl=ne,this.evWin=ie,H.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}r.MSPointerEvent&&!r.PointerEvent&&(ne="MSPointerDown",ie="MSPointerMove MSPointerUp MSPointerCancel"),_(re,H,{handler:function(e){var t=this.store,n=!1,i=e.type.toLowerCase().replace("ms",""),r=ee[i],o=te[e.pointerType]||e.pointerType,a=o==D,s=P(t,e.pointerId,"pointerId");1&r&&(0===e.button||a)?s<0&&(t.push(e),s=t.length-1):12&r&&(n=!0),s<0||(t[s]=e,this.callback(this.manager,r,{pointers:t,changedPointers:[e],pointerType:o,srcEvent:e}),n&&t.splice(s,1))}});var oe={touchstart:1,touchmove:2,touchend:4,touchcancel:8},ae="touchstart",se="touchstart touchmove touchend touchcancel";function ce(){this.evTarget=ae,this.evWin=se,this.started=!1,H.apply(this,arguments)}function ue(e,t){var n=j(e.touches),i=j(e.changedTouches);return 12&t&&(n=B(n.concat(i),"identifier",!0)),[n,i]}_(ce,H,{handler:function(e){var t=oe[e.type];if(1===t&&(this.started=!0),this.started){var n=ue.call(this,e,t);12&t&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:D,srcEvent:e})}}});var le={touchstart:1,touchmove:2,touchend:4,touchcancel:8},pe="touchstart touchmove touchend touchcancel";function he(){this.evTarget=pe,this.targetIds={},H.apply(this,arguments)}function de(e,t){var n=j(e.touches),i=this.targetIds;if(3&t&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,a=j(e.changedTouches),s=[],c=this.target;if(o=n.filter((function(e){return k(e.target,c)})),1===t)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<a.length;)i[a[r].identifier]&&s.push(a[r]),12&t&&delete i[a[r].identifier],r++;return s.length?[B(o.concat(s),"identifier",!0),s]:void 0}function fe(){H.apply(this,arguments);var e=w(this.handler,this);this.touch=new he(this.manager,e),this.mouse=new Q(this.manager,e),this.primaryTouch=null,this.lastTouches=[]}function ye(e,t){1&e?(this.primaryTouch=t.changedPointers[0].identifier,ve.call(this,t)):12&e&&ve.call(this,t)}function ve(e){var t=e.changedPointers[0];if(t.identifier===this.primaryTouch){var n={x:t.clientX,y:t.clientY};this.lastTouches.push(n);var i=this.lastTouches;setTimeout((function(){var e=i.indexOf(n);e>-1&&i.splice(e,1)}),2500)}}function ge(e){for(var t=e.srcEvent.clientX,n=e.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(t-r.x),a=Math.abs(n-r.y);if(o<=25&&a<=25)return!0}return!1}_(he,H,{handler:function(e){var t=le[e.type],n=de.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:D,srcEvent:e})}}),_(fe,H,{handler:function(e,t,n){var i=n.pointerType==D,r=n.pointerType==I;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)ye.call(this,t,n);else if(r&&ge.call(this,n))return;this.callback(e,t,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var me=A(l.style,"touchAction"),xe=me!==s,_e="compute",we="auto",be="manipulation",Ee="none",Se="pan-x",Te="pan-y",ke=function(){if(!xe)return!1;var e={},t=r.CSS&&r.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){e[n]=!t||r.CSS.supports("touch-action",n)})),e}();function Ce(e,t){this.manager=e,this.set(t)}Ce.prototype={set:function(e){e==_e&&(e=this.compute()),xe&&this.manager.element.style&&ke[e]&&(this.manager.element.style[me]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return v(this.manager.recognizers,(function(t){b(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))})),function(e){if(C(e,Ee))return Ee;var t=C(e,Se),n=C(e,Te);return t&&n?Ee:t||n?t?Se:Te:C(e,be)?be:we}(e.join(" "))},preventDefaults:function(e){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)t.preventDefault();else{var i=this.actions,r=C(i,Ee)&&!ke.none,o=C(i,Te)&&!ke["pan-y"],a=C(i,Se)&&!ke["pan-x"];if(r){var s=1===e.pointers.length,c=e.distance<2,u=e.deltaTime<250;if(s&&c&&u)return}if(!a||!o)return r||o&&6&n||a&&24&n?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var Me=32;function Pe(e){this.options=c({},this.defaults,e||{}),this.id=R++,this.manager=null,this.options.enable=E(this.options.enable,!0),this.state=1,this.simultaneous={},this.requireFail=[]}function je(e){return 16&e?"cancel":8&e?"end":4&e?"move":2&e?"start":""}function Be(e){return 16==e?"down":8==e?"up":2==e?"left":4==e?"right":""}function Ae(e,t){var n=t.manager;return n?n.get(e):e}function Re(){Pe.apply(this,arguments)}function Oe(){Re.apply(this,arguments),this.pX=null,this.pY=null}function Ne(){Re.apply(this,arguments)}function Le(){Pe.apply(this,arguments),this._timer=null,this._input=null}function ze(){Re.apply(this,arguments)}function De(){Re.apply(this,arguments)}function Ie(){Pe.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function $e(e,t){return(t=t||{}).recognizers=E(t.recognizers,$e.defaults.preset),new Fe(e,t)}function Fe(e,t){this.options=c({},$e.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=e,this.input=new(this.options.inputClass||(L?re:z?he:N?fe:Q))(this,G),this.touchAction=new Ce(this,this.options.touchAction),He(this,!0),v(this.options.recognizers,(function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])}),this)}function He(e,t){var n,i=e.element;i.style&&(v(e.options.cssProps,(function(r,o){n=A(i.style,o),t?(e.oldCssProps[n]=i.style[n],i.style[n]=r):i.style[n]=e.oldCssProps[n]||""})),t||(e.oldCssProps={}))}Pe.prototype={defaults:{},set:function(e){return c(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(y(e,"recognizeWith",this))return this;var t=this.simultaneous;return t[(e=Ae(e,this)).id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return y(e,"dropRecognizeWith",this)||(e=Ae(e,this),delete this.simultaneous[e.id]),this},requireFailure:function(e){if(y(e,"requireFailure",this))return this;var t=this.requireFail;return-1===P(t,e=Ae(e,this))&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(y(e,"dropRequireFailure",this))return this;e=Ae(e,this);var t=P(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){var t=this,n=this.state;function i(n){t.manager.emit(n,e)}n<8&&i(t.options.event+je(n)),i(t.options.event),e.additionalEvent&&i(e.additionalEvent),n>=8&&i(t.options.event+je(n))},tryEmit:function(e){if(this.canEmit())return this.emit(e);this.state=Me},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(33&this.requireFail[e].state))return!1;e++}return!0},recognize:function(e){var t=c({},e);if(!b(this.options.enable,[this,t]))return this.reset(),void(this.state=Me);56&this.state&&(this.state=1),this.state=this.process(t),30&this.state&&this.tryEmit(t)},process:function(e){},getTouchAction:function(){},reset:function(){}},_(Re,Pe,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,i=6&t,r=this.attrTest(e);return i&&(8&n||!r)?16|t:i||r?4&n?8|t:2&t?4|t:2:Me}}),_(Oe,Re,{defaults:{event:"pan",threshold:10,pointers:1,direction:30},getTouchAction:function(){var e=this.options.direction,t=[];return 6&e&&t.push(Te),24&e&&t.push(Se),t},directionTest:function(e){var t=this.options,n=!0,i=e.distance,r=e.direction,o=e.deltaX,a=e.deltaY;return r&t.direction||(6&t.direction?(r=0===o?1:o<0?2:4,n=o!=this.pX,i=Math.abs(e.deltaX)):(r=0===a?1:a<0?8:16,n=a!=this.pY,i=Math.abs(e.deltaY))),e.direction=r,n&&i>t.threshold&&r&t.direction},attrTest:function(e){return Re.prototype.attrTest.call(this,e)&&(2&this.state||!(2&this.state)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=Be(e.direction);t&&(e.additionalEvent=this.options.event+t),this._super.emit.call(this,e)}}),_(Ne,Re,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[Ee]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||2&this.state)},emit:function(e){if(1!==e.scale){var t=e.scale<1?"in":"out";e.additionalEvent=this.options.event+t}this._super.emit.call(this,e)}}),_(Le,Pe,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[we]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,r=e.deltaTime>t.time;if(this._input=e,!i||!n||12&e.eventType&&!r)this.reset();else if(1&e.eventType)this.reset(),this._timer=f((function(){this.state=8,this.tryEmit()}),t.time,this);else if(4&e.eventType)return 8;return Me},reset:function(){clearTimeout(this._timer)},emit:function(e){8===this.state&&(e&&4&e.eventType?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=d(),this.manager.emit(this.options.event,this._input)))}}),_(ze,Re,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[Ee]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||2&this.state)}}),_(De,Re,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:30,pointers:1},getTouchAction:function(){return Oe.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return 30&n?t=e.overallVelocity:6&n?t=e.overallVelocityX:24&n&&(t=e.overallVelocityY),this._super.attrTest.call(this,e)&&n&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers==this.options.pointers&&h(t)>this.options.velocity&&4&e.eventType},emit:function(e){var t=Be(e.offsetDirection);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),_(Ie,Pe,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[be]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,r=e.deltaTime<t.time;if(this.reset(),1&e.eventType&&0===this.count)return this.failTimeout();if(i&&r&&n){if(4!=e.eventType)return this.failTimeout();var o=!this.pTime||e.timeStamp-this.pTime<t.interval,a=!this.pCenter||Y(this.pCenter,e.center)<t.posThreshold;if(this.pTime=e.timeStamp,this.pCenter=e.center,a&&o?this.count+=1:this.count=1,this._input=e,0==this.count%t.taps)return this.hasRequireFailures()?(this._timer=f((function(){this.state=8,this.tryEmit()}),t.interval,this),2):8}return Me},failTimeout:function(){return this._timer=f((function(){this.state=Me}),this.options.interval,this),Me},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),$e.VERSION="2.0.7",$e.defaults={domEvents:!1,touchAction:_e,enable:!0,inputTarget:null,inputClass:null,preset:[[ze,{enable:!1}],[Ne,{enable:!1},["rotate"]],[De,{direction:6}],[Oe,{direction:6},["swipe"]],[Ie],[Ie,{event:"doubletap",taps:2},["tap"]],[Le]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},Fe.prototype={set:function(e){return c(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?2:1},recognize:function(e){var t=this.session;if(!t.stopped){var n;this.touchAction.preventDefaults(e);var i=this.recognizers,r=t.curRecognizer;(!r||r&&8&r.state)&&(r=t.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],2===t.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(e),!r&&14&n.state&&(r=t.curRecognizer=n),o++}},get:function(e){if(e instanceof Pe)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(y(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(y(e,"remove",this))return this;if(e=this.get(e)){var t=this.recognizers,n=P(t,e);-1!==n&&(t.splice(n,1),this.touchAction.update())}return this},on:function(e,t){if(e!==s&&t!==s){var n=this.handlers;return v(M(e),(function(e){n[e]=n[e]||[],n[e].push(t)})),this}},off:function(e,t){if(e!==s){var n=this.handlers;return v(M(e),(function(e){t?n[e]&&n[e].splice(P(n[e],t),1):delete n[e]})),this}},emit:function(e,t){this.options.domEvents&&function(e,t){var n=o.createEvent("Event");n.initEvent(e,!0,!0),n.gesture=t,t.target.dispatchEvent(n)}(e,t);var n=this.handlers[e]&&this.handlers[e].slice();if(n&&n.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](t),i++}},destroy:function(){this.element&&He(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},c($e,{INPUT_START:1,INPUT_MOVE:2,INPUT_END:4,INPUT_CANCEL:8,STATE_POSSIBLE:1,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:Me,DIRECTION_NONE:1,DIRECTION_LEFT:2,DIRECTION_RIGHT:4,DIRECTION_UP:8,DIRECTION_DOWN:16,DIRECTION_HORIZONTAL:6,DIRECTION_VERTICAL:24,DIRECTION_ALL:30,Manager:Fe,Input:H,TouchAction:Ce,TouchInput:he,MouseInput:Q,PointerEventInput:re,TouchMouseInput:fe,SingleTouchInput:ce,Recognizer:Pe,AttrRecognizer:Re,Tap:Ie,Pan:Oe,Swipe:De,Pinch:Ne,Rotate:ze,Press:Le,on:S,off:T,each:v,merge:x,extend:m,assign:c,inherit:_,bindFn:w,prefixed:A}),(void 0!==r?r:"undefined"!=typeof self?self:{}).Hammer=$e,(i=function(){return $e}.call(t,n,t,e))===s||(e.exports=i)}(window,document)},717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},235:(e,t,n)=>{e.exports=n(302),e.exports.Collection=n(48)},48:e=>{"use strict";e.exports.extend=function(e,t,n,i){var r=n.inverse;return Object.defineProperty(e,"remove",{value:function(e){var n=this.indexOf(e);return-1!==n&&(this.splice(n,1),t.unset(e,r,i)),e}}),Object.defineProperty(e,"contains",{value:function(e){return-1!==this.indexOf(e)}}),Object.defineProperty(e,"add",{value:function(e,n){var o=this.indexOf(e);if(void 0===n){if(-1!==o)return;n=this.length}-1!==o&&this.splice(o,1),this.splice(n,0,e),-1===o&&t.set(e,r,i)}}),Object.defineProperty(e,"__refs_collection",{value:!0}),e},e.exports.isExtended=function(e){return!0===e.__refs_collection}},302:(e,t,n)=>{"use strict";var i=n(48);function r(e,t,n){var r=i.extend(n[t.name]||[],e,t,n);Object.defineProperty(n,t.name,{enumerable:t.enumerable,value:r}),r.length&&r.forEach((function(i){e.set(i,t.inverse,n)}))}function o(e,t){if(!(this instanceof o))return new o(e,t);e.inverse=t,t.inverse=e,this.props={},this.props[e.name]=e,this.props[t.name]=t}o.prototype.bind=function(e,t){if("string"==typeof t){if(!this.props[t])throw new Error("no property <"+t+"> in ref");t=this.props[t]}t.collection?r(this,t,e):function(e,t,n){var i=t.inverse,r=n[t.name];Object.defineProperty(n,t.name,{configurable:t.configurable,enumerable:t.enumerable,get:function(){return r},set:function(t){if(t!==r){var o=r;r=null,o&&e.unset(o,i,n),r=t,e.set(r,i,n)}}})}(this,t,e)},o.prototype.ensureRefsCollection=function(e,t){var n=e[t.name];return i.isExtended(n)||r(this,t,e),n},o.prototype.ensureBound=function(e,t){(function(e,t){return Object.prototype.hasOwnProperty.call(e,t.name||t)})(e,t)||this.bind(e,t)},o.prototype.unset=function(e,t,n){e&&(this.ensureBound(e,t),t.collection?this.ensureRefsCollection(e,t).remove(n):e[t.name]=void 0)},o.prototype.set=function(e,t,n){e&&(this.ensureBound(e,t),t.collection?this.ensureRefsCollection(e,t).add(n):e[t.name]=n)},e.exports=o},720:e=>{"use strict";var t=/,?([a-z]),?/gi,n=parseFloat,i=Math,r=i.PI,o=i.min,a=i.max,s=i.pow,c=i.abs,u=/([a-z])[\s,]*((-?\d*\.?\d*(?:e[-+]?\d+)?[\s]*,?[\s]*)+)/gi,l=/(-?\d*\.?\d*(?:e[-+]?\d+)?)[\s]*,?[\s]*/gi,p=Array.isArray||function(e){return e instanceof Array};function h(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if("function"==typeof e||Object(e)!==e)return e;var t=new e.constructor;for(var n in e)h(e,n)&&(t[n]=d(e[n]));return t}function f(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return e.push(e.splice(n,1)[0])}function y(e){var t=y.ps=y.ps||{};return t[e]?t[e].sleep=100:t[e]={sleep:100},setTimeout((function(){for(var n in t)h(t,n)&&n!=e&&(t[n].sleep--,!t[n].sleep&&delete t[n])})),t[e]}function v(e,t,n,i){return 1===arguments.length&&(t=e.y,n=e.width,i=e.height,e=e.x),{x:e,y:t,width:n,height:i,x2:e+n,y2:t+i}}function g(){return this.join(",").replace(t,"$1")}function m(e){var t=d(e);return t.toString=g,t}function x(e,t,n,i,r,o,a,c,u){var l=1-u,p=s(l,3),h=s(l,2),d=u*u*u,f=p*t+3*h*u*i+3*l*u*u*o+d*c;return{x:T(p*e+3*h*u*n+3*l*u*u*r+d*a),y:T(f)}}function _(e){var t=A.apply(null,e);return v(t.x0,t.y0,t.x1-t.x0,t.y1-t.y0)}function w(e,t,n){return t>=e.x&&t<=e.x+e.width&&n>=e.y&&n<=e.y+e.height}function b(e,t,n,i,r){return e*(e*(-3*t+9*n-9*i+3*r)+6*t-12*n+6*i)-3*t+3*n}function E(e,t,n,r,o,a,s,c,u){null==u&&(u=1);for(var l=(u=u>1?1:u<0?0:u)/2,p=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],h=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],d=0,f=0;f<12;f++){var y=l*p[f]+l,v=b(y,e,n,o,s),g=b(y,t,r,a,c),m=v*v+g*g;d+=h[f]*i.sqrt(m)}return l*d}function S(e,t,n,i,r,s,c,u){if(!(a(e,n)<o(r,c)||o(e,n)>a(r,c)||a(t,i)<o(s,u)||o(t,i)>a(s,u))){var l=(e*i-t*n)*(s-u)-(t-i)*(r*u-s*c),p=(e-n)*(s-u)-(t-i)*(r-c);if(p){var h=T(((e*i-t*n)*(r-c)-(e-n)*(r*u-s*c))/p),d=T(l/p),f=+h.toFixed(2),y=+d.toFixed(2);if(!(f<+o(e,n).toFixed(2)||f>+a(e,n).toFixed(2)||f<+o(r,c).toFixed(2)||f>+a(r,c).toFixed(2)||y<+o(t,i).toFixed(2)||y>+a(t,i).toFixed(2)||y<+o(s,u).toFixed(2)||y>+a(s,u).toFixed(2)))return{x:h,y:d}}}}function T(e){return Math.round(1e11*e)/1e11}function k(e,t,n){if(i=_(e),r=_(t),i=v(i),!(w(r=v(r),i.x,i.y)||w(r,i.x2,i.y)||w(r,i.x,i.y2)||w(r,i.x2,i.y2)||w(i,r.x,r.y)||w(i,r.x2,r.y)||w(i,r.x,r.y2)||w(i,r.x2,r.y2)||(i.x<r.x2&&i.x>r.x||r.x<i.x2&&r.x>i.x)&&(i.y<r.y2&&i.y>r.y||r.y<i.y2&&r.y>i.y)))return n?0:[];for(var i,r,o=E.apply(0,e),a=E.apply(0,t),s=M(e)?1:~~(o/5)||1,u=M(t)?1:~~(a/5)||1,l=[],p=[],h={},d=n?0:[],f=0;f<s+1;f++){var y=x.apply(0,e.concat(f/s));l.push({x:y.x,y:y.y,t:f/s})}for(f=0;f<u+1;f++)y=x.apply(0,t.concat(f/u)),p.push({x:y.x,y:y.y,t:f/u});for(f=0;f<s;f++)for(var g=0;g<u;g++){var m,b=l[f],T=l[f+1],k=p[g],C=p[g+1],P=c(T.x-b.x)<.01?"y":"x",j=c(C.x-k.x)<.01?"y":"x",B=S(b.x,b.y,T.x,T.y,k.x,k.y,C.x,C.y);if(B){if(h[m=B.x.toFixed(9)+"#"+B.y.toFixed(9)])continue;h[m]=!0;var A=b.t+c((B[P]-b[P])/(T[P]-b[P]))*(T.t-b.t),R=k.t+c((B[j]-k[j])/(C[j]-k[j]))*(C.t-k.t);A>=0&&A<=1&&R>=0&&R<=1&&(n?d++:d.push({x:B.x,y:B.y,t1:A,t2:R}))}}return d}function C(e){var t=y(e);if(t.abs)return m(t.abs);if(p(e)&&p(e&&e[0])||(e=function(e){if(!e)return null;var t=y(e);if(t.arr)return d(t.arr);var n={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},i=[];return p(e)&&p(e[0])&&(i=d(e)),i.length||String(e).replace(u,(function(e,t,r){var o=[],a=t.toLowerCase();for(r.replace(l,(function(e,t){t&&o.push(+t)})),"m"==a&&o.length>2&&(i.push([t].concat(o.splice(0,2))),a="l",t="m"==t?"l":"L");o.length>=n[a]&&(i.push([t].concat(o.splice(0,n[a]))),n[a]););})),i.toString=y.toString,t.arr=d(i),i}(e)),!e||!e.length)return[["M",0,0]];var n,i=[],r=0,o=0,a=0,s=0,c=0;"M"==e[0][0]&&(a=r=+e[0][1],s=o=+e[0][2],c++,i[0]=["M",r,o]);for(var h,f,v=c,x=e.length;v<x;v++){if(i.push(h=[]),(n=(f=e[v])[0])!=n.toUpperCase())switch(h[0]=n.toUpperCase(),h[0]){case"A":h[1]=f[1],h[2]=f[2],h[3]=f[3],h[4]=f[4],h[5]=f[5],h[6]=+f[6]+r,h[7]=+f[7]+o;break;case"V":h[1]=+f[1]+o;break;case"H":h[1]=+f[1]+r;break;case"M":a=+f[1]+r,s=+f[2]+o;default:for(var _=1,w=f.length;_<w;_++)h[_]=+f[_]+(_%2?r:o)}else for(var b=0,E=f.length;b<E;b++)h[b]=f[b];switch(n=n.toUpperCase(),h[0]){case"Z":r=+a,o=+s;break;case"H":r=h[1];break;case"V":o=h[1];break;case"M":a=h[h.length-2],s=h[h.length-1];default:r=h[h.length-2],o=h[h.length-1]}}return i.toString=g,t.abs=m(i),i}function M(e){return e[0]===e[2]&&e[1]===e[3]&&e[4]===e[6]&&e[5]===e[7]}function P(e,t,n,i){return[e,t,n,i,n,i]}function j(e,t,n,i,r,o){var a=1/3,s=2/3;return[a*e+s*n,a*t+s*i,a*r+s*n,a*o+s*i,r,o]}function B(e,t,n,o,a,s,u,l,p,d){var y,v,g=120*r/180,m=r/180*(+a||0),x=[],_=(v=function(e,t,n){return{x:e*i.cos(n)-t*i.sin(n),y:e*i.sin(n)+t*i.cos(n)}},function e(){var t=Array.prototype.slice.call(arguments,0),n=t.join("␀"),i=e.cache=e.cache||{},r=e.count=e.count||[];return h(i,n)?(f(r,n),i[n]):(r.length>=1e3&&delete i[r.shift()],r.push(n),i[n]=v.apply(0,t),i[n])});if(d)P=d[0],j=d[1],C=d[2],M=d[3];else{e=(y=_(e,t,-m)).x,t=y.y;var w=(e-(l=(y=_(l,p,-m)).x))/2,b=(t-(p=y.y))/2,E=w*w/(n*n)+b*b/(o*o);E>1&&(n*=E=i.sqrt(E),o*=E);var S=n*n,T=o*o,k=(s==u?-1:1)*i.sqrt(c((S*T-S*b*b-T*w*w)/(S*b*b+T*w*w))),C=k*n*b/o+(e+l)/2,M=k*-o*w/n+(t+p)/2,P=i.asin(((t-M)/o).toFixed(9)),j=i.asin(((p-M)/o).toFixed(9));(P=e<C?r-P:P)<0&&(P=2*r+P),(j=l<C?r-j:j)<0&&(j=2*r+j),u&&P>j&&(P-=2*r),!u&&j>P&&(j-=2*r)}var A=j-P;if(c(A)>g){var R=j,O=l,N=p;j=P+g*(u&&j>P?1:-1),x=B(l=C+n*i.cos(j),p=M+o*i.sin(j),n,o,a,0,u,O,N,[j,R,C,M])}A=j-P;var L=i.cos(P),z=i.sin(P),D=i.cos(j),I=i.sin(j),$=i.tan(A/4),F=4/3*n*$,H=4/3*o*$,G=[e,t],U=[e+F*z,t-H*L],W=[l+F*I,p-H*D],V=[l,p];if(U[0]=2*G[0]-U[0],U[1]=2*G[1]-U[1],d)return[U,W,V].concat(x);for(var q=[],Y=0,X=(x=[U,W,V].concat(x).join().split(",")).length;Y<X;Y++)q[Y]=Y%2?_(x[Y-1],x[Y],m).y:_(x[Y],x[Y+1],m).x;return q}function A(e,t,n,r,s,u,l,p){for(var h,d,f,y,v,g,m,x,_=[],w=[[],[]],b=0;b<2;++b)if(0==b?(d=6*e-12*n+6*s,h=-3*e+9*n-9*s+3*l,f=3*n-3*e):(d=6*t-12*r+6*u,h=-3*t+9*r-9*u+3*p,f=3*r-3*t),c(h)<1e-12){if(c(d)<1e-12)continue;0<(y=-f/d)&&y<1&&_.push(y)}else m=d*d-4*f*h,x=i.sqrt(m),m<0||(0<(v=(-d+x)/(2*h))&&v<1&&_.push(v),0<(g=(-d-x)/(2*h))&&g<1&&_.push(g));for(var E,S=_.length,T=S;S--;)E=1-(y=_[S]),w[0][S]=E*E*E*e+3*E*E*y*n+3*E*y*y*s+y*y*y*l,w[1][S]=E*E*E*t+3*E*E*y*r+3*E*y*y*u+y*y*y*p;return w[0][T]=e,w[1][T]=t,w[0][T+1]=l,w[1][T+1]=p,w[0].length=w[1].length=T+2,{x0:o.apply(0,w[0]),y0:o.apply(0,w[1]),x1:a.apply(0,w[0]),y1:a.apply(0,w[1])}}function R(e){var t=y(e);if(t.curve)return m(t.curve);for(var i=C(e),r={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},o=function(e,t,n){var i,r;if(!e)return["C",t.x,t.y,t.x,t.y,t.x,t.y];switch(!(e[0]in{T:1,Q:1})&&(t.qx=t.qy=null),e[0]){case"M":t.X=e[1],t.Y=e[2];break;case"A":e=["C"].concat(B.apply(0,[t.x,t.y].concat(e.slice(1))));break;case"S":"C"==n||"S"==n?(i=2*t.x-t.bx,r=2*t.y-t.by):(i=t.x,r=t.y),e=["C",i,r].concat(e.slice(1));break;case"T":"Q"==n||"T"==n?(t.qx=2*t.x-t.qx,t.qy=2*t.y-t.qy):(t.qx=t.x,t.qy=t.y),e=["C"].concat(j(t.x,t.y,t.qx,t.qy,e[1],e[2]));break;case"Q":t.qx=e[1],t.qy=e[2],e=["C"].concat(j(t.x,t.y,e[1],e[2],e[3],e[4]));break;case"L":e=["C"].concat(P(t.x,t.y,e[1],e[2]));break;case"H":e=["C"].concat(P(t.x,t.y,e[1],t.y));break;case"V":e=["C"].concat(P(t.x,t.y,t.x,e[1]));break;case"Z":e=["C"].concat(P(t.x,t.y,t.X,t.Y))}return e},a=function(e,t){if(e[t].length>7){e[t].shift();for(var n=e[t];n.length;)s[t]="A",e.splice(t++,0,["C"].concat(n.splice(0,6)));e.splice(t,1),p=i.length}},s=[],c="",u="",l=0,p=i.length;l<p;l++){i[l]&&(c=i[l][0]),"C"!=c&&(s[l]=c,l&&(u=s[l-1])),i[l]=o(i[l],r,u),"A"!=s[l]&&"C"==c&&(s[l]="C"),a(i,l);var h=i[l],d=h.length;r.x=h[d-2],r.y=h[d-1],r.bx=n(h[d-4])||r.x,r.by=n(h[d-3])||r.y}return t.curve=m(i),i}e.exports=function(e,t,n){e=R(e),t=R(t);for(var i,r,o,a,s,c,u,l,p,h,d=n?0:[],f=0,y=e.length;f<y;f++){var v=e[f];if("M"==v[0])i=s=v[1],r=c=v[2];else{"C"==v[0]?(p=[i,r].concat(v.slice(1)),i=p[6],r=p[7]):(p=[i,r,i,r,s,c,s,c],i=s,r=c);for(var g=0,m=t.length;g<m;g++){var x=t[g];if("M"==x[0])o=u=x[1],a=l=x[2];else{"C"==x[0]?(h=[o,a].concat(x.slice(1)),o=h[6],a=h[7]):(h=[o,a,o,a,u,l,u,l],o=u,a=l);var _=k(p,h,n);if(n)d+=_;else{for(var w=0,b=_.length;w<b;w++)_[w].segment1=f,_[w].segment2=g,_[w].bez1=p,_[w].bez2=h;d=d.concat(_)}}}}}return d}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}return n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(568)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,